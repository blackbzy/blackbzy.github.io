%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.6.1 (Build 23G93) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
1 1 1 sc
q
29.349701 18.342501 m
25.8836 15.5357 20.9266 15.5357 17.460501 18.342501 c
18.800699 19.9974 l
21.485399 17.8234 25.3248 17.8234 28.009501 19.9974 c
29.349701 18.342501 l
h
W
0 0 132 43 rc
16.460501 20.9974 m
30.349701 20.9974 l
30.349701 14.5357 l
16.460501 14.5357 l
h
f
Q
q
18.903999 21.986601 2.1296 2.8769 rc
17.903999 25.863501 m
22.0336 25.863501 l
22.0336 20.986601 l
17.903999 20.986601 l
h
f
Q
q
25.511999 21.986601 2.1294999 2.8769 rc
24.511999 25.863501 m
28.6415 25.863501 l
28.6415 20.986601 l
24.511999 20.986601 l
h
f
Q
q
23 9.5 m
29.351299 9.5 34.5 14.6487 34.5 21 c
34.5 27.351299 29.351299 32.5 23 32.5 c
16.648701 32.5 11.5 27.351299 11.5 21 c
11.5 14.6487 16.648701 9.5 23 9.5 c
h
23 11.6295 m
28.1752 11.6295 32.370499 15.8248 32.370499 21 c
32.370499 26.1752 28.1752 30.370501 23 30.370501 c
17.8248 30.370501 13.6295 26.1752 13.6295 21 c
13.6295 15.8248 17.8248 11.6295 23 11.6295 c
h
W*
0 0 132 43 rc
10.5 33.5 m
35.5 33.5 l
35.5 8.5 l
10.5 8.5 l
h
f
Q
q
98.9907 31.4918 m
98.692802 31.2407 98.5439 30.7663 98.5439 30.068501 c
98.5439 27.290199 l
97.660301 27.290199 l
97.660301 34.5 l
98.5439 34.5 l
98.5439 31.819599 l
98.753403 32.083698 98.941597 32.2696 99.108498 32.377201 c
99.393204 32.563042 99.748299 32.655972 100.1737 32.655972 c
100.936 32.655972 101.453 32.390202 101.725 31.8587 c
101.872 31.568501 101.946 31.165701 101.946 30.650499 c
101.946 27.290199 l
101.038 27.290199 l
101.038 30.591801 l
101.038 30.976601 100.989 31.258699 100.89 31.438 c
100.73 31.725 100.429 31.8685 99.987198 31.8685 c
99.620598 31.8685 99.288498 31.742901 98.9907 31.4918 c
h
W
0 0 132 43 rc
96.660301 35.5 m
102.946 35.5 l
102.946 26.290199 l
96.660301 26.290199 l
h
f
Q
q
119.246 30.719 m
119.177 30.5755 119.041 30.4907 118.838 30.4646 c
117.429 30.2885 l
116.935 30.226601 116.536 30.061899 116.232 29.7945 c
115.927 29.5271 115.775 29.150499 115.775 28.6646 c
115.775 28.2211 115.929 27.851 116.237 27.5543 c
116.547 27.260799 116.947 27.1141 117.434 27.1141 c
117.84 27.1141 118.212 27.2005 118.549 27.373301 c
118.886 27.546101 119.144 27.749901 119.324 27.984699 c
119.354 27.775999 119.404 27.614599 119.476 27.5005 c
119.614 27.285299 119.835 27.177601 120.139 27.177601 c
120.263 27.177601 120.362 27.182501 120.434 27.192301 c
120.506 27.202101 120.61 27.226601 120.748 27.265699 c
120.748 27.916201 l
120.692 27.9065 120.64 27.8983 120.591 27.8918 c
120.542 27.8885 120.497 27.8869 120.458 27.8869 c
120.337 27.8869 120.257 27.9146 120.218 27.969999 c
120.182 28.025499 120.164 28.098801 120.164 28.190201 c
120.164 31.208099 l
120.164 31.7038 119.972 32.069 119.589 32.303799 c
119.203 32.53854 118.701 32.65593 118.082 32.65593 c
117.549 32.65593 117.079 32.528759 116.673 32.274399 c
116.271 32.0233 116.061 31.5749 116.045 30.9293 c
116.87 30.9293 l
116.903 31.1999 116.973 31.403799 117.081 31.540701 c
117.274 31.7885 117.601 31.9125 118.063 31.9125 c
118.462 31.9125 118.768 31.844 118.981 31.707001 c
119.197 31.573299 119.305 31.356501 119.305 31.056499 c
119.305 30.9097 119.285 30.797199 119.246 30.719 c
h
116.978 28.0825 m
116.791 28.2293 116.698 28.4298 116.698 28.6842 c
116.698 29.02 116.834 29.264601 117.105 29.4179 c
117.266 29.509199 117.506 29.576 117.827 29.618401 c
118.362 29.686899 l
118.526 29.706499 118.693 29.7391 118.863 29.7847 c
119.033 29.8304 119.172 29.8874 119.28 29.9559 c
119.28 29.2467 l
119.28 28.7054 119.035 28.315701 118.544 28.0777 c
118.252 27.9342 117.951 27.8624 117.641 27.8624 c
117.385 27.8624 117.164 27.935801 116.978 28.0825 c
h
W*
0 0 132 43 rc
114.775 33.65593 m
121.748 33.65593 l
121.748 26.1141 l
114.775 26.1141 l
h
f
Q
q
122.844 32.445702 m
122.566 32.312 122.303 32.0919 122.054 31.785299 c
122.054 32.52882 l
121.215 32.52882 l
121.215 27.290199 l
122.098 27.290199 l
122.098 30.034201 l
122.098 30.3766 122.119 30.639099 122.162 30.821699 c
122.208 31.007601 122.304 31.187 122.452 31.3598 c
122.635 31.575001 122.848 31.7185 123.09 31.790199 c
123.224 31.8326 123.396 31.8538 123.605 31.8538 c
124.018 31.8538 124.302 31.6908 124.459 31.3647 c
124.554 31.169001 124.602 30.9114 124.602 30.5919 c
124.602 27.290199 l
125.5 27.290199 l
125.5 30.6506 l
125.5 31.178801 125.428 31.584801 125.284 31.8685 c
125.022 32.387001 124.518 32.64621 123.772 32.64621 c
123.432 32.64621 123.122 32.579369 122.844 32.445702 c
h
W
0 0 132 43 rc
120.215 33.64621 m
126.5 33.64621 l
126.5 26.290199 l
120.215 26.290199 l
h
f
Q
q
102.645 10.3499 m
98.071999 23.217699 l
95.023102 23.217699 l
90.414703 10.3499 l
93.235802 10.3499 l
94.129501 12.995 l
98.886803 12.995 l
99.719101 10.3499 l
102.645 10.3499 l
h
96.521301 20.2757 m
98.133301 15.2124 l
94.856598 15.2124 l
96.521301 20.2757 l
h
W*
0 0 132 43 rc
89.414703 24.217699 m
103.645 24.217699 l
103.645 9.3499002 l
89.414703 9.3499002 l
h
f
Q
q
74.734398 20.0749 m
75.990196 20.0749 76.971497 19.623899 77.6782 18.7218 c
78.3908 17.8197 78.747101 16.655701 78.747101 15.2298 c
78.747101 13.7516 78.396599 12.5265 77.695702 11.5546 c
76.994797 10.5827 76.016502 10.0967 74.760696 10.0967 c
73.972198 10.0967 73.338501 10.2538 72.859497 10.5681 c
72.573303 10.7543 72.263802 11.0803 71.930901 11.5459 c
71.930901 10.3499 l
69.486504 10.3499 l
69.486504 23.200199 l
71.974701 23.200199 l
71.974701 18.625799 l
72.2901 19.0681 72.637604 19.4056 73.017303 19.638399 c
73.467003 19.929399 74.039398 20.0749 74.734398 20.0749 c
h
74.094902 12.1482 m
74.737396 12.1482 75.236702 12.4072 75.593002 12.9252 c
75.949303 13.4431 76.127502 14.1241 76.127502 14.968 c
76.127502 15.6431 76.039902 16.201799 75.864601 16.6441 c
75.5317 17.4821 74.918404 17.901199 74.024803 17.901199 c
73.119499 17.901199 72.497398 17.4909 72.158699 16.6703 c
71.983398 16.233801 71.895798 15.6692 71.895798 14.9767 c
71.895798 14.1619 72.076897 13.4868 72.439003 12.9514 c
72.801102 12.4159 73.353104 12.1482 74.094902 12.1482 c
h
W*
0 0 132 43 rc
68.486504 24.200199 m
79.747101 24.200199 l
79.747101 9.0966997 l
68.486504 9.0966997 l
h
f
Q
q
61.489201 10.83 m
61.2089 11.1152 61.068699 11.5546 61.068699 12.1482 c
61.068699 18.005899 l
59.737 18.005899 l
59.737 19.778099 l
61.068699 19.778099 l
61.068699 22.431999 l
63.539398 22.431999 l
63.539398 19.778099 l
65.090103 19.778099 l
65.090103 18.005899 l
63.539398 18.005899 l
63.539398 12.9775 l
63.539398 12.5876 63.589001 12.3432 63.688301 12.2442 c
63.787601 12.1511 64.091301 12.1046 64.599503 12.1046 c
64.835999 12.1046 l
64.923599 12.1104 65.008301 12.1162 65.090103 12.122 c
65.090103 10.2626 l
63.907299 10.2189 l
62.727501 10.1782 61.921501 10.3819 61.489201 10.83 c
h
W
0 0 132 43 rc
58.737 23.431999 m
66.090103 23.431999 l
66.090103 9.1781998 l
58.737 9.1781998 l
h
f
Q
q
59.6399 15.0902 m
59.6399 13.6934 59.2369 12.4974 58.430901 11.5022 c
57.624901 10.5128 56.401199 10.0181 54.759899 10.0181 c
53.118698 10.0181 51.895 10.5128 51.089001 11.5022 c
50.283001 12.4974 49.880001 13.6934 49.880001 15.0902 c
49.880001 16.463699 50.283001 17.653799 51.089001 18.6607 c
51.895 19.6675 53.118698 20.1709 54.759899 20.1709 c
56.401199 20.1709 57.624901 19.6675 58.430901 18.6607 c
59.2369 17.653799 59.6399 16.463699 59.6399 15.0902 c
h
54.751202 12.1046 m
55.4813 12.1046 56.042 12.3635 56.4333 12.8815 c
56.824699 13.3995 57.020302 14.1357 57.020302 15.0902 c
57.020302 16.0446 56.824699 16.777901 56.4333 17.2901 c
56.042 17.8081 55.4813 18.066999 54.751202 18.066999 c
54.021099 18.066999 53.4575 17.8081 53.060299 17.2901 c
52.6689 16.777901 52.473301 16.0446 52.473301 15.0902 c
52.473301 14.1357 52.6689 13.3995 53.060299 12.8815 c
53.4575 12.3635 54.021099 12.1046 54.751202 12.1046 c
h
W*
0 0 132 43 rc
48.880001 21.1709 m
60.6399 21.1709 l
60.6399 9.0180998 l
48.880001 9.0180998 l
h
f
Q
q
47.925499 19.315399 m
47.300598 19.833401 46.494499 20.0924 45.507401 20.0924 c
44.718899 20.0924 44.067699 19.900299 43.553699 19.516199 c
43.267502 19.3009 42.963799 18.948799 42.642502 18.4599 c
42.642502 19.8479 l
40.2332 19.8479 l
40.2332 10.3499 l
42.721401 10.3499 l
42.721401 15.5005 l
42.721401 16.088301 42.8032 16.571301 42.966702 16.9496 c
43.282101 17.665501 43.8633 18.023399 44.710201 18.023399 c
45.399399 18.023399 45.8666 17.778999 46.112 17.2901 c
46.2463 17.0224 46.313499 16.6383 46.313499 16.1378 c
46.313499 10.3499 l
48.8717 10.3499 l
48.8717 16.757601 l
48.8717 17.9506 48.556301 18.803301 47.925499 19.315399 c
h
W
0 0 132 43 rc
39.2332 21.0924 m
49.8717 21.0924 l
49.8717 9.3499002 l
39.2332 9.3499002 l
h
f
Q
q
80.526299 8.5079002 m
80.210899 8.5253 l
80.210899 6.5349002 l
80.479599 6.5174999 80.681099 6.5086999 80.815399 6.5086999 c
80.949699 6.5029001 81.127899 6.5 81.3498 6.5 c
82.453697 6.5 83.189697 6.7182002 83.557701 7.1546998 c
83.925598 7.5854001 84.425003 8.7027998 85.055801 10.507 c
88.332497 19.8654 l
85.677902 19.8654 l
83.706596 12.8466 l
81.621399 19.8654 l
78.844101 19.8654 l
82.348602 9.9308004 l
82.372002 9.8610001 82.319397 9.6688995 82.190903 9.3547001 c
82.068298 9.0403996 81.933899 8.8338003 81.787903 8.7348003 c
81.636002 8.6301003 81.449097 8.5632 81.227203 8.5340996 c
81.005203 8.5050001 80.771599 8.4961996 80.526299 8.5079002 c
h
W
0 0 132 43 rc
77.844101 20.8654 m
89.332497 20.8654 l
89.332497 5.5 l
77.844101 5.5 l
h
f
Q
q
109.492 32.347801 m
109.321 32.230499 109.132 32.042999 108.922 31.785299 c
108.922 32.52882 l
108.048 32.52882 l
108.048 27.290199 l
108.932 27.290199 l
108.932 30.068501 l
108.932 30.7435 109.068 31.209801 109.339 31.4674 c
109.614 31.725 109.919 31.8538 110.252 31.8538 c
110.619 31.8538 110.869 31.731501 111.003 31.487 c
111.089 31.3239 111.131 31.064699 111.131 30.7092 c
111.131 27.290199 l
112.029 27.290199 l
112.029 30.3375 l
112.029 30.878799 112.154 31.2652 112.403 31.496799 c
112.655 31.7283 112.954 31.844 113.301 31.844 c
113.553 31.844 113.766 31.778799 113.939 31.648399 c
114.116 31.5179 114.204 31.278299 114.204 30.929399 c
114.204 27.290199 l
115.122 27.290199 l
115.122 30.7777 l
115.122 31.240801 115.053 31.609301 114.916 31.8832 c
114.661 32.391899 114.18 32.64621 113.473 32.64621 c
113.142 32.64621 112.844 32.57774 112.579 32.4408 c
112.314 32.307098 112.083 32.099998 111.887 31.819599 c
111.769 32.047798 111.638 32.220699 111.494 32.3381 c
111.239 32.543499 110.902 32.64621 110.483 32.64621 c
110.113 32.64621 109.783 32.546761 109.492 32.347801 c
h
W
0 0 132 43 rc
107.048 33.64621 m
116.122 33.64621 l
116.122 26.290199 l
107.048 26.290199 l
h
f
Q
q
103.866 28.3957 m
103.78 28.5653 103.738 28.783701 103.738 29.0511 c
103.738 32.528858 l
102.835 32.528858 l
102.835 28.968 l
102.835 28.5212 102.908 28.1642 103.056 27.896799 c
103.327 27.3979 103.838 27.148399 104.587 27.148399 c
105.068 27.148399 105.477 27.2854 105.814 27.559299 c
105.985 27.696199 106.127 27.864201 106.241 28.063101 c
106.232 27.2903 l
107.066 27.2903 l
107.066 32.528858 l
106.183 32.528858 l
106.183 29.955999 l
106.183 29.444099 106.122 29.0413 106.001 28.7479 c
105.778 28.200001 105.36 27.9261 104.744 27.9261 c
104.316 27.9261 104.023 28.0826 103.866 28.3957 c
h
W
0 0 132 43 rc
101.835 33.528858 m
108.066 33.528858 l
108.066 26.148399 l
101.835 26.148399 l
h
f
Q
q
92.505203 28.263599 m
93.923897 32.528858 l
94.900803 32.528858 l
94.776398 32.193001 94.499901 31.426701 94.071198 30.2299 c
93.750397 29.329901 93.482101 28.596201 93.266098 28.028799 c
92.7556 26.6919 92.395599 25.876699 92.186096 25.5832 c
91.9767 25.2897 91.616699 25.143 91.106201 25.143 c
90.981796 25.143 90.8853 25.1479 90.816597 25.1576 c
90.751099 25.1674 90.669296 25.1854 90.571098 25.211399 c
90.571098 26.013599 l
90.724899 25.971201 90.836197 25.945101 90.9049 25.9354 c
90.973602 25.9256 91.034203 25.9207 91.086601 25.9207 c
91.250198 25.9207 91.369598 25.9484 91.444901 26.003799 c
91.523399 26.056 91.588898 26.121201 91.641296 26.199499 c
91.6576 26.225599 91.716499 26.359301 91.818001 26.600599 c
91.919403 26.8419 91.993103 27.0212 92.038902 27.138599 c
90.095001 32.528858 l
91.096397 32.528858 l
92.505203 28.263599 l
h
W
0 0 132 43 rc
89.095001 33.528858 m
95.900803 33.528858 l
95.900803 24.143 l
89.095001 24.143 l
h
f
Q
q
86.717201 27.4125 m
86.553497 27.5266 86.378502 27.7092 86.191902 27.9603 c
86.191902 27.290199 l
85.376999 27.290199 l
85.376999 34.5 l
86.236099 34.5 l
86.236099 31.8929 l
86.429199 32.144001 86.659897 32.334801 86.928299 32.465199 c
87.196602 32.5989 87.4879 32.665749 87.802002 32.665749 c
88.456596 32.665749 88.986702 32.4408 89.392502 31.9907 c
89.801598 31.544001 90.006104 30.883699 90.006104 30.0098 c
90.006104 29.181499 89.804901 28.4935 89.402298 27.945601 c
88.999802 27.3978 88.441803 27.123899 87.728401 27.123899 c
87.329102 27.123899 86.992104 27.2201 86.717201 27.4125 c
h
87.6744 27.9016 m
88.152199 27.9016 88.508904 28.0907 88.744499 28.469 c
88.983398 28.8473 89.102898 29.346201 89.102898 29.9657 c
89.102898 30.5168 88.983398 30.9734 88.744499 31.3353 c
88.508904 31.6973 88.1604 31.878201 87.698997 31.878201 c
87.296402 31.878201 86.943001 31.7299 86.638603 31.4331 c
86.337601 31.1364 86.186996 30.647301 86.186996 29.9657 c
86.186996 29.473301 86.249199 29.0739 86.373596 28.767401 c
86.605904 28.190201 87.039497 27.9016 87.6744 27.9016 c
h
W*
0 0 132 43 rc
84.376999 35.5 m
91.006104 35.5 l
91.006104 26.123899 l
84.376999 26.123899 l
h
f
Q
q
79.745697 32.621731 m
80.1483 32.621731 80.485298 32.536949 80.757004 32.367401 c
80.914001 32.2696 81.0924 32.0984 81.292 31.8538 c
81.292 34.5 l
82.141296 34.5 l
82.141296 27.290199 l
81.346001 27.290199 l
81.346001 28.018999 l
81.1399 27.696199 80.896004 27.462999 80.614601 27.3195 c
80.333199 27.1761 80.010803 27.1043 79.647499 27.1043 c
79.061798 27.1043 78.554497 27.3489 78.125801 27.837999 c
77.697098 28.3304 77.482697 28.9842 77.482697 29.7994 c
77.482697 30.5625 77.677498 31.222799 78.066902 31.780399 c
78.459602 32.341301 79.019203 32.621731 79.745697 32.621731 c
h
78.415398 29.848301 m
78.415398 29.2875 78.534897 28.8179 78.773804 28.4396 c
79.012703 28.061399 79.395599 27.872299 79.922401 27.872299 c
80.331497 27.872299 80.667 28.0467 80.928802 28.395599 c
81.193802 28.747801 81.326401 29.2516 81.326401 29.907 c
81.326401 30.569 81.190598 31.0581 80.9189 31.374399 c
80.647301 31.694 80.311897 31.8538 79.912598 31.8538 c
79.467598 31.8538 79.105904 31.6842 78.827797 31.3451 c
78.552902 31.006001 78.415398 30.507 78.415398 29.848301 c
h
W*
0 0 132 43 rc
76.482697 35.5 m
83.141296 35.5 l
83.141296 26.1043 l
76.482697 26.1043 l
h
f
Q
q
74.851303 32.64621 m
75.224297 32.64621 75.585999 32.55817 75.936096 32.382099 c
76.286301 32.209301 76.553001 31.984301 76.736298 31.7071 c
76.913002 31.4429 77.0308 31.1348 77.089699 30.7826 c
77.142097 30.5413 77.168297 30.1565 77.168297 29.6283 c
73.314796 29.6283 l
73.3312 29.096701 73.4571 28.6696 73.692802 28.346701 c
73.928398 28.027201 74.293297 27.867399 74.787498 27.867399 c
75.248901 27.867399 75.617104 28.018999 75.891998 28.3223 c
76.049004 28.4984 76.160301 28.7022 76.2258 28.933701 c
77.094597 28.933701 l
77.071701 28.741301 76.994797 28.5261 76.863899 28.288 c
76.736298 28.053301 76.5923 27.860901 76.4319 27.710899 c
76.163597 27.450001 75.831398 27.273899 75.435402 27.1826 c
75.222702 27.1304 74.982201 27.1043 74.713799 27.1043 c
74.059303 27.1043 73.504601 27.340799 73.049698 27.813601 c
72.594803 28.2897 72.367401 28.954901 72.367401 29.8092 c
72.367401 30.6506 72.596497 31.3337 73.054604 31.8587 c
73.512802 32.383701 74.111702 32.64621 74.851303 32.64621 c
h
76.260101 30.3277 m
76.224098 30.7092 76.140701 31.014099 76.009804 31.242399 c
75.767601 31.6663 75.363403 31.8783 74.797302 31.8783 c
74.391502 31.8783 74.051102 31.731501 73.776199 31.438101 c
73.501297 31.1478 73.355698 30.7777 73.339302 30.3277 c
76.260101 30.3277 l
h
W*
0 0 132 43 rc
71.367401 33.64621 m
78.168297 33.64621 l
78.168297 26.1043 l
71.367401 26.1043 l
h
f
Q
q
68.562599 28.933599 m
68.588799 28.6401 68.662399 28.4151 68.783501 28.2586 c
69.005997 27.974899 69.392197 27.833 69.942001 27.833 c
70.269203 27.833 70.557198 27.903099 70.805901 28.043301 c
71.054703 28.1868 71.179001 28.4069 71.179001 28.703699 c
71.179001 28.928699 71.079201 29.099899 70.879601 29.2173 c
70.7519 29.289 70.5 29.3722 70.123596 29.4667 c
69.4216 29.642799 l
68.973297 29.7537 68.642799 29.8776 68.43 30.014601 c
68.0504 30.2526 67.860603 30.5819 67.860603 31.0026 c
67.860603 31.498301 68.039001 31.8993 68.395699 32.205898 c
68.755699 32.51239 69.238403 32.665649 69.843803 32.665649 c
70.635803 32.665649 71.206802 32.434101 71.556999 31.9711 c
71.776299 31.677601 71.882599 31.3613 71.876099 31.0222 c
71.041603 31.0222 l
71.0252 31.2211 70.954803 31.4021 70.830498 31.5651 c
70.627602 31.7966 70.275803 31.912399 69.775101 31.912399 c
69.441299 31.912399 69.187599 31.848801 69.014198 31.7216 c
68.844002 31.5944 68.758904 31.4265 68.758904 31.2178 c
68.758904 30.989599 68.871803 30.8069 69.097702 30.67 c
69.2286 30.588499 69.4216 30.516701 69.676903 30.4548 c
70.261101 30.312901 l
70.895897 30.1597 71.321404 30.011299 71.537399 29.8678 c
71.880997 29.642799 72.052803 29.289 72.052803 28.8064 c
72.052803 28.340099 71.874397 27.937401 71.5177 27.5982 c
71.164299 27.2591 70.624298 27.0895 69.897797 27.0895 c
69.1157 27.0895 68.560898 27.2656 68.233704 27.6178 c
67.909698 27.9732 67.736298 28.4118 67.713303 28.933599 c
68.562599 28.933599 l
h
W
0 0 132 43 rc
66.713303 33.665649 m
73.052803 33.665649 l
73.052803 26.0895 l
66.713303 26.0895 l
h
f
Q
q
64.963799 32.68047 m
65.641296 32.68047 66.213997 32.455502 66.6819 32.005501 c
67.149902 31.5555 67.383904 30.893499 67.383904 30.0196 c
67.383904 29.174999 67.177696 28.4772 66.765404 27.9261 c
66.353104 27.375 65.713303 27.099501 64.846001 27.099501 c
64.122803 27.099501 63.548401 27.3424 63.123001 27.8283 c
62.697601 28.3174 62.484901 28.972799 62.484901 29.7946 c
62.484901 30.674999 62.709 31.376101 63.157398 31.8979 c
63.605701 32.419601 64.207901 32.68047 64.963799 32.68047 c
h
64.929497 27.857599 m
65.515297 27.857599 65.916199 28.0777 66.132202 28.518 c
66.351402 28.961399 66.460999 29.4538 66.460999 29.9951 c
66.460999 30.484301 66.3825 30.882099 66.225403 31.188601 c
65.9767 31.6712 65.547997 31.9125 64.939301 31.9125 c
64.3993 31.9125 64.006599 31.7071 63.7612 31.2962 c
63.515701 30.885401 63.393002 30.3897 63.393002 29.809299 c
63.393002 29.251699 63.515701 28.787001 63.7612 28.415199 c
64.006599 28.043501 64.396004 27.857599 64.929497 27.857599 c
h
W*
0 0 132 43 rc
61.484901 33.68047 m
68.383904 33.68047 l
68.383904 26.099501 l
61.484901 26.099501 l
h
f
Q
q
58.989498 27.373301 m
58.832401 27.4711 58.657299 27.639099 58.464298 27.8771 c
58.464298 25.201599 l
57.5807 25.201599 l
57.5807 32.504299 l
58.439701 32.504299 l
58.439701 31.8097 l
58.616402 32.047798 58.809502 32.231998 59.019001 32.362499 c
59.316799 32.558109 59.666901 32.65593 60.0695 32.65593 c
60.6651 32.65593 61.1707 32.4277 61.5863 31.9711 c
62.0019 31.5179 62.209702 30.868999 62.209702 30.024401 c
62.209702 28.883101 61.910301 28.0679 61.311401 27.578699 c
60.931801 27.268999 60.490002 27.1141 59.986 27.1141 c
59.59 27.1141 59.2579 27.2005 58.989498 27.373301 c
h
59.868198 27.882 m
60.280499 27.882 60.622501 28.0532 60.8941 28.395599 c
61.168999 28.741199 61.306499 29.2565 61.306499 29.9412 c
61.306499 30.358601 61.245998 30.7173 61.124901 31.0173 c
60.895802 31.5945 60.476898 31.883101 59.868198 31.883101 c
59.256199 31.883101 58.837299 31.578199 58.6115 30.968399 c
58.490398 30.6423 58.429901 30.228201 58.429901 29.726 c
58.429901 29.321699 58.490398 28.977699 58.6115 28.694 c
58.840599 28.1527 59.259499 27.882 59.868198 27.882 c
h
W*
0 0 132 43 rc
56.5807 33.65593 m
63.209702 33.65593 l
63.209702 24.201599 l
56.5807 24.201599 l
h
f
Q
q
50.967899 31.4674 m
50.696201 31.209801 50.560398 30.7435 50.560398 30.068501 c
50.560398 27.290199 l
49.6768 27.290199 l
49.6768 32.52882 l
50.550598 32.52882 l
50.550598 31.785299 l
50.760101 32.042999 50.949902 32.230499 51.119999 32.347801 c
51.411301 32.546761 51.741798 32.64621 52.111599 32.64621 c
52.530499 32.64621 52.867599 32.543499 53.122898 32.3381 c
53.266899 32.220699 53.3978 32.047798 53.515598 31.819599 c
53.711899 32.099998 53.9426 32.307098 54.207699 32.4408 c
54.472801 32.57774 54.770599 32.64621 55.101101 32.64621 c
55.807999 32.64621 56.289101 32.391899 56.544399 31.8832 c
56.681801 31.609301 56.7505 31.240801 56.7505 30.7777 c
56.7505 27.290199 l
55.8326 27.290199 l
55.8326 30.929399 l
55.8326 31.278299 55.744202 31.5179 55.567501 31.648399 c
55.394001 31.778799 55.181301 31.844 54.929298 31.844 c
54.582401 31.844 54.283001 31.7283 54.030998 31.496799 c
53.782299 31.2652 53.657902 30.878799 53.657902 30.3375 c
53.657902 27.290199 l
52.759602 27.290199 l
52.759602 30.7092 l
52.759602 31.064699 52.717098 31.3239 52.632 31.487 c
52.497799 31.731501 52.247398 31.8538 51.880901 31.8538 c
51.5471 31.8538 51.242802 31.725 50.967899 31.4674 c
h
W
0 0 132 43 rc
48.6768 33.64621 m
57.7505 33.64621 l
57.7505 26.290199 l
48.6768 26.290199 l
h
f
Q
q
46.6035 32.68047 m
47.280899 32.68047 47.8536 32.455502 48.321602 32.005501 c
48.7896 31.5555 49.023602 30.893499 49.023602 30.0196 c
49.023602 29.174999 48.817402 28.4772 48.405102 27.9261 c
47.992699 27.375 47.352901 27.099501 46.485699 27.099501 c
45.762501 27.099501 45.188099 27.3424 44.762699 27.8283 c
44.3372 28.3174 44.1245 28.972799 44.1245 29.7946 c
44.1245 30.674999 44.348701 31.376101 44.797001 31.8979 c
45.245399 32.419601 45.8475 32.68047 46.6035 32.68047 c
h
46.569099 27.857599 m
47.1549 27.857599 47.555801 28.0777 47.771801 28.518 c
47.9911 28.961399 48.1007 29.4538 48.1007 29.9951 c
48.1007 30.484301 48.022202 30.882099 47.865101 31.188601 c
47.616402 31.6712 47.187698 31.9125 46.578999 31.9125 c
46.039001 31.9125 45.646301 31.7071 45.400799 31.2962 c
45.155399 30.885401 45.0327 30.3897 45.0327 29.809299 c
45.0327 29.251699 45.155399 28.787001 45.400799 28.415199 c
45.646301 28.043501 46.035702 27.857599 46.569099 27.857599 c
h
W*
0 0 132 43 rc
43.1245 33.68047 m
50.023602 33.68047 l
50.023602 26.099501 l
43.1245 26.099501 l
h
f
Q
q
41.8857 32.68047 m
42.4781 32.68047 42.959099 32.536991 43.328899 32.25 c
43.702 31.9631 43.926201 31.469101 44.0014 30.768 c
43.142399 30.768 l
43.09 31.090799 42.9706 31.3582 42.784 31.570101 c
42.5975 31.7854 42.2981 31.893 41.8857 31.893 c
41.3228 31.893 40.9203 31.619101 40.678101 31.071199 c
40.521 30.715799 40.442501 30.277201 40.442501 29.755501 c
40.442501 29.230499 40.553799 28.788601 40.776299 28.429899 c
40.998798 28.071199 41.348999 27.891899 41.826801 27.891899 c
42.193298 27.891899 42.483002 28.002701 42.695702 28.224501 c
42.911701 28.449499 43.0606 28.756001 43.142399 29.143999 c
44.0014 29.143999 l
43.903301 28.449499 43.657799 27.9408 43.265099 27.617901 c
42.872398 27.298401 42.370098 27.138599 41.758099 27.138599 c
41.070801 27.138599 40.522701 27.3881 40.113602 27.886999 c
39.704498 28.389099 39.5 29.0152 39.5 29.7652 c
39.5 30.684799 39.724201 31.4006 40.172501 31.9125 c
40.620899 32.4245 41.191898 32.68047 41.8857 32.68047 c
h
W
0 0 132 43 rc
38.5 33.68047 m
45.0014 33.68047 l
45.0014 26.138599 l
38.5 26.138599 l
h
f
Q
q
104.946 21.0289 m
104.946 12.5357 l
103.355 12.5357 l
103.355 10.3469 l
109.032 10.3469 l
109.032 12.5357 l
107.627 12.5357 l
107.627 21.0289 l
109.032 21.0289 l
109.032 23.217699 l
103.355 23.217699 l
103.355 21.0289 l
104.946 21.0289 l
h
W
0 0 132 43 rc
102.355 24.217699 m
110.032 24.217699 l
110.032 9.3469 l
102.355 9.3469 l
h
f
ep
end
%%Trailer
%%EOF

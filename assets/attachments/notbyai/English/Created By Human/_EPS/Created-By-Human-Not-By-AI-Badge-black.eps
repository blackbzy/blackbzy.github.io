%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.6.1 (Build 23G93) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
1 1 1 sc
q
29.349701 18.342501 m
25.8836 15.5357 20.9266 15.5357 17.460501 18.342501 c
18.800699 19.9974 l
21.485399 17.8234 25.3248 17.8234 28.009501 19.9974 c
29.349701 18.342501 l
h
W
0 0 132 43 rc
16.460501 20.9974 m
30.349701 20.9974 l
30.349701 14.5357 l
16.460501 14.5357 l
h
f
Q
q
18.903999 21.986601 2.1296 2.8769 rc
17.903999 25.863501 m
22.0336 25.863501 l
22.0336 20.986601 l
17.903999 20.986601 l
h
f
Q
q
25.511999 21.986601 2.1294999 2.8769 rc
24.511999 25.863501 m
28.6415 25.863501 l
28.6415 20.986601 l
24.511999 20.986601 l
h
f
Q
q
23 9.5 m
29.351299 9.5 34.5 14.6487 34.5 21 c
34.5 27.351299 29.351299 32.5 23 32.5 c
16.648701 32.5 11.5 27.351299 11.5 21 c
11.5 14.6487 16.648701 9.5 23 9.5 c
h
23 11.6295 m
28.1752 11.6295 32.370499 15.8248 32.370499 21 c
32.370499 26.1752 28.1752 30.370501 23 30.370501 c
17.8248 30.370501 13.6295 26.1752 13.6295 21 c
13.6295 15.8248 17.8248 11.6295 23 11.6295 c
h
W*
0 0 132 43 rc
10.5 33.5 m
35.5 33.5 l
35.5 8.5 l
10.5 8.5 l
h
f
Q
q
92.810699 31.4918 m
92.513199 31.2407 92.364403 30.7663 92.364403 30.068501 c
92.364403 27.290199 l
91.481697 27.290199 l
91.481697 34.5 l
92.364403 34.5 l
92.364403 31.819599 l
92.5737 32.083698 92.761703 32.2696 92.928398 32.377201 c
93.212799 32.563042 93.567596 32.655972 93.992599 32.655972 c
94.754402 32.655972 95.271004 32.390202 95.542297 31.8587 c
95.6894 31.568501 95.763 31.165701 95.763 30.650499 c
95.763 27.290199 l
94.855698 27.290199 l
94.855698 30.591801 l
94.855698 30.976601 94.806702 31.258699 94.708603 31.438 c
94.548401 31.725 94.247597 31.8685 93.806198 31.8685 c
93.440102 31.8685 93.1082 31.742901 92.810699 31.4918 c
h
W
0 0 132 43 rc
90.481697 35.5 m
96.763 35.5 l
96.763 26.290199 l
90.481697 26.290199 l
h
f
Q
q
113.95 30.719 m
113.882 30.5755 113.746 30.4907 113.543 30.4646 c
112.136 30.2885 l
111.642 30.226601 111.243 30.061899 110.939 29.7945 c
110.635 29.5271 110.483 29.150499 110.483 28.6646 c
110.483 28.2211 110.637 27.851 110.944 27.5543 c
111.255 27.260799 111.654 27.1141 112.141 27.1141 c
112.546 27.1141 112.917 27.2005 113.254 27.373301 c
113.591 27.546101 113.849 27.749901 114.029 27.984699 c
114.058 27.775999 114.109 27.614599 114.181 27.5005 c
114.318 27.285299 114.539 27.177601 114.843 27.177601 c
114.967 27.177601 115.065 27.182501 115.137 27.192301 c
115.209 27.202101 115.314 27.226601 115.451 27.265699 c
115.451 27.916201 l
115.395 27.9065 115.343 27.8983 115.294 27.8918 c
115.245 27.8885 115.201 27.8869 115.162 27.8869 c
115.041 27.8869 114.961 27.9146 114.921 27.969999 c
114.885 28.025499 114.867 28.098801 114.867 28.190201 c
114.867 31.208099 l
114.867 31.7038 114.676 32.069 114.294 32.303799 c
113.908 32.53854 113.406 32.65593 112.788 32.65593 c
112.255 32.65593 111.786 32.528759 111.381 32.274399 c
110.978 32.0233 110.769 31.5749 110.753 30.9293 c
111.577 30.9293 l
111.609 31.1999 111.68 31.403799 111.788 31.540701 c
111.981 31.7885 112.307 31.9125 112.768 31.9125 c
113.167 31.9125 113.473 31.844 113.686 31.707001 c
113.901 31.573299 114.009 31.356501 114.009 31.056499 c
114.009 30.9097 113.99 30.797199 113.95 30.719 c
h
111.685 28.0825 m
111.498 28.2293 111.405 28.4298 111.405 28.6842 c
111.405 29.02 111.541 29.264601 111.812 29.4179 c
111.972 29.509199 112.213 29.576 112.533 29.618401 c
113.068 29.686899 l
113.231 29.706499 113.398 29.7391 113.568 29.7847 c
113.738 29.8304 113.877 29.8874 113.985 29.9559 c
113.985 29.2467 l
113.985 28.7054 113.739 28.315701 113.249 28.0777 c
112.958 27.9342 112.657 27.8624 112.347 27.8624 c
112.092 27.8624 111.871 27.935801 111.685 28.0825 c
h
W*
0 0 132 43 rc
109.483 33.65593 m
116.451 33.65593 l
116.451 26.1141 l
109.483 26.1141 l
h
f
Q
q
117.057 31.785299 m
117.306 32.0919 117.569 32.312 117.847 32.445702 c
118.125 32.579369 118.434 32.64621 118.774 32.64621 c
119.519 32.64621 120.023 32.387001 120.284 31.8685 c
120.428 31.584801 120.5 31.178801 120.5 30.6506 c
120.5 27.290199 l
119.603 27.290199 l
119.603 30.5919 l
119.603 30.9114 119.555 31.169001 119.46 31.3647 c
119.303 31.6908 119.019 31.8538 118.607 31.8538 c
118.398 31.8538 118.226 31.8326 118.092 31.790199 c
117.85 31.7185 117.638 31.575001 117.455 31.3598 c
117.307 31.187 117.211 31.007601 117.165 30.821699 c
117.123 30.639099 117.101 30.3766 117.101 30.034201 c
117.101 27.290199 l
116.219 27.290199 l
116.219 32.52882 l
117.057 32.52882 l
117.057 31.785299 l
h
W
0 0 132 43 rc
115.219 33.64621 m
121.5 33.64621 l
121.5 26.290199 l
115.219 26.290199 l
h
f
Q
q
105.334 10.3499 m
100.765 23.217699 l
97.718597 23.217699 l
93.114601 10.3499 l
95.932999 10.3499 l
96.825798 12.995 l
101.579 12.995 l
102.41 10.3499 l
105.334 10.3499 l
h
99.215302 20.2757 m
100.826 15.2124 l
97.552299 15.2124 l
99.215302 20.2757 l
h
W*
0 0 132 43 rc
92.114601 24.217699 m
106.334 24.217699 l
106.334 9.3499002 l
92.114601 9.3499002 l
h
f
Q
q
80.390297 18.7218 m
79.684196 19.623899 78.703903 20.0749 77.449303 20.0749 c
76.754898 20.0749 76.183098 19.929399 75.733803 19.638399 c
75.3545 19.4056 75.007301 19.0681 74.6922 18.625799 c
74.6922 23.200199 l
72.206398 23.200199 l
72.206398 10.3499 l
74.648399 10.3499 l
74.648399 11.5459 l
74.981003 11.0803 75.290298 10.7543 75.576202 10.5681 c
76.054703 10.2538 76.687798 10.0967 77.475601 10.0967 c
78.730202 10.0967 79.707497 10.5827 80.407799 11.5546 c
81.108002 12.5265 81.458099 13.7516 81.458099 15.2298 c
81.458099 16.655701 81.102203 17.8197 80.390297 18.7218 c
h
78.307098 12.9252 m
77.951202 12.4072 77.452202 12.1482 76.810402 12.1482 c
76.069298 12.1482 75.517899 12.4159 75.156097 12.9514 c
74.794296 13.4868 74.613403 14.1619 74.613403 14.9767 c
74.613403 15.6692 74.700897 16.233801 74.875999 16.6703 c
75.214401 17.4909 75.835899 17.901199 76.740303 17.901199 c
77.633102 17.901199 78.245796 17.4821 78.5784 16.6441 c
78.753502 16.201799 78.841003 15.6431 78.841003 14.968 c
78.841003 14.1241 78.663002 13.4431 78.307098 12.9252 c
h
W*
0 0 132 43 rc
71.206398 24.200199 m
82.458099 24.200199 l
82.458099 9.0966997 l
71.206398 9.0966997 l
h
f
Q
q
64.216797 10.83 m
63.936699 11.1152 63.7967 11.5546 63.7967 12.1482 c
63.7967 18.005899 l
62.466202 18.005899 l
62.466202 19.778099 l
63.7967 19.778099 l
63.7967 22.431999 l
66.264999 22.431999 l
66.264999 19.778099 l
67.814201 19.778099 l
67.814201 18.005899 l
66.264999 18.005899 l
66.264999 12.9775 l
66.264999 12.5876 66.314598 12.3432 66.413803 12.2442 c
66.513 12.1511 66.816399 12.1046 67.323997 12.1046 c
67.560402 12.1046 l
67.647903 12.1104 67.732498 12.1162 67.814201 12.122 c
67.814201 10.2626 l
66.632599 10.2189 l
65.453903 10.1782 64.648598 10.3819 64.216797 10.83 c
h
W
0 0 132 43 rc
61.466202 23.431999 m
68.814201 23.431999 l
68.814201 9.1781998 l
61.466202 9.1781998 l
h
f
Q
q
61.1614 11.5022 m
61.966599 12.4974 62.369301 13.6934 62.369301 15.0902 c
62.369301 16.463699 61.966599 17.653799 61.1614 18.6607 c
60.356098 19.6675 59.133598 20.1709 57.4939 20.1709 c
55.854301 20.1709 54.631802 19.6675 53.8265 18.6607 c
53.021301 17.653799 52.618599 16.463699 52.618599 15.0902 c
52.618599 13.6934 53.021301 12.4974 53.8265 11.5022 c
54.631802 10.5128 55.854301 10.0181 57.4939 10.0181 c
59.133598 10.0181 60.356098 10.5128 61.1614 11.5022 c
h
59.165699 12.8815 m
58.774799 12.3635 58.2146 12.1046 57.485199 12.1046 c
56.755798 12.1046 56.192699 12.3635 55.795898 12.8815 c
55.404999 13.3995 55.209499 14.1357 55.209499 15.0902 c
55.209499 16.0446 55.404999 16.777901 55.795898 17.2901 c
56.192699 17.8081 56.755798 18.066999 57.485199 18.066999 c
58.2146 18.066999 58.774799 17.8081 59.165699 17.2901 c
59.556702 16.777901 59.752201 16.0446 59.752201 15.0902 c
59.752201 14.1357 59.556702 13.3995 59.165699 12.8815 c
h
W*
0 0 132 43 rc
51.618599 21.1709 m
63.369301 21.1709 l
63.369301 9.0180998 l
51.618599 9.0180998 l
h
f
Q
q
50.6661 19.315399 m
50.041698 19.833401 49.236401 20.0924 48.250301 20.0924 c
47.462502 20.0924 46.811901 19.900299 46.298401 19.516199 c
46.012501 19.3009 45.709099 18.948799 45.3881 18.4599 c
45.3881 19.8479 l
42.981098 19.8479 l
42.981098 10.3499 l
45.4669 10.3499 l
45.4669 15.5005 l
45.4669 16.088301 45.548599 16.571301 45.712002 16.9496 c
46.0271 17.665501 46.6077 18.023399 47.4538 18.023399 c
48.1423 18.023399 48.6092 17.778999 48.854198 17.2901 c
48.9884 17.0224 49.055599 16.6383 49.055599 16.1378 c
49.055599 10.3499 l
51.611401 10.3499 l
51.611401 16.757601 l
51.611401 17.9506 51.296299 18.803301 50.6661 19.315399 c
h
W
0 0 132 43 rc
41.981098 21.0924 m
52.611401 21.0924 l
52.611401 9.3499002 l
41.981098 9.3499002 l
h
f
Q
q
82.920502 8.5253 m
83.235603 8.5079002 l
83.480698 8.4961996 83.714104 8.5050001 83.935898 8.5340996 c
84.1576 8.5632 84.344299 8.6301003 84.496002 8.7348003 c
84.641899 8.8338003 84.7761 9.0403996 84.898697 9.3547001 c
85.027 9.6688995 85.079498 9.8610001 85.056198 9.9308004 c
81.555099 19.8654 l
84.329697 19.8654 l
86.412903 12.8466 l
88.382301 19.8654 l
91.034401 19.8654 l
87.760803 10.507 l
87.1306 8.7027998 86.631699 7.5854001 86.264099 7.1546998 c
85.8965 6.7182002 85.161201 6.5 84.058403 6.5 c
83.8367 6.5 83.658699 6.5029001 83.524498 6.5086999 c
83.390297 6.5086999 83.188904 6.5174999 82.920502 6.5349002 c
82.920502 8.5253 l
h
W
0 0 132 43 rc
80.555099 20.8654 m
92.034401 20.8654 l
92.034401 5.5 l
80.555099 5.5 l
h
f
Q
q
103.904 32.347801 m
103.734 32.230499 103.545 32.042999 103.335 31.785299 c
103.335 32.52882 l
102.462 32.52882 l
102.462 27.290199 l
103.345 27.290199 l
103.345 30.068501 l
103.345 30.7435 103.481 31.209801 103.752 31.4674 c
104.027 31.725 104.331 31.8538 104.664 31.8538 c
105.031 31.8538 105.281 31.731501 105.415 31.487 c
105.5 31.3239 105.542 31.064699 105.542 30.7092 c
105.542 27.290199 l
106.44 27.290199 l
106.44 30.3375 l
106.44 30.878799 106.564 31.2652 106.812 31.496799 c
107.064 31.7283 107.363 31.844 107.71 31.844 c
107.962 31.844 108.174 31.778799 108.347 31.648399 c
108.524 31.5179 108.612 31.278299 108.612 30.929399 c
108.612 27.290199 l
109.529 27.290199 l
109.529 30.7777 l
109.529 31.240801 109.461 31.609301 109.323 31.8832 c
109.068 32.391899 108.588 32.64621 107.881 32.64621 c
107.551 32.64621 107.254 32.57774 106.989 32.4408 c
106.724 32.307098 106.494 32.099998 106.297 31.819599 c
106.18 32.047798 106.049 32.220699 105.905 32.3381 c
105.65 32.543499 105.313 32.64621 104.895 32.64621 c
104.525 32.64621 104.195 32.546761 103.904 32.347801 c
h
W
0 0 132 43 rc
101.462 33.64621 m
110.529 33.64621 l
110.529 26.290199 l
101.462 26.290199 l
h
f
Q
q
97.854797 29.0511 m
97.854797 28.783701 97.897301 28.5653 97.9823 28.3957 c
98.139198 28.0826 98.431801 27.9261 98.8601 27.9261 c
99.4748 27.9261 99.893303 28.200001 100.1156 28.7479 c
100.2366 29.0413 100.2971 29.444099 100.2971 29.955999 c
100.2971 32.528858 l
101.18 32.528858 l
101.18 27.2903 l
100.3461 27.2903 l
100.3559 28.063101 l
100.2415 27.864201 100.0993 27.696199 99.929199 27.559299 c
99.592499 27.2854 99.1838 27.148399 98.703201 27.148399 c
97.954498 27.148399 97.444504 27.3979 97.173103 27.896799 c
97.026001 28.1642 96.9524 28.5212 96.9524 28.968 c
96.9524 32.528858 l
97.854797 32.528858 l
97.854797 29.0511 l
h
W
0 0 132 43 rc
95.9524 33.528858 m
102.18 33.528858 l
102.18 26.148399 l
95.9524 26.148399 l
h
f
Q
q
85.728798 28.263599 m
87.146103 32.528858 l
88.122002 32.528858 l
87.997803 32.193001 87.721497 31.426701 87.293198 30.2299 c
86.972801 29.329901 86.704697 28.596201 86.488998 28.028799 c
85.978897 26.6919 85.619301 25.876699 85.410004 25.5832 c
85.200798 25.2897 84.841103 25.143 84.3311 25.143 c
84.206902 25.143 84.110397 25.1479 84.041801 25.1576 c
83.976402 25.1674 83.8946 25.1854 83.7966 25.211399 c
83.7966 26.013599 l
83.950203 25.971201 84.061401 25.945101 84.129997 25.9354 c
84.1987 25.9256 84.259201 25.9207 84.311501 25.9207 c
84.474998 25.9207 84.594299 25.9484 84.669502 26.003799 c
84.748001 26.056 84.8134 26.121201 84.8657 26.199499 c
84.882004 26.225599 84.940903 26.359301 85.042198 26.600599 c
85.1436 26.8419 85.217102 27.0212 85.262901 27.138599 c
83.3209 32.528858 l
84.321297 32.528858 l
85.728798 28.263599 l
h
W
0 0 132 43 rc
82.3209 33.528858 m
89.122002 33.528858 l
89.122002 24.143 l
82.3209 24.143 l
h
f
Q
q
79.120201 27.9603 m
79.306602 27.7092 79.481499 27.5266 79.644997 27.4125 c
79.919601 27.2201 80.256401 27.123899 80.655197 27.123899 c
81.367996 27.123899 81.9254 27.3978 82.327599 27.945601 c
82.729698 28.4935 82.930801 29.181499 82.930801 30.0098 c
82.930801 30.883699 82.726402 31.544001 82.317703 31.9907 c
81.9123 32.4408 81.382698 32.665749 80.728798 32.665749 c
80.414902 32.665749 80.123901 32.5989 79.855797 32.465199 c
79.5877 32.334801 79.3573 32.144001 79.164398 31.8929 c
79.164398 34.5 l
78.306099 34.5 l
78.306099 27.290199 l
79.120201 27.290199 l
79.120201 27.9603 l
h
81.670403 28.469 m
81.434998 28.0907 81.078598 27.9016 80.601303 27.9016 c
79.967003 27.9016 79.533798 28.190201 79.301697 28.767401 c
79.177399 29.0739 79.115303 29.473301 79.115303 29.9657 c
79.115303 30.647301 79.265701 31.1364 79.566498 31.4331 c
79.870598 31.7299 80.223701 31.878201 80.625801 31.878201 c
81.0868 31.878201 81.434998 31.6973 81.670403 31.3353 c
81.909103 30.9734 82.028397 30.5168 82.028397 29.9657 c
82.028397 29.346201 81.909103 28.8473 81.670403 28.469 c
h
W*
0 0 132 43 rc
77.306099 35.5 m
83.930801 35.5 l
83.930801 26.123899 l
77.306099 26.123899 l
h
f
Q
q
72.077797 32.621731 m
72.479897 32.621731 72.816704 32.536949 73.087997 32.367401 c
73.245003 32.2696 73.423203 32.0984 73.622597 31.8538 c
73.622597 34.5 l
74.471001 34.5 l
74.471001 27.290199 l
73.676498 27.290199 l
73.676498 28.018999 l
73.470596 27.696199 73.226997 27.462999 72.945801 27.3195 c
72.664597 27.1761 72.342598 27.1043 71.979698 27.1043 c
71.394501 27.1043 70.887703 27.3489 70.459396 27.837999 c
70.031097 28.3304 69.816902 28.9842 69.816902 29.7994 c
69.816902 30.5625 70.011497 31.222799 70.400497 31.780399 c
70.7929 32.341301 71.351898 32.621731 72.077797 32.621731 c
h
70.748703 29.848301 m
70.748703 29.2875 70.868103 28.8179 71.106697 28.4396 c
71.345398 28.061399 71.727898 27.872299 72.254303 27.872299 c
72.663002 27.872299 72.9981 28.0467 73.259697 28.395599 c
73.524498 28.747801 73.656898 29.2516 73.656898 29.907 c
73.656898 30.569 73.521202 31.0581 73.249901 31.374399 c
72.9785 31.694 72.643402 31.8538 72.244499 31.8538 c
71.799896 31.8538 71.438599 31.6842 71.160698 31.3451 c
70.886101 31.006001 70.748703 30.507 70.748703 29.848301 c
h
W*
0 0 132 43 rc
68.816902 35.5 m
75.471001 35.5 l
75.471001 26.1043 l
68.816902 26.1043 l
h
f
Q
q
67.970497 32.382099 m
67.620697 32.55817 67.259399 32.64621 66.886703 32.64621 c
66.147797 32.64621 65.5495 32.383701 65.091698 31.8587 c
64.634003 31.3337 64.405098 30.6506 64.405098 29.8092 c
64.405098 28.954901 64.632401 28.2897 65.0868 27.813601 c
65.541298 27.340799 66.095497 27.1043 66.749298 27.1043 c
67.017403 27.1043 67.257698 27.1304 67.470299 27.1826 c
67.865898 27.273899 68.197701 27.450001 68.465797 27.710899 c
68.625999 27.860901 68.769897 28.053301 68.8974 28.288 c
69.028198 28.5261 69.105003 28.741301 69.127899 28.933701 c
68.259804 28.933701 l
68.194397 28.7022 68.083298 28.4984 67.926399 28.3223 c
67.651703 28.018999 67.283897 27.867399 66.822899 27.867399 c
66.329201 27.867399 65.964699 28.027201 65.729301 28.346701 c
65.493896 28.6696 65.367996 29.096701 65.3517 29.6283 c
69.201401 29.6283 l
69.201401 30.1565 69.175301 30.5413 69.123001 30.7826 c
69.064102 31.1348 68.946404 31.4429 68.769897 31.7071 c
68.5868 31.984301 68.320297 32.209301 67.970497 32.382099 c
h
68.044098 31.242399 m
68.174797 31.014099 68.258202 30.7092 68.294197 30.3277 c
65.376198 30.3277 l
65.392502 30.7777 65.538002 31.1478 65.812599 31.438101 c
66.087303 31.731501 66.427299 31.8783 66.832703 31.8783 c
67.3983 31.8783 67.802101 31.6663 68.044098 31.242399 c
h
W*
0 0 132 43 rc
63.405102 33.64621 m
70.201401 33.64621 l
70.201401 26.1043 l
63.405102 26.1043 l
h
f
Q
q
62.4016 27.52 m
62.254501 27.732 62.180901 28.005899 62.180901 28.341801 c
62.180901 31.8097 l
61.469799 31.8097 l
61.469799 32.52874 l
62.180901 32.52874 l
62.180901 33.991241 l
63.073502 33.991241 l
63.073502 32.52874 l
63.912102 32.52874 l
63.912102 31.8097 l
63.073502 31.8097 l
63.073502 28.390699 l
63.073502 28.208099 63.135601 28.0858 63.2598 28.0238 c
63.328499 27.988001 63.442902 27.969999 63.6031 27.969999 c
63.740398 27.969999 l
63.789501 27.973301 63.846699 27.978201 63.912102 27.984699 c
63.912102 27.2901 l
63.810699 27.260799 63.704498 27.239599 63.5933 27.2265 c
63.485401 27.213499 63.367699 27.207001 63.2402 27.207001 c
62.828201 27.207001 62.548698 27.3113 62.4016 27.52 c
h
W
0 0 132 43 rc
60.469799 34.991241 m
64.912102 34.991241 l
64.912102 26.207001 l
60.469799 26.207001 l
h
f
Q
q
59.736 30.719 m
59.667301 30.5755 59.531601 30.4907 59.328899 30.4646 c
57.921398 30.2885 l
57.4277 30.226601 57.028801 30.061899 56.7248 29.7945 c
56.4207 29.5271 56.2687 29.150499 56.2687 28.6646 c
56.2687 28.2211 56.422401 27.851 56.729698 27.5543 c
57.040298 27.260799 57.439201 27.1141 57.9263 27.1141 c
58.331699 27.1141 58.702801 27.2005 59.0396 27.373301 c
59.376301 27.546101 59.634602 27.749901 59.8144 27.984699 c
59.843899 27.775999 59.894501 27.614599 59.966499 27.5005 c
60.103802 27.285299 60.324501 27.177601 60.628502 27.177601 c
60.7528 27.177601 60.8508 27.182501 60.922798 27.192301 c
60.994701 27.202101 61.0993 27.226601 61.236599 27.265699 c
61.236599 27.916201 l
61.181099 27.9065 61.1287 27.8983 61.0797 27.8918 c
61.030701 27.8885 60.9865 27.8869 60.9473 27.8869 c
60.826302 27.8869 60.746201 27.9146 60.707001 27.969999 c
60.671001 28.025499 60.653 28.098801 60.653 28.190201 c
60.653 31.208099 l
60.653 31.7038 60.4618 32.069 60.0793 32.303799 c
59.693501 32.53854 59.191601 32.65593 58.5737 32.65593 c
58.040699 32.65593 57.571602 32.528759 57.166199 32.274399 c
56.764 32.0233 56.554798 31.5749 56.538399 30.9293 c
57.362301 30.9293 l
57.395 31.1999 57.465302 31.403799 57.5732 31.540701 c
57.766102 31.7885 58.093102 31.9125 58.5541 31.9125 c
58.9529 31.9125 59.258598 31.844 59.4711 31.707001 c
59.686901 31.573299 59.7948 31.356501 59.7948 31.056499 c
59.7948 30.9097 59.7752 30.797199 59.736 30.719 c
h
57.4702 28.0825 m
57.283901 28.2293 57.190701 28.4298 57.190701 28.6842 c
57.190701 29.02 57.326401 29.264601 57.597698 29.4179 c
57.7579 29.509199 57.998199 29.576 58.3186 29.618401 c
58.853199 29.686899 l
59.016701 29.706499 59.183399 29.7391 59.353401 29.7847 c
59.523399 29.8304 59.662399 29.8874 59.770302 29.9559 c
59.770302 29.2467 l
59.770302 28.7054 59.525101 28.315701 59.034698 28.0777 c
58.743698 27.9342 58.442902 27.8624 58.132301 27.8624 c
57.8773 27.8624 57.656601 27.935801 57.4702 28.0825 c
h
W*
0 0 132 43 rc
55.2687 33.65593 m
62.236599 33.65593 l
62.236599 26.1141 l
55.2687 26.1141 l
h
f
Q
q
53.210999 32.64621 m
53.583698 32.64621 53.945 32.55817 54.2948 32.382099 c
54.644699 32.209301 54.911098 31.984301 55.0942 31.7071 c
55.270802 31.4429 55.3885 31.1348 55.4473 30.7826 c
55.499599 30.5413 55.525799 30.1565 55.525799 29.6283 c
51.675999 29.6283 l
51.692402 29.096701 51.818199 28.6696 52.0536 28.346701 c
52.289001 28.027201 52.653599 27.867399 53.147301 27.867399 c
53.608299 27.867399 53.976101 28.018999 54.250702 28.3223 c
54.4076 28.4984 54.518799 28.7022 54.584202 28.933701 c
55.452202 28.933701 l
55.429298 28.741301 55.352501 28.5261 55.221699 28.288 c
55.0942 28.053301 54.950401 27.860901 54.790199 27.710899 c
54.522099 27.450001 54.190201 27.273899 53.794601 27.1826 c
53.5821 27.1304 53.341801 27.1043 53.0737 27.1043 c
52.4198 27.1043 51.865601 27.340799 51.411201 27.813601 c
50.956699 28.2897 50.7295 28.954901 50.7295 29.8092 c
50.7295 30.6506 50.958401 31.3337 51.4161 31.8587 c
51.873798 32.383701 52.472099 32.64621 53.210999 32.64621 c
h
54.6185 30.3277 m
54.5826 30.7092 54.499199 31.014099 54.368401 31.242399 c
54.126499 31.6663 53.722698 31.8783 53.157101 31.8783 c
52.751701 31.8783 52.411598 31.731501 52.137001 31.438101 c
51.8624 31.1478 51.7169 30.7777 51.7005 30.3277 c
54.6185 30.3277 l
h
W*
0 0 132 43 rc
49.7295 33.64621 m
56.525799 33.64621 l
56.525799 26.1043 l
49.7295 26.1043 l
h
f
Q
q
48.6866 30.303301 m
48.6866 30.674999 48.806 31.002701 49.044601 31.2864 c
49.283298 31.5734 49.625 31.7169 50.069599 31.7169 c
50.121899 31.7169 50.1693 31.7152 50.2118 31.712 c
50.257599 31.7087 50.306599 31.7022 50.359001 31.6924 c
50.359001 32.621761 l
50.264099 32.631538 50.197102 32.638062 50.157902 32.641319 c
50.118698 32.644581 50.0909 32.64621 50.074501 32.64621 c
49.724701 32.64621 49.415699 32.519039 49.147598 32.264702 c
48.879501 32.013599 48.711201 31.799999 48.642502 31.623899 c
48.642502 32.52882 l
47.803902 32.52882 l
47.803902 27.290199 l
48.6866 27.290199 l
48.6866 30.303301 l
h
W
0 0 132 43 rc
46.803902 33.64621 m
51.359001 33.64621 l
51.359001 26.290199 l
46.803902 26.290199 l
h
f
Q
q
44.8834 32.68047 m
45.475201 32.68047 45.955799 32.536991 46.325298 32.25 c
46.698002 31.9631 46.921902 31.469101 46.997101 30.768 c
46.138901 30.768 l
46.086601 31.090799 45.9673 31.3582 45.780899 31.570101 c
45.594501 31.7854 45.295399 31.893 44.8834 31.893 c
44.321098 31.893 43.9189 31.619101 43.676998 31.071199 c
43.5201 30.715799 43.441601 30.277201 43.441601 29.755501 c
43.441601 29.230499 43.552799 28.788601 43.775101 28.429899 c
43.997398 28.071199 44.347198 27.891899 44.8246 27.891899 c
45.1908 27.891899 45.480099 28.002701 45.6926 28.224501 c
45.908401 28.449499 46.057201 28.756001 46.138901 29.143999 c
46.997101 29.143999 l
46.899101 28.449499 46.653801 27.9408 46.261501 27.617901 c
45.869202 27.298401 45.367298 27.138599 44.755901 27.138599 c
44.069302 27.138599 43.521702 27.3881 43.112999 27.886999 c
42.7043 28.389099 42.5 29.0152 42.5 29.7652 c
42.5 30.684799 42.723999 31.4006 43.171902 31.9125 c
43.619801 32.4245 44.1903 32.68047 44.8834 32.68047 c
h
W
0 0 132 43 rc
41.5 33.68047 m
47.997101 33.68047 l
47.997101 26.138599 l
41.5 26.138599 l
h
f
Q
q
107.632 12.5357 m
107.632 21.0289 l
106.043 21.0289 l
106.043 23.217699 l
111.714 23.217699 l
111.714 21.0289 l
110.31 21.0289 l
110.31 12.5357 l
111.714 12.5357 l
111.714 10.3469 l
106.043 10.3469 l
106.043 12.5357 l
107.632 12.5357 l
h
W
0 0 132 43 rc
105.043 24.217699 m
112.714 24.217699 l
112.714 9.3469 l
105.043 9.3469 l
h
f
ep
end
%%Trailer
%%EOF

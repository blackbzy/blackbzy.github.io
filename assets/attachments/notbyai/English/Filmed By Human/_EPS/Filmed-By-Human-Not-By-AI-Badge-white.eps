%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.6.1 (Build 23G93) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
30.349701 18.342501 m
26.8836 15.5357 21.9266 15.5357 18.460501 18.342501 c
19.800699 19.9974 l
22.485399 17.8234 26.3248 17.8234 29.009501 19.9974 c
30.349701 18.342501 l
h
W
0 0 132 43 rc
17.460501 20.9974 m
31.349701 20.9974 l
31.349701 14.5357 l
17.460501 14.5357 l
h
f
Q
q
19.903999 21.986601 2.1296 2.8769 rc
18.903999 25.863501 m
23.0336 25.863501 l
23.0336 20.986601 l
18.903999 20.986601 l
h
f
Q
q
26.511999 21.986601 2.1294999 2.8769 rc
25.511999 25.863501 m
29.6415 25.863501 l
29.6415 20.986601 l
25.511999 20.986601 l
h
f
Q
q
24 9.5 m
30.351299 9.5 35.5 14.6487 35.5 21 c
35.5 27.351299 30.351299 32.5 24 32.5 c
17.648701 32.5 12.5 27.351299 12.5 21 c
12.5 14.6487 17.648701 9.5 24 9.5 c
h
24 11.6295 m
29.1752 11.6295 33.370499 15.8248 33.370499 21 c
33.370499 26.1752 29.1752 30.370501 24 30.370501 c
18.8248 30.370501 14.6295 26.1752 14.6295 21 c
14.6295 15.8248 18.8248 11.6295 24 11.6295 c
h
W*
0 0 132 43 rc
11.5 33.5 m
36.5 33.5 l
36.5 8.5 l
11.5 8.5 l
h
f
Q
q
43.422699 34.05125 m
43.308201 33.88216 43.2444 33.615509 43.2313 33.251308 c
43.2313 32.4319 l
42.5 32.4319 l
42.5 31.739201 l
43.2313 31.739201 l
43.2313 27.232201 l
44.105 27.232201 l
44.105 31.739201 l
44.988499 31.739201 l
44.988499 32.4319 l
44.114799 32.4319 l
44.114799 32.997669 44.140999 33.348862 44.193298 33.485439 c
44.245701 33.625271 44.405998 33.695179 44.674301 33.695179 c
44.7103 33.695179 44.748001 33.69355 44.787201 33.6903 c
44.8298 33.6903 44.8969 33.68705 44.988499 33.68055 c
44.988499 34.480492 l
44.9132 34.486992 44.8461 34.491871 44.787201 34.495121 c
44.728298 34.498371 44.671101 34.5 44.615501 34.5 c
44.026501 34.5 43.628899 34.350422 43.422699 34.05125 c
h
W
0 0 132 43 rc
41.5 35.5 m
45.988499 35.5 l
45.988499 26.232201 l
41.5 26.232201 l
h
f
Q
q
87.386002 31.422199 m
87.088303 31.171801 86.9394 30.6987 86.9394 30.0028 c
86.9394 27.2323 l
86.055901 27.2323 l
86.055901 34.421982 l
86.9394 34.421982 l
86.9394 31.749001 l
87.148804 32.012402 87.336899 32.1978 87.503799 32.305099 c
87.788498 32.490398 88.143501 32.583092 88.568901 32.583092 c
89.331299 32.583092 89.848297 32.3181 90.119904 31.788 c
90.267197 31.4986 90.340797 31.097 90.340797 30.5832 c
90.340797 27.2323 l
89.4328 27.2323 l
89.4328 30.5247 l
89.4328 30.9084 89.383698 31.189699 89.2855 31.3685 c
89.125198 31.654699 88.824097 31.7978 88.382401 31.7978 c
88.0159 31.7978 87.6838 31.6726 87.386002 31.422199 c
h
W
0 0 132 43 rc
85.055901 35.421982 m
91.340797 35.421982 l
91.340797 26.2323 l
85.055901 26.2323 l
h
f
Q
q
108.437 30.3978 m
108.64 30.423901 108.776 30.5084 108.845 30.651501 c
108.884 30.7295 108.904 30.8417 108.904 30.988001 c
108.904 31.287201 108.796 31.5035 108.58 31.636801 c
108.367 31.773399 108.061 31.8416 107.662 31.8416 c
107.2 31.8416 106.873 31.7181 106.68 31.4709 c
106.572 31.3344 106.502 31.1311 106.469 30.8612 c
105.645 30.8612 l
105.661 31.5051 105.87 31.9522 106.273 32.202599 c
106.679 32.4562 107.148 32.583061 107.681 32.583061 c
108.3 32.583061 108.802 32.466 109.188 32.231899 c
109.571 31.9977 109.763 31.633499 109.763 31.139299 c
109.763 28.1297 l
109.763 28.0387 109.781 27.9655 109.817 27.9102 c
109.856 27.8549 109.936 27.827299 110.057 27.827299 c
110.096 27.827299 110.141 27.828899 110.19 27.832199 c
110.239 27.838699 110.291 27.8468 110.347 27.8566 c
110.347 27.2078 l
110.209 27.1688 110.105 27.1444 110.033 27.134701 c
109.961 27.124901 109.862 27.120001 109.738 27.120001 c
109.434 27.120001 109.213 27.227301 109.075 27.441999 c
109.003 27.555799 108.953 27.7167 108.923 27.9249 c
108.743 27.690701 108.485 27.487499 108.148 27.3151 c
107.811 27.142799 107.439 27.056601 107.034 27.056601 c
106.546 27.056601 106.147 27.202999 105.836 27.4956 c
105.528 27.7915 105.375 28.160601 105.375 28.6029 c
105.375 29.0874 105.527 29.462999 105.831 29.729601 c
106.135 29.9963 106.535 30.1605 107.029 30.2222 c
108.437 30.3978 l
h
106.297 28.6224 m
106.297 28.3687 106.391 28.168699 106.577 28.0224 c
106.764 27.876101 106.985 27.8029 107.24 27.8029 c
107.551 27.8029 107.852 27.8745 108.143 28.0175 c
108.634 28.2549 108.879 28.643499 108.879 29.1833 c
108.879 29.8906 l
108.771 29.8223 108.632 29.7654 108.462 29.719801 c
108.292 29.674299 108.125 29.6418 107.961 29.622299 c
107.426 29.554001 l
107.106 29.5117 106.865 29.445101 106.705 29.354 c
106.433 29.2012 106.297 28.9573 106.297 28.6224 c
h
W*
0 0 132 43 rc
104.375 33.583061 m
111.347 33.583061 l
111.347 26.056601 l
104.375 26.056601 l
h
f
Q
q
112.162 30.754 m
112.12 30.571899 112.099 30.310101 112.099 29.9687 c
112.099 27.2323 l
111.215 27.2323 l
111.215 32.456299 l
112.054 32.456299 l
112.054 31.714899 l
112.303 32.020599 112.567 32.240101 112.845 32.373402 c
113.123 32.506699 113.432 32.57336 113.772 32.57336 c
114.518 32.57336 115.022 32.3148 115.284 31.7978 c
115.428 31.5149 115.5 31.1101 115.5 30.5833 c
115.5 27.2323 l
114.602 27.2323 l
114.602 30.5247 l
114.602 30.843399 114.554 31.1003 114.459 31.295401 c
114.302 31.6206 114.018 31.783199 113.605 31.783199 c
113.396 31.783199 113.224 31.761999 113.09 31.719801 c
112.848 31.648199 112.635 31.5051 112.452 31.290501 c
112.305 31.1182 112.208 30.939301 112.162 30.754 c
h
W
0 0 132 43 rc
110.215 33.57336 m
116.5 33.57336 l
116.5 26.2323 l
110.215 26.2323 l
h
f
Q
q
93.560402 10.3391 m
98.168198 23.171101 l
101.217 23.171101 l
105.789 10.3391 l
102.864 10.3391 l
102.031 12.9769 l
97.274696 12.9769 l
96.381104 10.3391 l
93.560402 10.3391 l
h
99.666199 20.237301 m
98.001801 15.1881 l
101.278 15.1881 l
99.666199 20.237301 l
h
W*
0 0 132 43 rc
92.560402 24.171101 m
106.789 24.171101 l
106.789 9.3390999 l
92.560402 9.3390999 l
h
f
Q
q
80.8256 18.6877 m
80.118896 19.587299 79.137802 20.0371 77.882202 20.0371 c
77.187202 20.0371 76.614899 19.892 76.165199 19.601801 c
75.785599 19.369699 75.438103 19.0331 75.122803 18.591999 c
75.122803 23.1537 l
72.634903 23.1537 l
72.634903 10.3391 l
75.079002 10.3391 l
75.079002 11.5318 l
75.411903 11.0675 75.721397 10.7425 76.0075 10.5568 c
76.486397 10.2434 77.120102 10.0867 77.908501 10.0867 c
79.164101 10.0867 80.142303 10.5713 80.843102 11.5405 c
81.5439 12.5097 81.894302 13.7314 81.894302 15.2055 c
81.894302 16.627399 81.538002 17.7882 80.8256 18.6877 c
h
78.7407 12.9073 m
78.384399 12.3907 77.885101 12.1325 77.242699 12.1325 c
76.500999 12.1325 75.949097 12.3994 75.587097 12.9334 c
75.224998 13.4673 75.0439 14.1405 75.0439 14.9531 c
75.0439 15.6437 75.1315 16.206699 75.306702 16.641899 c
75.6455 17.4603 76.267403 17.8694 77.1726 17.8694 c
78.066101 17.8694 78.679298 17.4515 79.012199 16.615801 c
79.187401 16.1747 79.275002 15.6176 79.275002 14.9444 c
79.275002 14.1028 79.096901 13.4238 78.7407 12.9073 c
h
W*
0 0 132 43 rc
71.634903 24.1537 m
82.894302 24.1537 l
82.894302 9.0867004 l
71.634903 9.0867004 l
h
f
Q
q
66.837502 12.2282 m
66.738197 12.3269 66.688599 12.5707 66.688599 12.9595 c
66.688599 17.9739 l
68.239098 17.9739 l
68.239098 19.7411 l
66.688599 19.7411 l
66.688599 22.3876 l
64.218201 22.3876 l
64.218201 19.7411 l
62.8867 19.7411 l
62.8867 17.9739 l
64.218201 17.9739 l
64.218201 12.1325 l
64.218201 11.5405 64.358398 11.1023 64.638702 10.8179 c
65.0709 10.3711 65.876801 10.1679 67.056503 10.2086 c
68.239098 10.2521 l
68.239098 12.1064 l
68.157303 12.1006 68.072701 12.0947 67.9851 12.0889 c
67.748497 12.0889 l
67.240501 12.0889 66.936798 12.1354 66.837502 12.2282 c
h
W
0 0 132 43 rc
61.8867 23.3876 m
69.239098 23.3876 l
69.239098 9.1679001 l
61.8867 9.1679001 l
h
f
Q
q
61.580799 11.4883 m
62.3867 12.4807 62.7897 13.6733 62.7897 15.0662 c
62.7897 16.4359 62.3867 17.622801 61.580799 18.626801 c
60.774899 19.6308 59.551399 20.1329 57.910301 20.1329 c
56.269299 20.1329 55.045799 19.6308 54.239899 18.626801 c
53.433899 17.622801 53.030998 16.4359 53.030998 15.0662 c
53.030998 13.6733 53.433899 12.4807 54.239899 11.4883 c
55.045799 10.5016 56.269299 10.0083 57.910301 10.0083 c
59.551399 10.0083 60.774899 10.5016 61.580799 11.4883 c
h
59.5835 12.8637 m
59.1922 12.3472 58.631599 12.0889 57.9016 12.0889 c
57.1716 12.0889 56.608002 12.3472 56.210899 12.8637 c
55.819599 13.3803 55.624001 14.1144 55.624001 15.0662 c
55.624001 16.018 55.819599 16.7493 56.210899 17.26 c
56.608002 17.7766 57.1716 18.0348 57.9016 18.0348 c
58.631599 18.0348 59.1922 17.7766 59.5835 17.26 c
59.9748 16.7493 60.170399 16.018 60.170399 15.0662 c
60.170399 14.1144 59.9748 13.3803 59.5835 12.8637 c
h
W*
0 0 132 43 rc
52.030998 21.1329 m
63.7897 21.1329 l
63.7897 9.0082998 l
52.030998 9.0082998 l
h
f
Q
q
48.659 20.054501 m
49.646 20.054501 50.4519 19.7962 51.076801 19.279699 c
51.7075 18.768999 52.0229 17.918699 52.0229 16.729 c
52.0229 10.3391 l
49.464901 10.3391 l
49.464901 16.110901 l
49.464901 16.610001 49.3978 16.993099 49.2635 17.26 c
49.0182 17.747499 48.550999 17.991301 47.8619 17.991301 c
47.015099 17.991301 46.433998 17.634399 46.118599 16.9205 c
45.955101 16.543301 45.873299 16.0616 45.873299 15.4754 c
45.873299 10.3391 l
43.385502 10.3391 l
43.385502 19.810699 l
45.794498 19.810699 l
45.794498 18.4266 l
46.1157 18.914101 46.419399 19.2652 46.705502 19.4799 c
47.219501 19.863001 47.870602 20.054501 48.659 20.054501 c
h
W
0 0 132 43 rc
42.385502 21.054501 m
53.0229 21.054501 l
53.0229 9.3390999 l
42.385502 9.3390999 l
h
f
Q
q
83.357903 8.5197001 m
83.673302 8.5023003 l
83.918602 8.4906998 84.152199 8.4994001 84.3741 8.5284004 c
84.596001 8.5573997 84.782898 8.6240997 84.9347 8.7285995 c
85.080704 8.8273001 85.214996 9.0333004 85.3377 9.3466997 c
85.466202 9.6601 85.5187 9.8515997 85.495399 9.9212999 c
81.991302 19.828199 l
84.768303 19.828199 l
86.853203 12.8289 l
88.824203 19.828199 l
91.4785 19.828199 l
88.202202 10.4958 l
87.571503 8.6967001 87.072197 7.5823998 86.704201 7.1529002 c
86.336304 6.7175999 85.600502 6.5 84.496696 6.5 c
84.274803 6.5 84.096703 6.5029001 83.962303 6.5086999 c
83.828003 6.5086999 83.626602 6.5173998 83.357903 6.5348001 c
83.357903 8.5197001 l
h
W
0 0 132 43 rc
80.991302 20.828199 m
92.4785 20.828199 l
92.4785 5.5 l
80.991302 5.5 l
h
f
Q
q
98.537201 31.3978 m
98.265602 31.1409 98.129799 30.6759 98.129799 30.0028 c
98.129799 27.2323 l
97.2463 27.2323 l
97.2463 32.456299 l
98.120003 32.456299 l
98.120003 31.714899 l
98.329399 31.9718 98.519203 32.158798 98.689301 32.275799 c
98.980598 32.474201 99.311096 32.57336 99.680801 32.57336 c
100.0996 32.57336 100.4367 32.470901 100.692 32.266102 c
100.836 32.148998 100.967 31.9767 101.085 31.749001 c
101.281 32.028702 101.512 32.235199 101.777 32.3685 c
102.042 32.505081 102.339 32.57336 102.67 32.57336 c
103.377 32.57336 103.858 32.319698 104.113 31.812401 c
104.25 31.539301 104.319 31.171801 104.319 30.7101 c
104.319 27.2323 l
103.401 27.2323 l
103.401 30.8613 l
103.401 31.2092 103.313 31.4482 103.136 31.5783 c
102.963 31.708401 102.75 31.773399 102.498 31.773399 c
102.151 31.773399 101.852 31.658001 101.6 31.427099 c
101.351 31.196199 101.227 30.8109 101.227 30.271099 c
101.227 27.2323 l
100.3287 27.2323 l
100.3287 30.6418 l
100.3287 30.996201 100.2862 31.254801 100.2011 31.417299 c
100.0669 31.6612 99.816597 31.783199 99.450104 31.783199 c
99.116402 31.783199 98.811996 31.654699 98.537201 31.3978 c
h
W
0 0 132 43 rc
96.2463 33.57336 m
105.319 33.57336 l
105.319 26.2323 l
96.2463 26.2323 l
h
f
Q
q
91.852501 27.8372 m
91.7052 28.1038 91.631599 28.4599 91.631599 28.905399 c
91.631599 32.456299 l
92.534698 32.456299 l
92.534698 28.9883 l
92.534698 28.721701 92.577301 28.503799 92.6623 28.3347 c
92.819397 28.022499 93.112297 27.8664 93.540901 27.8664 c
94.156097 27.8664 94.574898 28.139601 94.797401 28.6859 c
94.918503 28.9785 94.978996 29.3801 94.978996 29.890699 c
94.978996 32.456299 l
95.862503 32.456299 l
95.862503 27.2323 l
95.028099 27.2323 l
95.037903 28.003 l
94.923401 27.8046 94.781097 27.637199 94.610901 27.500601 c
94.273903 27.2274 93.864899 27.0909 93.383797 27.0909 c
92.634499 27.0909 92.1241 27.3396 91.852501 27.8372 c
h
W
0 0 132 43 rc
90.631599 33.456299 m
96.862503 33.456299 l
96.862503 26.0909 l
90.631599 26.0909 l
h
f
Q
q
81.662903 30.163799 m
82.091499 31.357201 82.367996 32.121399 82.492401 32.456299 c
81.515602 32.456299 l
80.097099 28.202999 l
78.688499 32.456299 l
77.687202 32.456299 l
79.630898 27.0811 l
79.585098 26.9641 79.511398 26.7852 79.410004 26.5446 c
79.308601 26.3039 79.249702 26.170601 79.233299 26.1446 c
79.180901 26.066601 79.115501 26.001499 79.037003 25.949499 c
78.9617 25.894199 78.8423 25.8666 78.678703 25.8666 c
78.626297 25.8666 78.565804 25.871401 78.497101 25.881201 c
78.428299 25.891001 78.317101 25.917 78.1633 25.9592 c
78.1633 25.1593 l
78.261497 25.133301 78.3433 25.1154 78.408699 25.1057 c
78.477402 25.0959 78.573997 25.091 78.698303 25.091 c
79.208801 25.091 79.568703 25.237301 79.778099 25.530001 c
79.987503 25.822701 80.347504 26.635599 80.857903 27.968901 c
81.073898 28.5347 81.342201 29.2663 81.662903 30.163799 c
h
W
0 0 132 43 rc
76.687202 33.456299 m
83.492401 33.456299 l
83.492401 24.091 l
76.687202 24.091 l
h
f
Q
q
74.118896 32.392899 m
73.850601 32.262798 73.619904 32.072601 73.426804 31.822201 c
73.426804 34.421982 l
72.567902 34.421982 l
72.567902 27.2323 l
73.382698 27.2323 l
73.382698 27.900499 l
73.569199 27.650101 73.744202 27.468 73.907799 27.3542 c
74.182701 27.1623 74.519699 27.066401 74.9189 27.066401 c
75.632301 27.066401 76.190201 27.3396 76.592598 27.8859 c
76.995102 28.432199 77.196404 29.118299 77.196404 29.9443 c
77.196404 30.815701 76.991798 31.474199 76.582802 31.919701 c
76.177101 32.3685 75.647003 32.59285 74.992599 32.59285 c
74.678398 32.59285 74.387199 32.526192 74.118896 32.392899 c
h
75.934898 28.407801 m
75.699303 28.0306 75.342697 27.841999 74.864899 27.841999 c
74.230103 27.841999 73.7966 28.129801 73.564301 28.705299 c
73.439903 29.011 73.377701 29.4093 73.377701 29.9004 c
73.377701 30.58 73.528297 31.067801 73.8293 31.363701 c
74.133598 31.659599 74.487 31.807501 74.889503 31.807501 c
75.350899 31.807501 75.699303 31.6271 75.934898 31.2661 c
76.173798 30.905199 76.293198 30.4499 76.293198 29.9004 c
76.293198 29.282499 76.173798 28.785 75.934898 28.407801 c
h
W*
0 0 132 43 rc
71.567902 35.421982 m
78.196404 35.421982 l
78.196404 26.066401 l
71.567902 26.066401 l
h
f
Q
q
67.144302 32.2953 m
66.872803 32.464401 66.535698 32.54895 66.133301 32.54895 c
65.406799 32.54895 64.847298 32.269299 64.454597 31.709999 c
64.065201 31.1539 63.870602 30.495399 63.870602 29.734501 c
63.870602 28.9216 64.0849 28.2696 64.513496 27.778601 c
64.9422 27.2908 65.449402 27.0469 66.035103 27.0469 c
66.3983 27.0469 66.720596 27.118401 67.001999 27.261499 c
67.283401 27.4046 67.527199 27.6371 67.733299 27.959 c
67.733299 27.2323 l
68.528503 27.2323 l
68.528503 34.421982 l
67.679298 34.421982 l
67.679298 31.783199 l
67.479698 32.027 67.301399 32.1978 67.144302 32.2953 c
h
65.1614 28.3785 m
64.9226 28.755699 64.803101 29.224001 64.803101 29.7833 c
64.803101 30.440201 64.940498 30.9377 65.215401 31.2759 c
65.4935 31.6141 65.855103 31.783199 66.300102 31.783199 c
66.699303 31.783199 67.034698 31.6238 67.306297 31.305099 c
67.577904 30.9897 67.713699 30.5019 67.713699 29.841801 c
67.713699 29.1882 67.5812 28.685801 67.316101 28.3346 c
67.054398 27.9867 66.719002 27.8127 66.309898 27.8127 c
65.783096 27.8127 65.400299 28.001301 65.1614 28.3785 c
h
W*
0 0 132 43 rc
62.870602 35.421982 m
69.528503 35.421982 l
69.528503 26.0469 l
62.870602 26.0469 l
h
f
Q
q
61.9221 32.310001 m
61.571999 32.4856 61.2104 32.57336 60.837399 32.57336 c
60.0979 32.57336 59.4991 32.3116 59.041 31.788099 c
58.582901 31.2645 58.353802 30.5833 58.353802 29.744301 c
58.353802 28.8923 58.581299 28.229 59.036098 27.7542 c
59.490898 27.2827 60.045502 27.0469 60.700001 27.0469 c
60.9683 27.0469 61.208801 27.072901 61.421501 27.125 c
61.817402 27.216 62.149502 27.3916 62.4179 27.6518 c
62.578201 27.801399 62.722198 27.9932 62.8498 28.227301 c
62.980701 28.464701 63.057598 28.6793 63.080502 28.871201 c
62.2117 28.871201 l
62.146301 28.640301 62.035 28.437099 61.877998 28.261499 c
61.6031 27.959101 61.235001 27.807899 60.773602 27.807899 c
60.279499 27.807899 59.9147 27.967199 59.6791 28.2859 c
59.443501 28.6078 59.317501 29.0338 59.301102 29.563801 c
63.154099 29.563801 l
63.154099 30.090599 63.127899 30.4743 63.0756 30.715 c
63.016701 31.0662 62.898899 31.373501 62.722198 31.636801 c
62.538898 31.9132 62.272301 32.1376 61.9221 32.310001 c
h
61.9958 31.1735 m
62.126598 30.945801 62.210098 30.6418 62.246101 30.261299 c
59.325699 30.261299 l
59.341999 30.7101 59.487598 31.079201 59.762501 31.368601 c
60.037399 31.6612 60.377701 31.8076 60.783401 31.8076 c
61.349499 31.8076 61.753601 31.596201 61.9958 31.1735 c
h
W*
0 0 132 43 rc
57.353802 33.57336 m
64.154099 33.57336 l
64.154099 26.0469 l
57.353802 26.0469 l
h
f
Q
q
51.7178 32.275799 m
51.547699 32.158798 51.357899 31.9718 51.148499 31.714899 c
51.148499 32.456299 l
50.274799 32.456299 l
50.274799 27.2323 l
51.158298 27.2323 l
51.158298 30.0028 l
51.158298 30.6759 51.294102 31.1409 51.565701 31.3978 c
51.8405 31.654699 52.144798 31.783199 52.4786 31.783199 c
52.8451 31.783199 53.095402 31.6612 53.229599 31.417299 c
53.314602 31.254801 53.357201 30.996201 53.357201 30.6418 c
53.357201 27.2323 l
54.255402 27.2323 l
54.255402 30.271099 l
54.255402 30.8109 54.3797 31.196199 54.628399 31.427099 c
54.880402 31.658001 55.179798 31.773399 55.5266 31.773399 c
55.778599 31.773399 55.991299 31.708401 56.1647 31.5783 c
56.3414 31.4482 56.429699 31.2092 56.429699 30.8613 c
56.429699 27.2323 l
57.347599 27.2323 l
57.347599 30.7101 l
57.347599 31.171801 57.278801 31.539301 57.141399 31.812401 c
56.8862 32.319698 56.405201 32.57336 55.698399 32.57336 c
55.367901 32.57336 55.070099 32.505081 54.805099 32.3685 c
54.540001 32.235199 54.309399 32.028702 54.112999 31.749001 c
53.995201 31.9767 53.8643 32.148998 53.720402 32.266102 c
53.465099 32.470901 53.128101 32.57336 52.709301 32.57336 c
52.3395 32.57336 52.008999 32.474201 51.7178 32.275799 c
h
W
0 0 132 43 rc
49.274799 33.57336 m
58.347599 33.57336 l
58.347599 26.2323 l
49.274799 26.2323 l
h
f
Q
q
45.837601 33.402519 0.88349998 0.99505001 rc
44.837601 35.397572 m
47.7211 35.397572 l
47.7211 32.402519 l
44.837601 32.402519 l
h
f
Q
q
45.837601 27.232201 0.88349998 5.1996999 rc
44.837601 33.4319 m
47.7211 33.4319 l
47.7211 26.232201 l
44.837601 26.232201 l
h
f
Q
q
108.09 12.5189 m
108.09 20.9884 l
106.499 20.9884 l
106.499 23.171101 l
112.175 23.171101 l
112.175 20.9884 l
110.77 20.9884 l
110.77 12.5189 l
112.175 12.5189 l
112.175 10.3362 l
106.499 10.3362 l
106.499 12.5189 l
108.09 12.5189 l
h
W
0 0 132 43 rc
105.499 24.171101 m
113.175 24.171101 l
113.175 9.3361998 l
105.499 9.3361998 l
h
f
Q
q
48.0611 27.232201 0.88349998 7.1653099 rc
47.0611 35.397511 m
49.944599 35.397511 l
49.944599 26.232201 l
47.0611 26.232201 l
h
f
ep
end
%%Trailer
%%EOF

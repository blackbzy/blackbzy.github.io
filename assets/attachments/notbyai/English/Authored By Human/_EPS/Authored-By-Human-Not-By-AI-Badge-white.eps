%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.6.1 (Build 23G93) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
30.349701 18.342501 m
26.8836 15.5357 21.9266 15.5357 18.460501 18.342501 c
19.800699 19.9974 l
22.485399 17.8234 26.3248 17.8234 29.009501 19.9974 c
30.349701 18.342501 l
h
W
0 0 132 43 rc
17.460501 20.9974 m
31.349701 20.9974 l
31.349701 14.5357 l
17.460501 14.5357 l
h
f
Q
q
19.903999 21.986601 2.1296 2.8769 rc
18.903999 25.863501 m
23.0336 25.863501 l
23.0336 20.986601 l
18.903999 20.986601 l
h
f
Q
q
26.511999 21.986601 2.1294999 2.8769 rc
25.511999 25.863501 m
29.6415 25.863501 l
29.6415 20.986601 l
25.511999 20.986601 l
h
f
Q
q
24 9.5 m
30.351299 9.5 35.5 14.6487 35.5 21 c
35.5 27.351299 30.351299 32.5 24 32.5 c
17.648701 32.5 12.5 27.351299 12.5 21 c
12.5 14.6487 17.648701 9.5 24 9.5 c
h
24 11.6295 m
29.1752 11.6295 33.370499 15.8248 33.370499 21 c
33.370499 26.1752 29.1752 30.370501 24 30.370501 c
18.8248 30.370501 14.6295 26.1752 14.6295 21 c
14.6295 15.8248 18.8248 11.6295 24 11.6295 c
h
W*
0 0 132 43 rc
11.5 33.5 m
36.5 33.5 l
36.5 8.5 l
11.5 8.5 l
h
f
Q
q
96.0774 30.068501 m
96.0774 30.7663 96.226601 31.2407 96.525101 31.4918 c
96.8237 31.742901 97.156601 31.8685 97.524002 31.8685 c
97.966797 31.8685 98.2686 31.725 98.429298 31.438 c
98.527802 31.258699 98.577003 30.976601 98.577003 30.591801 c
98.577003 27.290199 l
99.487198 27.290199 l
99.487198 30.650499 l
99.487198 31.165701 99.413399 31.568501 99.2658 31.8587 c
98.9935 32.390202 98.475304 32.655972 97.710999 32.655972 c
97.2845 32.655972 96.928596 32.563042 96.643204 32.377201 c
96.475899 32.2696 96.2873 32.083698 96.0774 31.819599 c
96.0774 34.5 l
95.191704 34.5 l
95.191704 27.290199 l
96.0774 27.290199 l
96.0774 30.068501 l
h
W
0 0 132 43 rc
94.191704 35.5 m
100.4872 35.5 l
100.4872 26.290199 l
94.191704 26.290199 l
h
f
Q
q
116.721 30.4646 m
116.925 30.4907 117.061 30.5755 117.13 30.719 c
117.169 30.797199 117.189 30.9097 117.189 31.056499 c
117.189 31.356501 117.081 31.573299 116.864 31.707001 c
116.651 31.844 116.344 31.9125 115.944 31.9125 c
115.482 31.9125 115.153 31.7885 114.96 31.540701 c
114.852 31.403799 114.781 31.1999 114.748 30.9293 c
113.922 30.9293 l
113.938 31.5749 114.148 32.0233 114.552 32.274399 c
114.958 32.528759 115.429 32.65593 115.964 32.65593 c
116.584 32.65593 117.087 32.53854 117.474 32.303799 c
117.858 32.069 118.05 31.7038 118.05 31.208099 c
118.05 28.190201 l
118.05 28.098801 118.068 28.025499 118.104 27.969999 c
118.143 27.9146 118.224 27.8869 118.345 27.8869 c
118.385 27.8869 118.429 27.8885 118.478 27.8918 c
118.527 27.8983 118.58 27.9065 118.635 27.916201 c
118.635 27.265699 l
118.498 27.226601 118.393 27.202101 118.321 27.192301 c
118.248 27.182501 118.15 27.177601 118.025 27.177601 c
117.72 27.177601 117.499 27.285299 117.361 27.5005 c
117.289 27.614599 117.238 27.775999 117.209 27.984699 c
117.028 27.749901 116.769 27.546101 116.431 27.373301 c
116.093 27.2005 115.721 27.1141 115.314 27.1141 c
114.825 27.1141 114.425 27.260799 114.114 27.5543 c
113.805 27.851 113.651 28.2211 113.651 28.6646 c
113.651 29.150499 113.804 29.5271 114.109 29.7945 c
114.414 30.061899 114.814 30.226601 115.309 30.2885 c
116.721 30.4646 l
h
114.576 28.6842 m
114.576 28.4298 114.67 28.2293 114.857 28.0825 c
115.044 27.935801 115.265 27.8624 115.521 27.8624 c
115.832 27.8624 116.134 27.9342 116.426 28.0777 c
116.918 28.315701 117.164 28.7054 117.164 29.2467 c
117.164 29.9559 l
117.056 29.8874 116.917 29.8304 116.746 29.7847 c
116.575 29.7391 116.408 29.706499 116.244 29.686899 c
115.708 29.618401 l
115.386 29.576 115.145 29.509199 114.985 29.4179 c
114.712 29.264601 114.576 29.02 114.576 28.6842 c
h
W*
0 0 132 43 rc
112.651 33.65593 m
119.635 33.65593 l
119.635 26.1141 l
112.651 26.1141 l
h
f
Q
q
120.838 32.445702 m
120.559 32.312 120.295 32.0919 120.046 31.785299 c
120.046 32.52882 l
119.204 32.52882 l
119.204 27.290199 l
120.09 27.290199 l
120.09 30.034201 l
120.09 30.3766 120.111 30.639099 120.154 30.821699 c
120.2 31.007601 120.297 31.187 120.444 31.3598 c
120.628 31.575001 120.841 31.7185 121.084 31.790199 c
121.219 31.8326 121.391 31.8538 121.601 31.8538 c
122.014 31.8538 122.299 31.6908 122.457 31.3647 c
122.552 31.169001 122.6 30.9114 122.6 30.5919 c
122.6 27.290199 l
123.5 27.290199 l
123.5 30.6506 l
123.5 31.178801 123.428 31.584801 123.284 31.8685 c
123.021 32.387001 122.516 32.64621 121.768 32.64621 c
121.427 32.64621 121.117 32.579369 120.838 32.445702 c
h
W
0 0 132 43 rc
118.204 33.64621 m
124.5 33.64621 l
124.5 26.290199 l
118.204 26.290199 l
h
f
Q
q
101.097 23.217699 m
105.681 10.3499 l
102.748 10.3499 l
101.914 12.995 l
97.145103 12.995 l
96.249298 10.3499 l
93.4216 10.3499 l
98.040802 23.217699 l
101.097 23.217699 l
h
101.158 15.2124 m
99.542503 20.2757 l
97.873901 15.2124 l
101.158 15.2124 l
h
W*
0 0 132 43 rc
92.4216 24.217699 m
106.681 24.217699 l
106.681 9.3499002 l
92.4216 9.3499002 l
h
f
Q
q
77.704498 20.0749 m
78.963203 20.0749 79.9468 19.623899 80.655197 18.7218 c
81.3694 17.8197 81.726501 16.655701 81.726501 15.2298 c
81.726501 13.7516 81.375298 12.5265 80.672699 11.5546 c
79.9702 10.5827 78.989601 10.0967 77.730797 10.0967 c
76.940498 10.0967 76.305298 10.2538 75.825203 10.5681 c
75.5383 10.7543 75.227997 11.0803 74.894302 11.5459 c
74.894302 10.3499 l
72.444199 10.3499 l
72.444199 23.200199 l
74.938202 23.200199 l
74.938202 18.625799 l
75.254402 19.0681 75.602699 19.4056 75.983299 19.638399 c
76.434097 19.929399 77.007797 20.0749 77.704498 20.0749 c
h
77.0634 12.1482 m
77.707397 12.1482 78.208 12.4072 78.565102 12.9252 c
78.922203 13.4431 79.1008 14.1241 79.1008 14.968 c
79.1008 15.6431 79.013 16.201799 78.837303 16.6441 c
78.503601 17.4821 77.888901 17.901199 76.993202 17.901199 c
76.085701 17.901199 75.462196 17.4909 75.122704 16.6703 c
74.946999 16.233801 74.8592 15.6692 74.8592 14.9767 c
74.8592 14.1619 75.040703 13.4868 75.403702 12.9514 c
75.766701 12.4159 76.319901 12.1482 77.0634 12.1482 c
h
W*
0 0 132 43 rc
71.444199 24.200199 m
82.726501 24.200199 l
82.726501 9.0966997 l
71.444199 9.0966997 l
h
f
Q
q
64.006699 12.1482 m
64.006699 11.5546 64.147202 11.1152 64.4282 10.83 c
64.861397 10.3819 65.669403 10.1782 66.851997 10.2189 c
68.037498 10.2626 l
68.037498 12.122 l
67.955498 12.1162 67.870598 12.1104 67.782799 12.1046 c
67.5457 12.1046 l
67.0364 12.1046 66.731903 12.1511 66.632401 12.2442 c
66.532898 12.3432 66.483101 12.5876 66.483101 12.9775 c
66.483101 18.005899 l
68.037498 18.005899 l
68.037498 19.778099 l
66.483101 19.778099 l
66.483101 22.431999 l
64.006699 22.431999 l
64.006699 19.778099 l
62.671799 19.778099 l
62.671799 18.005899 l
64.006699 18.005899 l
64.006699 12.1482 l
h
W
0 0 132 43 rc
61.671799 23.431999 m
69.037498 23.431999 l
69.037498 9.1781998 l
61.671799 9.1781998 l
h
f
Q
q
62.574501 15.0902 m
62.574501 13.6934 62.170601 12.4974 61.362701 11.5022 c
60.554699 10.5128 59.328201 10.0181 57.683102 10.0181 c
56.037998 10.0181 54.811501 10.5128 54.003601 11.5022 c
53.195599 12.4974 52.791698 13.6934 52.791698 15.0902 c
52.791698 16.463699 53.195599 17.653799 54.003601 18.6607 c
54.811501 19.6675 56.037998 20.1709 57.683102 20.1709 c
59.328201 20.1709 60.554699 19.6675 61.362701 18.6607 c
62.170601 17.653799 62.574501 16.463699 62.574501 15.0902 c
h
57.674301 12.1046 m
58.406101 12.1046 58.968201 12.3635 59.360401 12.8815 c
59.752701 13.3995 59.948799 14.1357 59.948799 15.0902 c
59.948799 16.0446 59.752701 16.777901 59.360401 17.2901 c
58.968201 17.8081 58.406101 18.066999 57.674301 18.066999 c
56.942501 18.066999 56.377602 17.8081 55.979401 17.2901 c
55.5872 16.777901 55.391102 16.0446 55.391102 15.0902 c
55.391102 14.1357 55.5872 13.3995 55.979401 12.8815 c
56.377602 12.3635 56.942501 12.1046 57.674301 12.1046 c
h
W*
0 0 132 43 rc
51.791698 21.1709 m
63.574501 21.1709 l
63.574501 9.0180998 l
51.791698 9.0180998 l
h
f
Q
q
48.408901 20.0924 m
49.3983 20.0924 50.2062 19.833401 50.8326 19.315399 c
51.464901 18.803301 51.781101 17.9506 51.781101 16.757601 c
51.781101 10.3499 l
49.216801 10.3499 l
49.216801 16.1378 l
49.216801 16.6383 49.149502 17.0224 49.014801 17.2901 c
48.768902 17.778999 48.300598 18.023399 47.609699 18.023399 c
46.760799 18.023399 46.178299 17.665501 45.862202 16.9496 c
45.6982 16.571301 45.616299 16.088301 45.616299 15.5005 c
45.616299 10.3499 l
43.122299 10.3499 l
43.122299 19.8479 l
45.537201 19.8479 l
45.537201 18.4599 l
45.8592 18.948799 46.1637 19.3009 46.4505 19.516199 c
46.965698 19.900299 47.6185 20.0924 48.408901 20.0924 c
h
W
0 0 132 43 rc
42.122299 21.0924 m
52.781101 21.0924 l
52.781101 9.3499002 l
42.122299 9.3499002 l
h
f
Q
q
83.509903 8.5079002 m
83.193802 8.5253 l
83.193802 6.5349002 l
83.463097 6.5174999 83.6651 6.5086999 83.799698 6.5086999 c
83.934402 6.5029001 84.112999 6.5 84.335403 6.5 c
85.441902 6.5 86.179604 6.7182002 86.548401 7.1546998 c
86.917297 7.5854001 87.417801 8.7027998 88.050102 10.507 c
91.334503 19.8654 l
88.673599 19.8654 l
86.697701 12.8466 l
84.607697 19.8654 l
81.823799 19.8654 l
85.336502 9.9308004 l
85.360001 9.8610001 85.307297 9.6688995 85.178497 9.3547001 c
85.055496 9.0403996 84.920898 8.8338003 84.774498 8.7348003 c
84.622299 8.6301003 84.434898 8.5632 84.212502 8.5340996 c
83.989998 8.5050001 83.755798 8.4961996 83.509903 8.5079002 c
h
W
0 0 132 43 rc
80.823799 20.8654 m
92.334503 20.8654 l
92.334503 5.5 l
80.823799 5.5 l
h
f
Q
q
106.681 31.785299 m
106.891 32.042999 107.081 32.230499 107.252 32.347801 c
107.544 32.546761 107.875 32.64621 108.246 32.64621 c
108.666 32.64621 109.004 32.543499 109.259 32.3381 c
109.404 32.220699 109.535 32.047798 109.653 31.819599 c
109.85 32.099998 110.081 32.307098 110.347 32.4408 c
110.612 32.57774 110.911 32.64621 111.242 32.64621 c
111.951 32.64621 112.433 32.391899 112.689 31.8832 c
112.827 31.609301 112.896 31.240801 112.896 30.7777 c
112.896 27.290199 l
111.975 27.290199 l
111.975 30.929399 l
111.975 31.278299 111.887 31.5179 111.71 31.648399 c
111.536 31.778799 111.323 31.844 111.07 31.844 c
110.722 31.844 110.422 31.7283 110.17 31.496799 c
109.92 31.2652 109.796 30.878799 109.796 30.3375 c
109.796 27.290199 l
108.895 27.290199 l
108.895 30.7092 l
108.895 31.064699 108.853 31.3239 108.767 31.487 c
108.633 31.731501 108.382 31.8538 108.015 31.8538 c
107.68 31.8538 107.375 31.725 107.099 31.4674 c
106.827 31.209801 106.691 30.7435 106.691 30.068501 c
106.691 27.290199 l
105.805 27.290199 l
105.805 32.52882 l
106.681 32.52882 l
106.681 31.785299 l
h
W
0 0 132 43 rc
104.805 33.64621 m
113.896 33.64621 l
113.896 26.290199 l
104.805 26.290199 l
h
f
Q
q
101.512 28.3957 m
101.427 28.5653 101.384 28.783701 101.384 29.0511 c
101.384 32.528858 l
100.4787 32.528858 l
100.4787 28.968 l
100.4787 28.5212 100.552 28.1642 100.7 27.896799 c
100.972 27.3979 101.484 27.148399 102.235 27.148399 c
102.717 27.148399 103.127 27.2854 103.465 27.559299 c
103.636 27.696199 103.779 27.864201 103.893 28.063101 c
103.884 27.2903 l
104.72 27.2903 l
104.72 32.528858 l
103.834 32.528858 l
103.834 29.955999 l
103.834 29.444099 103.774 29.0413 103.652 28.7479 c
103.429 28.200001 103.009 27.9261 102.393 27.9261 c
101.963 27.9261 101.669 28.0826 101.512 28.3957 c
h
W
0 0 132 43 rc
99.478699 33.528858 m
105.72 33.528858 l
105.72 26.148399 l
99.478699 26.148399 l
h
f
Q
q
91.244904 32.528858 m
89.8228 28.263599 l
88.410698 32.528858 l
87.406898 32.528858 l
89.3554 27.138599 l
89.309502 27.0212 89.235703 26.8419 89.134003 26.600599 c
89.032303 26.359301 88.973297 26.225599 88.956902 26.199499 c
88.904404 26.121201 88.838799 26.056 88.760002 26.003799 c
88.684601 25.9484 88.564903 25.9207 88.400902 25.9207 c
88.348396 25.9207 88.287697 25.9256 88.218803 25.9354 c
88.149902 25.945101 88.038399 25.971201 87.884201 26.013599 c
87.884201 25.211399 l
87.982597 25.1854 88.064598 25.1674 88.130203 25.1576 c
88.199097 25.1479 88.295898 25.143 88.420502 25.143 c
88.932297 25.143 89.293098 25.2897 89.502998 25.5832 c
89.712997 25.876699 90.073799 26.6919 90.585503 28.028799 c
90.802002 28.596201 91.070999 29.329901 91.392502 30.2299 c
91.822197 31.426701 92.099403 32.193001 92.223999 32.528858 c
91.244904 32.528858 l
h
W
0 0 132 43 rc
86.406898 33.528858 m
93.223999 33.528858 l
93.223999 24.143 l
86.406898 24.143 l
h
f
Q
q
83.920303 27.4125 m
83.756302 27.5266 83.580803 27.7092 83.393799 27.9603 c
83.393799 27.290199 l
82.577003 27.290199 l
82.577003 34.5 l
83.438103 34.5 l
83.438103 31.8929 l
83.631599 32.144001 83.8629 32.334801 84.131897 32.465199 c
84.400803 32.5989 84.692802 32.665749 85.007698 32.665749 c
85.663696 32.665749 86.195099 32.4408 86.601898 31.9907 c
87.011902 31.544001 87.217003 30.883699 87.217003 30.0098 c
87.217003 29.181499 87.015198 28.4935 86.611702 27.945601 c
86.208298 27.3978 85.649002 27.123899 84.933899 27.123899 c
84.533699 27.123899 84.195801 27.2201 83.920303 27.4125 c
h
84.879799 27.9016 m
85.358704 27.9016 85.716202 28.0907 85.9524 28.469 c
86.191902 28.8473 86.3116 29.346201 86.3116 29.9657 c
86.3116 30.5168 86.191902 30.9734 85.9524 31.3353 c
85.716202 31.6973 85.366898 31.878201 84.904404 31.878201 c
84.5009 31.878201 84.146599 31.7299 83.841599 31.4331 c
83.539803 31.1364 83.388901 30.647301 83.388901 29.9657 c
83.388901 29.473301 83.451202 29.0739 83.575897 28.767401 c
83.8088 28.190201 84.243401 27.9016 84.879799 27.9016 c
h
W*
0 0 132 43 rc
81.577003 35.5 m
88.217003 35.5 l
88.217003 26.123899 l
81.577003 26.123899 l
h
f
Q
q
77.744698 32.367401 m
77.472397 32.536949 77.134598 32.621731 76.731102 32.621731 c
76.002899 32.621731 75.441902 32.341301 75.048302 31.780399 c
74.657898 31.222799 74.462799 30.5625 74.462799 29.7994 c
74.462799 28.9842 74.677597 28.3304 75.1073 27.837999 c
75.537102 27.3489 76.045502 27.1043 76.632698 27.1043 c
76.996803 27.1043 77.319901 27.1761 77.601997 27.3195 c
77.884102 27.462999 78.128502 27.696199 78.335098 28.018999 c
78.335098 27.290199 l
79.132202 27.290199 l
79.132202 34.5 l
78.280998 34.5 l
78.280998 31.8538 l
78.080902 32.0984 77.9021 32.2696 77.744698 32.367401 c
h
75.756798 28.4396 m
75.517403 28.8179 75.397598 29.2875 75.397598 29.848301 c
75.397598 30.507 75.5354 31.006001 75.810997 31.3451 c
76.089798 31.6842 76.452301 31.8538 76.898399 31.8538 c
77.298599 31.8538 77.634804 31.694 77.907097 31.374399 c
78.179298 31.0581 78.315399 30.569 78.315399 29.907 c
78.315399 29.2516 78.182602 28.747801 77.916901 28.395599 c
77.654503 28.0467 77.318199 27.872299 76.908203 27.872299 c
76.380096 27.872299 75.9963 28.061399 75.756798 28.4396 c
h
W*
0 0 132 43 rc
73.462799 35.5 m
80.132202 35.5 l
80.132202 26.1043 l
73.462799 26.1043 l
h
f
Q
q
71.724197 32.64621 m
72.098099 32.64621 72.460602 32.55817 72.8116 32.382099 c
73.162598 32.209301 73.429901 31.984301 73.613602 31.7071 c
73.790802 31.4429 73.908798 31.1348 73.967903 30.7826 c
74.020401 30.5413 74.0466 30.1565 74.0466 29.6283 c
70.184097 29.6283 l
70.2005 29.096701 70.326797 28.6696 70.563004 28.346701 c
70.799202 28.027201 71.164902 27.867399 71.660202 27.867399 c
72.122704 27.867399 72.491798 28.018999 72.767303 28.3223 c
72.924797 28.4984 73.036301 28.7022 73.101898 28.933701 c
73.972801 28.933701 l
73.949898 28.741301 73.872803 28.5261 73.7416 28.288 c
73.613602 28.053301 73.469299 27.860901 73.308601 27.710899 c
73.039597 27.450001 72.706596 27.273899 72.3097 27.1826 c
72.096497 27.1304 71.8554 27.1043 71.586403 27.1043 c
70.930397 27.1043 70.374397 27.340799 69.918404 27.813601 c
69.462402 28.2897 69.234497 28.954901 69.234497 29.8092 c
69.234497 30.6506 69.464104 31.3337 69.923302 31.8587 c
70.382599 32.383701 70.982803 32.64621 71.724197 32.64621 c
h
73.136299 30.3277 m
73.100304 30.7092 73.016602 31.014099 72.885399 31.242399 c
72.6427 31.6663 72.237503 31.8783 71.670097 31.8783 c
71.263298 31.8783 70.922203 31.731501 70.646599 31.438101 c
70.371101 31.1478 70.225098 30.7777 70.208702 30.3277 c
73.136299 30.3277 l
h
W*
0 0 132 43 rc
68.234497 33.64621 m
75.0466 33.64621 l
75.0466 26.1043 l
68.234497 26.1043 l
h
f
Q
q
67.386703 30.303301 m
67.386703 30.674999 67.506401 31.002701 67.745903 31.2864 c
67.985397 31.5734 68.328102 31.7169 68.7743 31.7169 c
68.826797 31.7169 68.874298 31.7152 68.917 31.712 c
68.962898 31.7087 69.0121 31.7022 69.064598 31.6924 c
69.064598 32.621761 l
68.969398 32.631538 68.902199 32.638062 68.862801 32.641319 c
68.823502 32.644581 68.795601 32.64621 68.779198 32.64621 c
68.4282 32.64621 68.118202 32.519039 67.849197 32.264702 c
67.5802 32.013599 67.411301 31.799999 67.3424 31.623899 c
67.3424 32.52882 l
66.500999 32.52882 l
66.500999 27.290199 l
67.386703 27.290199 l
67.386703 30.303301 l
h
W
0 0 132 43 rc
65.500999 33.64621 m
70.064598 33.64621 l
70.064598 26.290199 l
65.500999 26.290199 l
h
f
Q
q
63.295101 32.68047 m
63.974098 32.68047 64.548203 32.455502 65.017303 32.005501 c
65.486298 31.5555 65.720901 30.893499 65.720901 30.0196 c
65.720901 29.174999 65.514198 28.4772 65.100899 27.9261 c
64.687599 27.375 64.046303 27.099501 63.176998 27.099501 c
62.452099 27.099501 61.8764 27.3424 61.450001 27.8283 c
61.023499 28.3174 60.810299 28.972799 60.810299 29.7946 c
60.810299 30.674999 61.035 31.376101 61.484402 31.8979 c
61.9338 32.419601 62.537399 32.68047 63.295101 32.68047 c
h
63.2607 27.857599 m
63.847801 27.857599 64.249702 28.0777 64.466202 28.518 c
64.685997 28.961399 64.795799 29.4538 64.795799 29.9951 c
64.795799 30.484301 64.717102 30.882099 64.5597 31.188601 c
64.310402 31.6712 63.880699 31.9125 63.2705 31.9125 c
62.729301 31.9125 62.335602 31.7071 62.0896 31.2962 c
61.843601 30.885401 61.7206 30.3897 61.7206 29.809299 c
61.7206 29.251699 61.843601 28.787001 62.0896 28.415199 c
62.335602 28.043501 62.726002 27.857599 63.2607 27.857599 c
h
W*
0 0 132 43 rc
59.810299 33.68047 m
66.720901 33.68047 l
66.720901 26.099501 l
59.810299 26.099501 l
h
f
Q
q
56.748299 30.068501 m
56.748299 30.7663 56.897499 31.2407 57.195999 31.4918 c
57.494499 31.742901 57.827499 31.8685 58.194901 31.8685 c
58.637699 31.8685 58.939499 31.725 59.100201 31.438 c
59.198601 31.258699 59.247799 30.976601 59.247799 30.591801 c
59.247799 27.290199 l
60.1581 27.290199 l
60.1581 30.650499 l
60.1581 31.165701 60.084301 31.568501 59.936699 31.8587 c
59.664398 32.390202 59.146099 32.655972 58.381802 32.655972 c
57.955399 32.655972 57.599499 32.563042 57.314098 32.377201 c
57.146801 32.2696 56.958199 32.083698 56.748299 31.819599 c
56.748299 34.5 l
55.862598 34.5 l
55.862598 27.290199 l
56.748299 27.290199 l
56.748299 30.068501 l
h
W
0 0 132 43 rc
54.862598 35.5 m
61.1581 35.5 l
61.1581 26.290199 l
54.862598 26.290199 l
h
f
Q
q
53.758499 27.52 m
53.610901 27.732 53.537102 28.005899 53.537102 28.341801 c
53.537102 31.8097 l
52.8237 31.8097 l
52.8237 32.52874 l
53.537102 32.52874 l
53.537102 33.991241 l
54.432598 33.991241 l
54.432598 32.52874 l
55.273998 32.52874 l
55.273998 31.8097 l
54.432598 31.8097 l
54.432598 28.390699 l
54.432598 28.208099 54.494999 28.0858 54.619598 28.0238 c
54.688499 27.988001 54.803299 27.969999 54.964001 27.969999 c
55.101799 27.969999 l
55.151001 27.973301 55.208401 27.978201 55.273998 27.984699 c
55.273998 27.2901 l
55.172298 27.260799 55.065701 27.239599 54.954201 27.2265 c
54.845901 27.213499 54.727901 27.207001 54.599899 27.207001 c
54.1866 27.207001 53.906101 27.3113 53.758499 27.52 c
h
W
0 0 132 43 rc
51.8237 34.991241 m
56.273998 34.991241 l
56.273998 26.207001 l
51.8237 26.207001 l
h
f
Q
q
48.033298 28.968 m
48.033298 28.5212 48.107101 28.1642 48.2547 27.896799 c
48.527 27.3979 49.0387 27.148399 49.789902 27.148399 c
50.272099 27.148399 50.682098 27.2854 51.02 27.559299 c
51.190601 27.696199 51.333302 27.864201 51.448101 28.063101 c
51.438202 27.2903 l
52.2747 27.2903 l
52.2747 32.528858 l
51.389 32.528858 l
51.389 29.955999 l
51.389 29.444099 51.3284 29.0413 51.207001 28.7479 c
50.983898 28.200001 50.564098 27.9261 49.947399 27.9261 c
49.517601 27.9261 49.224098 28.0826 49.066601 28.3957 c
48.9813 28.5653 48.938702 28.783701 48.938702 29.0511 c
48.938702 32.528858 l
48.033298 32.528858 l
48.033298 28.968 l
h
W
0 0 132 43 rc
47.033298 33.528858 m
53.2747 33.528858 l
53.2747 26.148399 l
47.033298 26.148399 l
h
f
Q
q
45.570301 30.4646 m
45.773701 30.4907 45.909801 30.5755 45.978699 30.719 c
46.018101 30.797199 46.0378 30.9097 46.0378 31.056499 c
46.0378 31.356501 45.929501 31.573299 45.713001 31.707001 c
45.499802 31.844 45.1931 31.9125 44.7929 31.9125 c
44.330399 31.9125 44.002399 31.7885 43.8088 31.540701 c
43.7006 31.403799 43.6301 31.1999 43.597301 30.9293 c
42.770599 30.9293 l
42.786999 31.5749 42.997002 32.0233 43.400398 32.274399 c
43.807201 32.528759 44.277901 32.65593 44.812599 32.65593 c
45.432598 32.65593 45.9361 32.53854 46.3232 32.303799 c
46.706902 32.069 46.8988 31.7038 46.8988 31.208099 c
46.8988 28.190201 l
46.8988 28.098801 46.916901 28.025499 46.952999 27.969999 c
46.992298 27.9146 47.072701 27.8869 47.194099 27.8869 c
47.233398 27.8869 47.277699 27.8885 47.3269 27.8918 c
47.376099 27.8983 47.4286 27.9065 47.484402 27.916201 c
47.484402 27.265699 l
47.3466 27.226601 47.2416 27.202101 47.169498 27.192301 c
47.097301 27.182501 46.998901 27.177601 46.874199 27.177601 c
46.569199 27.177601 46.347801 27.285299 46.209999 27.5005 c
46.137798 27.614599 46.087002 27.775999 46.057499 27.984699 c
45.876999 27.749901 45.617901 27.546101 45.279999 27.373301 c
44.9422 27.2005 44.569901 27.1141 44.163101 27.1141 c
43.674301 27.1141 43.274101 27.260799 42.962502 27.5543 c
42.654202 27.851 42.5 28.2211 42.5 28.6646 c
42.5 29.150499 42.6525 29.5271 42.9576 29.7945 c
43.262699 30.061899 43.662899 30.226601 44.158199 30.2885 c
45.570301 30.4646 l
h
43.424999 28.6842 m
43.424999 28.4298 43.518501 28.2293 43.705502 28.0825 c
43.892502 27.935801 44.113899 27.8624 44.369801 27.8624 c
44.6814 27.8624 44.9832 27.9342 45.275101 28.0777 c
45.7672 28.315701 46.013199 28.7054 46.013199 29.2467 c
46.013199 29.9559 l
45.9049 29.8874 45.765499 29.8304 45.594898 29.7847 c
45.4244 29.7391 45.257099 29.706499 45.093102 29.686899 c
44.556702 29.618401 l
44.235298 29.576 43.994202 29.509199 43.833401 29.4179 c
43.561199 29.264601 43.424999 29.02 43.424999 28.6842 c
h
W*
0 0 132 43 rc
41.5 33.65593 m
48.484402 33.65593 l
48.484402 26.1141 l
41.5 26.1141 l
h
f
Q
q
107.987 12.5357 m
107.987 21.0289 l
106.392 21.0289 l
106.392 23.217699 l
112.083 23.217699 l
112.083 21.0289 l
110.674 21.0289 l
110.674 12.5357 l
112.083 12.5357 l
112.083 10.3469 l
106.392 10.3469 l
106.392 12.5357 l
107.987 12.5357 l
h
W
0 0 132 43 rc
105.392 24.217699 m
113.083 24.217699 l
113.083 9.3469 l
105.392 9.3469 l
h
f
ep
end
%%Trailer
%%EOF

%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.6.1 (Build 23G93) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
30.349701 18.342501 m
26.8836 15.5357 21.9266 15.5357 18.460501 18.342501 c
19.800699 19.9974 l
22.485399 17.8234 26.3248 17.8234 29.009501 19.9974 c
30.349701 18.342501 l
h
W
0 0 132 43 rc
17.460501 20.9974 m
31.349701 20.9974 l
31.349701 14.5357 l
17.460501 14.5357 l
h
f
Q
q
19.903999 21.986601 2.1296 2.8769 rc
18.903999 25.863501 m
23.0336 25.863501 l
23.0336 20.986601 l
18.903999 20.986601 l
h
f
Q
q
26.511999 21.986601 2.1294999 2.8769 rc
25.511999 25.863501 m
29.6415 25.863501 l
29.6415 20.986601 l
25.511999 20.986601 l
h
f
Q
q
24 9.5 m
30.351299 9.5 35.5 14.6487 35.5 21 c
35.5 27.351299 30.351299 32.5 24 32.5 c
17.648701 32.5 12.5 27.351299 12.5 21 c
12.5 14.6487 17.648701 9.5 24 9.5 c
h
24 11.6295 m
29.1752 11.6295 33.370499 15.8248 33.370499 21 c
33.370499 26.1752 29.1752 30.370501 24 30.370501 c
18.8248 30.370501 14.6295 26.1752 14.6295 21 c
14.6295 15.8248 18.8248 11.6295 24 11.6295 c
h
W*
0 0 132 43 rc
11.5 33.5 m
36.5 33.5 l
36.5 8.5 l
11.5 8.5 l
h
f
Q
q
82.474998 31.4918 m
82.175102 31.2407 82.025101 30.7663 82.025101 30.068501 c
82.025101 27.290199 l
81.135101 27.290199 l
81.135101 34.5 l
82.025101 34.5 l
82.025101 31.819599 l
82.236099 32.083698 82.425598 32.2696 82.593697 32.377201 c
82.880501 32.563042 83.238098 32.655972 83.666603 32.655972 c
84.434601 32.655972 84.955399 32.390202 85.228996 31.8587 c
85.377403 31.568501 85.4515 31.165701 85.4515 30.650499 c
85.4515 27.290199 l
84.536797 27.290199 l
84.536797 30.591801 l
84.536797 30.976601 84.487396 31.258699 84.388496 31.438 c
84.226997 31.725 83.923698 31.8685 83.478699 31.8685 c
83.109596 31.8685 82.775002 31.742901 82.474998 31.4918 c
h
W
0 0 132 43 rc
80.135101 35.5 m
86.4515 35.5 l
86.4515 26.290199 l
80.135101 26.290199 l
h
f
Q
q
104.092 30.719 m
104.022 30.5755 103.886 30.4907 103.681 30.4646 c
102.262 30.2885 l
101.764 30.226601 101.362 30.061899 101.056 29.7945 c
100.749 29.5271 100.596 29.150499 100.596 28.6646 c
100.596 28.2211 100.751 27.851 101.061 27.5543 c
101.374 27.260799 101.776 27.1141 102.267 27.1141 c
102.676 27.1141 103.05 27.2005 103.389 27.373301 c
103.729 27.546101 103.989 27.749901 104.171 27.984699 c
104.2 27.775999 104.251 27.614599 104.324 27.5005 c
104.462 27.285299 104.685 27.177601 104.991 27.177601 c
105.117 27.177601 105.216 27.182501 105.288 27.192301 c
105.361 27.202101 105.466 27.226601 105.604 27.265699 c
105.604 27.916201 l
105.548 27.9065 105.496 27.8983 105.446 27.8918 c
105.397 27.8885 105.352 27.8869 105.313 27.8869 c
105.191 27.8869 105.11 27.9146 105.07 27.969999 c
105.034 28.025499 105.016 28.098801 105.016 28.190201 c
105.016 31.208099 l
105.016 31.7038 104.823 32.069 104.438 32.303799 c
104.049 32.53854 103.543 32.65593 102.92 32.65593 c
102.382 32.65593 101.909 32.528759 101.501 32.274399 c
101.095 32.0233 100.884 31.5749 100.868 30.9293 c
101.698 30.9293 l
101.731 31.1999 101.802 31.403799 101.911 31.540701 c
102.106 31.7885 102.435 31.9125 102.9 31.9125 c
103.302 31.9125 103.61 31.844 103.825 31.707001 c
104.042 31.573299 104.151 31.356501 104.151 31.056499 c
104.151 30.9097 104.131 30.797199 104.092 30.719 c
h
101.807 28.0825 m
101.619 28.2293 101.525 28.4298 101.525 28.6842 c
101.525 29.02 101.662 29.264601 101.936 29.4179 c
102.097 29.509199 102.34 29.576 102.663 29.618401 c
103.202 29.686899 l
103.366 29.706499 103.534 29.7391 103.706 29.7847 c
103.877 29.8304 104.017 29.8874 104.126 29.9559 c
104.126 29.2467 l
104.126 28.7054 103.879 28.315701 103.384 28.0777 c
103.091 27.9342 102.788 27.8624 102.475 27.8624 c
102.218 27.8624 101.995 27.935801 101.807 28.0825 c
h
W*
0 0 132 43 rc
99.596001 33.65593 m
106.604 33.65593 l
106.604 26.1141 l
99.596001 26.1141 l
h
f
Q
q
108.121 32.445702 m
107.841 32.312 107.575 32.0919 107.325 31.785299 c
107.325 32.52882 l
106.479 32.52882 l
106.479 27.290199 l
107.369 27.290199 l
107.369 30.034201 l
107.369 30.3766 107.391 30.639099 107.434 30.821699 c
107.48 31.007601 107.577 31.187 107.725 31.3598 c
107.91 31.575001 108.124 31.7185 108.368 31.790199 c
108.503 31.8326 108.676 31.8538 108.887 31.8538 c
109.303 31.8538 109.589 31.6908 109.747 31.3647 c
109.843 31.169001 109.891 30.9114 109.891 30.5919 c
109.891 27.290199 l
110.796 27.290199 l
110.796 30.6506 l
110.796 31.178801 110.723 31.584801 110.578 31.8685 c
110.314 32.387001 109.807 32.64621 109.055 32.64621 c
108.712 32.64621 108.401 32.579369 108.121 32.445702 c
h
W
0 0 132 43 rc
105.479 33.64621 m
111.796 33.64621 l
111.796 26.290199 l
105.479 26.290199 l
h
f
Q
q
106.067 10.3499 m
101.461 23.217699 l
98.389801 23.217699 l
93.7481 10.3499 l
96.5896 10.3499 l
97.4897 12.995 l
102.281 12.995 l
103.12 10.3499 l
106.067 10.3499 l
h
99.898804 20.2757 m
101.522 15.2124 l
98.222099 15.2124 l
99.898804 20.2757 l
h
W*
0 0 132 43 rc
92.7481 24.217699 m
107.067 24.217699 l
107.067 9.3499002 l
92.7481 9.3499002 l
h
f
Q
q
77.954697 20.0749 m
79.219498 20.0749 80.207802 19.623899 80.919701 18.7218 c
81.637398 17.8197 81.996201 16.655701 81.996201 15.2298 c
81.996201 13.7516 81.643303 12.5265 80.937302 11.5546 c
80.2314 10.5827 79.246002 10.0967 77.981102 10.0967 c
77.186897 10.0967 76.548599 10.2538 76.0662 10.5681 c
75.778 10.7543 75.466202 11.0803 75.130798 11.5459 c
75.130798 10.3499 l
72.6688 10.3499 l
72.6688 23.200199 l
75.175003 23.200199 l
75.175003 18.625799 l
75.492599 19.0681 75.842697 19.4056 76.225098 19.638399 c
76.678101 19.929399 77.254601 20.0749 77.954697 20.0749 c
h
77.310501 12.1482 m
77.957603 12.1482 78.460602 12.4072 78.819504 12.9252 c
79.178299 13.4431 79.357697 14.1241 79.357697 14.968 c
79.357697 15.6431 79.269501 16.201799 79.093002 16.6441 c
78.757698 17.4821 78.139999 17.901199 77.239899 17.901199 c
76.328003 17.901199 75.7015 17.4909 75.360298 16.6703 c
75.1838 16.233801 75.095497 15.6692 75.095497 14.9767 c
75.095497 14.1619 75.277901 13.4868 75.6427 12.9514 c
76.007401 12.4159 76.563301 12.1482 77.310501 12.1482 c
h
W*
0 0 132 43 rc
71.6688 24.200199 m
82.996201 24.200199 l
82.996201 9.0966997 l
71.6688 9.0966997 l
h
f
Q
q
64.6138 10.83 m
64.331497 11.1152 64.1903 11.5546 64.1903 12.1482 c
64.1903 18.005899 l
62.848999 18.005899 l
62.848999 19.778099 l
64.1903 19.778099 l
64.1903 22.431999 l
66.678802 22.431999 l
66.678802 19.778099 l
68.2407 19.778099 l
68.2407 18.005899 l
66.678802 18.005899 l
66.678802 12.9775 l
66.678802 12.5876 66.728798 12.3432 66.828796 12.2442 c
66.928802 12.1511 67.234703 12.1046 67.746498 12.1046 c
67.984802 12.1046 l
68.072998 12.1104 68.158302 12.1162 68.2407 12.122 c
68.2407 10.2626 l
67.0494 10.2189 l
65.861 10.1782 65.049202 10.3819 64.6138 10.83 c
h
W
0 0 132 43 rc
61.848999 23.431999 m
69.2407 23.431999 l
69.2407 9.1781998 l
61.848999 9.1781998 l
h
f
Q
q
62.751202 15.0902 m
62.751202 13.6934 62.345299 12.4974 61.533401 11.5022 c
60.7216 10.5128 59.489101 10.0181 57.835999 10.0181 c
56.182899 10.0181 54.950401 10.5128 54.1385 11.5022 c
53.326698 12.4974 52.920799 13.6934 52.920799 15.0902 c
52.920799 16.463699 53.326698 17.653799 54.1385 18.6607 c
54.950401 19.6675 56.182899 20.1709 57.835999 20.1709 c
59.489101 20.1709 60.7216 19.6675 61.533401 18.6607 c
62.345299 17.653799 62.751202 16.463699 62.751202 15.0902 c
h
57.827099 12.1046 m
58.5625 12.1046 59.1273 12.3635 59.5214 12.8815 c
59.9156 13.3995 60.112701 14.1357 60.112701 15.0902 c
60.112701 16.0446 59.9156 16.777901 59.5214 17.2901 c
59.1273 17.8081 58.5625 18.066999 57.827099 18.066999 c
57.091801 18.066999 56.524101 17.8081 56.124001 17.2901 c
55.7299 16.777901 55.532799 16.0446 55.532799 15.0902 c
55.532799 14.1357 55.7299 13.3995 56.124001 12.8815 c
56.524101 12.3635 57.091801 12.1046 57.827099 12.1046 c
h
W*
0 0 132 43 rc
51.920799 21.1709 m
63.751202 21.1709 l
63.751202 9.0180998 l
51.920799 9.0180998 l
h
f
Q
q
50.952202 19.315399 m
50.322701 19.833401 49.510899 20.0924 48.516701 20.0924 c
47.7225 20.0924 47.066502 19.900299 46.548801 19.516199 c
46.260601 19.3009 45.954601 18.948799 45.6311 18.4599 c
45.6311 19.8479 l
43.204399 19.8479 l
43.204399 10.3499 l
45.710499 10.3499 l
45.710499 15.5005 l
45.710499 16.088301 45.7929 16.571301 45.9576 16.9496 c
46.275299 17.665501 46.8606 18.023399 47.7136 18.023399 c
48.407799 18.023399 48.878502 17.778999 49.125599 17.2901 c
49.260899 17.0224 49.328499 16.6383 49.328499 16.1378 c
49.328499 10.3499 l
51.905201 10.3499 l
51.905201 16.757601 l
51.905201 17.9506 51.587601 18.803301 50.952202 19.315399 c
h
W
0 0 132 43 rc
42.204399 21.0924 m
52.905201 21.0924 l
52.905201 9.3499002 l
42.204399 9.3499002 l
h
f
Q
q
83.7883 8.5079002 m
83.470596 8.5253 l
83.470596 6.5349002 l
83.741203 6.5174999 83.944199 6.5086999 84.079498 6.5086999 c
84.214798 6.5029001 84.394302 6.5 84.617798 6.5 c
85.729698 6.5 86.470901 6.7182002 86.841599 7.1546998 c
87.212196 7.5854001 87.715202 8.7027998 88.350502 10.507 c
91.650902 19.8654 l
88.977097 19.8654 l
86.9916 12.8466 l
84.891403 19.8654 l
82.094002 19.8654 l
85.623802 9.9308004 l
85.647301 9.8610001 85.594398 9.6688995 85.464996 9.3547001 c
85.3414 9.0403996 85.2061 8.8338003 85.058998 8.7348003 c
84.906097 8.6301003 84.717796 8.5632 84.494301 8.5340996 c
84.270699 8.5050001 84.0354 8.4961996 83.7883 8.5079002 c
h
W
0 0 132 43 rc
81.094002 20.8654 m
92.650902 20.8654 l
92.650902 5.5 l
81.094002 5.5 l
h
f
Q
q
93.861504 32.347801 m
93.690102 32.230499 93.498901 32.042999 93.287903 31.785299 c
93.287903 32.52882 l
92.407799 32.52882 l
92.407799 27.290199 l
93.297798 27.290199 l
93.297798 30.068501 l
93.297798 30.7435 93.434601 31.209801 93.708199 31.4674 c
93.9851 31.725 94.291603 31.8538 94.6278 31.8538 c
94.997002 31.8538 95.249199 31.731501 95.3843 31.487 c
95.470001 31.3239 95.512901 31.064699 95.512901 30.7092 c
95.512901 27.290199 l
96.417702 27.290199 l
96.417702 30.3375 l
96.417702 30.878799 96.5429 31.2652 96.793404 31.496799 c
97.047302 31.7283 97.3489 31.844 97.698303 31.844 c
97.952103 31.844 98.166298 31.778799 98.341003 31.648399 c
98.518997 31.5179 98.608002 31.278299 98.608002 30.929399 c
98.608002 27.290199 l
99.5326 27.290199 l
99.5326 30.7777 l
99.5326 31.240801 99.463402 31.609301 99.324898 31.8832 c
99.067802 32.391899 98.583298 32.64621 97.8713 32.64621 c
97.538399 32.64621 97.238403 32.57774 96.971397 32.4408 c
96.704399 32.307098 96.472099 32.099998 96.2743 31.819599 c
96.155602 32.047798 96.023804 32.220699 95.8787 32.3381 c
95.621597 32.543499 95.282097 32.64621 94.860199 32.64621 c
94.487701 32.64621 94.1548 32.546761 93.861504 32.347801 c
h
W
0 0 132 43 rc
91.407799 33.64621 m
100.5326 33.64621 l
100.5326 26.290199 l
91.407799 26.290199 l
h
f
Q
q
87.7901 28.3957 m
87.704399 28.5653 87.661598 28.783701 87.661598 29.0511 c
87.661598 32.528858 l
86.751801 32.528858 l
86.751801 28.968 l
86.751801 28.5212 86.825996 28.1642 86.974297 27.896799 c
87.247902 27.3979 87.7621 27.148399 88.516998 27.148399 c
89.001503 27.148399 89.413498 27.2854 89.752998 27.559299 c
89.9244 27.696199 90.067802 27.864201 90.183197 28.063101 c
90.173302 27.2903 l
91.013802 27.2903 l
91.013802 32.528858 l
90.123901 32.528858 l
90.123901 29.955999 l
90.123901 29.444099 90.062897 29.0413 89.940903 28.7479 c
89.716797 28.200001 89.294899 27.9261 88.675201 27.9261 c
88.243401 27.9261 87.948402 28.0826 87.7901 28.3957 c
h
W
0 0 132 43 rc
85.751801 33.528858 m
92.013802 33.528858 l
92.013802 26.148399 l
85.751801 26.148399 l
h
f
Q
q
75.132599 28.263599 m
76.561501 32.528858 l
77.545403 32.528858 l
77.420197 32.193001 77.141602 31.426701 76.709801 30.2299 c
76.386803 29.329901 76.116501 28.596201 75.899002 28.028799 c
75.384804 26.6919 75.022202 25.876699 74.811203 25.5832 c
74.600304 25.2897 74.237701 25.143 73.723503 25.143 c
73.598198 25.143 73.500999 25.1479 73.431702 25.1576 c
73.365799 25.1674 73.283401 25.1854 73.184502 25.211399 c
73.184502 26.013599 l
73.3395 25.971201 73.4515 25.945101 73.520699 25.9354 c
73.589996 25.9256 73.650902 25.9207 73.703697 25.9207 c
73.8685 25.9207 73.9888 25.9484 74.064598 26.003799 c
74.1437 26.056 74.209702 26.121201 74.262398 26.199499 c
74.2789 26.225599 74.338203 26.359301 74.440399 26.600599 c
74.542603 26.8419 74.616699 27.0212 74.662903 27.138599 c
72.704903 32.528858 l
73.7136 32.528858 l
75.132599 28.263599 l
h
W
0 0 132 43 rc
71.704903 33.528858 m
78.545403 33.528858 l
78.545403 24.143 l
71.704903 24.143 l
h
f
Q
q
68.897797 27.4125 m
68.733002 27.5266 68.556602 27.7092 68.368698 27.9603 c
68.368698 27.290199 l
67.547997 27.290199 l
67.547997 34.5 l
68.4132 34.5 l
68.4132 31.8929 l
68.607697 32.144001 68.840103 32.334801 69.110397 32.465199 c
69.380699 32.5989 69.674004 32.665749 69.990501 32.665749 c
70.649696 32.665749 71.183701 32.4408 71.5924 31.9907 c
72.004501 31.544001 72.210503 30.883699 72.210503 30.0098 c
72.210503 29.181499 72.007797 28.4935 71.602303 27.945601 c
71.196899 27.3978 70.634903 27.123899 69.916298 27.123899 c
69.514198 27.123899 69.174698 27.2201 68.897797 27.4125 c
h
69.8619 27.9016 m
70.343201 27.9016 70.702499 28.0907 70.939796 28.469 c
71.180397 28.8473 71.300697 29.346201 71.300697 29.9657 c
71.300697 30.5168 71.180397 30.9734 70.939796 31.3353 c
70.702499 31.6973 70.351402 31.878201 69.886597 31.878201 c
69.481201 31.878201 69.125198 31.7299 68.818703 31.4331 c
68.515404 31.1364 68.3638 30.647301 68.3638 29.9657 c
68.3638 29.473301 68.426399 29.0739 68.551697 28.767401 c
68.785698 28.190201 69.222504 27.9016 69.8619 27.9016 c
h
W*
0 0 132 43 rc
66.547997 35.5 m
73.210503 35.5 l
73.210503 26.123899 l
66.547997 26.123899 l
h
f
Q
q
61.0313 32.62167 m
61.446602 32.62167 61.8092 32.520592 62.118999 32.318401 c
62.287102 32.2043 62.4585 32.037998 62.633202 31.8195 c
62.633202 32.479801 l
63.453999 32.479801 l
63.453999 27.7157 l
63.453999 27.050501 63.355099 26.525499 63.157299 26.140699 c
62.7882 25.4298 62.091 25.0744 61.065899 25.0744 c
60.495602 25.0744 60.015999 25.2015 59.627102 25.4559 c
59.238098 25.707001 59.020599 26.1015 58.9744 26.639601 c
59.8792 26.639601 l
59.9221 26.4048 60.007801 26.223801 60.136398 26.0966 c
60.337399 25.900999 60.6539 25.8032 61.085701 25.8032 c
61.768002 25.8032 62.2146 26.041201 62.425598 26.5173 c
62.5508 26.797701 62.608501 27.2983 62.598598 28.0189 c
62.420601 27.751499 62.206402 27.552601 61.955898 27.422199 c
61.705299 27.2918 61.3741 27.2265 60.962101 27.2265 c
60.3885 27.2265 59.885799 27.427099 59.453999 27.828199 c
59.025501 28.2325 58.811298 28.899401 58.811298 29.828699 c
58.811298 30.7059 59.027199 31.390699 59.459 31.883101 c
59.8941 32.3755 60.418201 32.62167 61.0313 32.62167 c
h
62.633202 29.9314 m
62.633202 30.5804 62.4981 31.0613 62.227798 31.374399 c
61.9575 31.687401 61.613098 31.844 61.194401 31.844 c
60.568199 31.844 60.139599 31.553699 59.908901 30.973301 c
59.786999 30.6635 59.726002 30.2575 59.726002 29.7554 c
59.726002 29.1651 59.846298 28.715099 60.086899 28.405399 c
60.330799 28.098801 60.6572 27.945601 61.065899 27.945601 c
61.705299 27.945601 62.1553 28.2309 62.415699 28.8015 c
62.560699 29.124399 62.633202 29.500999 62.633202 29.9314 c
h
W*
0 0 132 43 rc
57.811298 33.62167 m
64.454002 33.62167 l
64.454002 24.0744 l
57.811298 24.0744 l
h
f
Q
q
54.4799 30.821699 m
54.437 30.639099 54.4156 30.3766 54.4156 30.034201 c
54.4156 27.290199 l
53.5256 27.290199 l
53.5256 32.52882 l
54.371101 32.52882 l
54.371101 31.785299 l
54.621601 32.0919 54.887001 32.312 55.167099 32.445702 c
55.4473 32.579369 55.758801 32.64621 56.101601 32.64621 c
56.853199 32.64621 57.360802 32.387001 57.6245 31.8685 c
57.769501 31.584801 57.841999 31.178801 57.841999 30.6506 c
57.841999 27.290199 l
56.937199 27.290199 l
56.937199 30.5919 l
56.937199 30.9114 56.8894 31.169001 56.7938 31.3647 c
56.635601 31.6908 56.348801 31.8538 55.933498 31.8538 c
55.722599 31.8538 55.5495 31.8326 55.414398 31.790199 c
55.170399 31.7185 54.9562 31.575001 54.771599 31.3598 c
54.623299 31.187 54.526001 31.007601 54.4799 30.821699 c
h
W
0 0 132 43 rc
52.5256 33.64621 m
58.841999 33.64621 l
58.841999 26.290199 l
52.5256 26.290199 l
h
f
Q
q
48.092098 27.896799 m
47.943802 28.1642 47.869598 28.5212 47.869598 28.968 c
47.869598 32.528858 l
48.7794 32.528858 l
48.7794 29.0511 l
48.7794 28.783701 48.822201 28.5653 48.907902 28.3957 c
49.0662 28.0826 49.361198 27.9261 49.792999 27.9261 c
50.412701 27.9261 50.834599 28.200001 51.058701 28.7479 c
51.180698 29.0413 51.241699 29.444099 51.241699 29.955999 c
51.241699 32.528858 l
52.131599 32.528858 l
52.131599 27.2903 l
51.2911 27.2903 l
51.300999 28.063101 l
51.1856 27.864201 51.042198 27.696199 50.8708 27.559299 c
50.5313 27.2854 50.119301 27.148399 49.6348 27.148399 c
48.879902 27.148399 48.3657 27.3979 48.092098 27.896799 c
h
W
0 0 132 43 rc
46.869598 33.528858 m
53.131599 33.528858 l
53.131599 26.148399 l
46.869598 26.148399 l
h
f
Q
q
43.3554 28.933599 m
43.381699 28.6401 43.455898 28.4151 43.5779 28.2586 c
43.801998 27.974899 44.191002 27.833 44.744701 27.833 c
45.074299 27.833 45.364399 27.903099 45.614899 28.043301 c
45.865398 28.1868 45.9907 28.4069 45.9907 28.703699 c
45.9907 28.928699 45.890202 29.099899 45.689098 29.2173 c
45.560501 29.289 45.306702 29.3722 44.9277 29.4667 c
44.2206 29.642799 l
43.769001 29.7537 43.4361 29.8776 43.221901 30.014601 c
42.8395 30.2526 42.6483 30.5819 42.6483 31.0026 c
42.6483 31.498301 42.827999 31.8993 43.187302 32.205898 c
43.549801 32.51239 44.035999 32.665649 44.645802 32.665649 c
45.443501 32.665649 46.0187 32.434101 46.371399 31.9711 c
46.592201 31.677601 46.699402 31.3613 46.692799 31.0222 c
45.8522 31.0222 l
45.8358 31.2211 45.7649 31.4021 45.639599 31.5651 c
45.435299 31.7966 45.080898 31.912399 44.576599 31.912399 c
44.240398 31.912399 43.984901 31.848801 43.8102 31.7216 c
43.638802 31.5944 43.553101 31.4265 43.553101 31.2178 c
43.553101 30.989599 43.666901 30.8069 43.894299 30.67 c
44.0261 30.588499 44.2206 30.516701 44.477699 30.4548 c
45.066101 30.312901 l
45.705601 30.1597 46.134102 30.011299 46.351601 29.8678 c
46.697701 29.642799 46.8708 29.289 46.8708 28.8064 c
46.8708 28.340099 46.691101 27.937401 46.331799 27.5982 c
45.975899 27.2591 45.431999 27.0895 44.700199 27.0895 c
43.912399 27.0895 43.353699 27.2656 43.024101 27.6178 c
42.6978 27.9732 42.523102 28.4118 42.5 28.933599 c
43.3554 28.933599 l
h
W
0 0 132 43 rc
41.5 33.665649 m
47.8708 33.665649 l
47.8708 26.0895 l
41.5 26.0895 l
h
f
Q
q
108.384 21.0289 m
108.384 12.5357 l
106.782 12.5357 l
106.782 10.3469 l
112.5 10.3469 l
112.5 12.5357 l
111.084 12.5357 l
111.084 21.0289 l
112.5 21.0289 l
112.5 23.217699 l
106.782 23.217699 l
106.782 21.0289 l
108.384 21.0289 l
h
W
0 0 132 43 rc
105.782 24.217699 m
113.5 24.217699 l
113.5 9.3469 l
105.782 9.3469 l
h
f
ep
end
%%Trailer
%%EOF

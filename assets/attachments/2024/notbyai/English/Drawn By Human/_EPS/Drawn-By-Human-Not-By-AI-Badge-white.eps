%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.6.1 (Build 23G93) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
30.349701 18.342501 m
26.8836 15.5357 21.9266 15.5357 18.460501 18.342501 c
19.800699 19.9974 l
22.485399 17.8234 26.3248 17.8234 29.009501 19.9974 c
30.349701 18.342501 l
h
W
0 0 132 43 rc
17.460501 20.9974 m
31.349701 20.9974 l
31.349701 14.5357 l
17.460501 14.5357 l
h
f
Q
q
19.903999 21.986601 2.1296 2.8769 rc
18.903999 25.863501 m
23.0336 25.863501 l
23.0336 20.986601 l
18.903999 20.986601 l
h
f
Q
q
26.511999 21.986601 2.1294999 2.8769 rc
25.511999 25.863501 m
29.6415 25.863501 l
29.6415 20.986601 l
25.511999 20.986601 l
h
f
Q
q
24 9.5 m
30.351299 9.5 35.5 14.6487 35.5 21 c
35.5 27.351299 30.351299 32.5 24 32.5 c
17.648701 32.5 12.5 27.351299 12.5 21 c
12.5 14.6487 17.648701 9.5 24 9.5 c
h
24 11.6295 m
29.1752 11.6295 33.370499 15.8248 33.370499 21 c
33.370499 26.1752 29.1752 30.370501 24 30.370501 c
18.8248 30.370501 14.6295 26.1752 14.6295 21 c
14.6295 15.8248 18.8248 11.6295 24 11.6295 c
h
W*
0 0 132 43 rc
11.5 33.5 m
36.5 33.5 l
36.5 8.5 l
11.5 8.5 l
h
f
Q
q
45.799099 32.367401 m
45.525398 32.536949 45.185799 32.621731 44.780201 32.621731 c
44.048199 32.621731 43.484299 32.341301 43.0886 31.780399 c
42.696201 31.222799 42.5 30.5625 42.5 29.7994 c
42.5 28.9842 42.716 28.3304 43.147999 27.837999 c
43.579899 27.3489 44.091 27.1043 44.681301 27.1043 c
45.047298 27.1043 45.372101 27.1761 45.655701 27.3195 c
45.939201 27.462999 46.184898 27.696199 46.392601 28.018999 c
46.392601 27.290199 l
47.193901 27.290199 l
47.193901 34.5 l
46.3382 34.5 l
46.3382 31.8538 l
46.1371 32.0984 45.957401 32.2696 45.799099 32.367401 c
h
43.8008 28.4396 m
43.560101 28.8179 43.4398 29.2875 43.4398 29.848301 c
43.4398 30.507 43.5783 31.006001 43.855301 31.3451 c
44.135502 31.6842 44.499901 31.8538 44.948399 31.8538 c
45.3507 31.8538 45.688599 31.694 45.962299 31.374399 c
46.236 31.0581 46.372898 30.569 46.372898 29.907 c
46.372898 29.2516 46.2393 28.747801 45.972198 28.395599 c
45.708401 28.0467 45.370399 27.872299 44.958302 27.872299 c
44.427399 27.872299 44.041599 28.061399 43.8008 28.4396 c
h
W*
0 0 132 43 rc
41.5 35.5 m
48.193901 35.5 l
48.193901 26.1043 l
41.5 26.1043 l
h
f
Q
q
88.168198 31.4918 m
87.868103 31.2407 87.718102 30.7663 87.718102 30.068501 c
87.718102 27.290199 l
86.827797 27.290199 l
86.827797 34.5 l
87.718102 34.5 l
87.718102 31.819599 l
87.9291 32.083698 88.118698 32.2696 88.286903 32.377201 c
88.573799 32.563042 88.931503 32.655972 89.360199 32.655972 c
90.128502 32.655972 90.649498 32.390202 90.923203 31.8587 c
91.071602 31.568501 91.145798 31.165701 91.145798 30.650499 c
91.145798 27.290199 l
90.230698 27.290199 l
90.230698 30.591801 l
90.230698 30.976601 90.181297 31.258699 90.082298 31.438 c
89.920799 31.725 89.617401 31.8685 89.172203 31.8685 c
88.802902 31.8685 88.468201 31.742901 88.168198 31.4918 c
h
W
0 0 132 43 rc
85.827797 35.5 m
92.145798 35.5 l
92.145798 26.290199 l
85.827797 26.290199 l
h
f
Q
q
109.382 30.4646 m
109.587 30.4907 109.724 30.5755 109.793 30.719 c
109.832 30.797199 109.852 30.9097 109.852 31.056499 c
109.852 31.356501 109.743 31.573299 109.526 31.707001 c
109.311 31.844 109.003 31.9125 108.601 31.9125 c
108.136 31.9125 107.806 31.7885 107.612 31.540701 c
107.503 31.403799 107.432 31.1999 107.399 30.9293 c
106.568 30.9293 l
106.584 31.5749 106.795 32.0233 107.201 32.274399 c
107.61 32.528759 108.083 32.65593 108.621 32.65593 c
109.244 32.65593 109.75 32.53854 110.139 32.303799 c
110.525 32.069 110.718 31.7038 110.718 31.208099 c
110.718 28.190201 l
110.718 28.098801 110.736 28.025499 110.772 27.969999 c
110.812 27.9146 110.893 27.8869 111.015 27.8869 c
111.054 27.8869 111.099 27.8885 111.148 27.8918 c
111.198 27.8983 111.25 27.9065 111.306 27.916201 c
111.306 27.265699 l
111.168 27.226601 111.062 27.202101 110.99 27.192301 c
110.917 27.182501 110.818 27.177601 110.693 27.177601 c
110.386 27.177601 110.164 27.285299 110.025 27.5005 c
109.953 27.614599 109.902 27.775999 109.872 27.984699 c
109.691 27.749901 109.43 27.546101 109.09 27.373301 c
108.751 27.2005 108.377 27.1141 107.968 27.1141 c
107.476 27.1141 107.074 27.260799 106.761 27.5543 c
106.451 27.851 106.296 28.2211 106.296 28.6646 c
106.296 29.150499 106.449 29.5271 106.756 29.7945 c
107.063 30.061899 107.465 30.226601 107.963 30.2885 c
109.382 30.4646 l
h
107.226 28.6842 m
107.226 28.4298 107.32 28.2293 107.508 28.0825 c
107.696 27.935801 107.918 27.8624 108.175 27.8624 c
108.489 27.8624 108.792 27.9342 109.085 28.0777 c
109.58 28.315701 109.827 28.7054 109.827 29.2467 c
109.827 29.9559 l
109.719 29.8874 109.578 29.8304 109.407 29.7847 c
109.236 29.7391 109.067 29.706499 108.902 29.686899 c
108.363 29.618401 l
108.04 29.576 107.798 29.509199 107.636 29.4179 c
107.363 29.264601 107.226 29.02 107.226 28.6842 c
h
W*
0 0 132 43 rc
105.296 33.65593 m
112.306 33.65593 l
112.306 26.1141 l
105.296 26.1141 l
h
f
Q
q
113.137 30.821699 m
113.094 30.639099 113.072 30.3766 113.072 30.034201 c
113.072 27.290199 l
112.182 27.290199 l
112.182 32.52882 l
113.028 32.52882 l
113.028 31.785299 l
113.278 32.0919 113.544 32.312 113.824 32.445702 c
114.104 32.579369 114.416 32.64621 114.759 32.64621 c
115.511 32.64621 116.019 32.387001 116.282 31.8685 c
116.427 31.584801 116.5 31.178801 116.5 30.6506 c
116.5 27.290199 l
115.595 27.290199 l
115.595 30.5919 l
115.595 30.9114 115.547 31.169001 115.451 31.3647 c
115.293 31.6908 115.006 31.8538 114.591 31.8538 c
114.38 31.8538 114.207 31.8326 114.071 31.790199 c
113.827 31.7185 113.613 31.575001 113.428 31.3598 c
113.28 31.187 113.183 31.007601 113.137 30.821699 c
h
W
0 0 132 43 rc
111.182 33.64621 m
117.5 33.64621 l
117.5 26.290199 l
111.182 26.290199 l
h
f
Q
q
93.816597 10.3499 m
98.459999 23.217699 l
101.532 23.217699 l
106.14 10.3499 l
103.192 10.3499 l
102.353 12.995 l
97.559601 12.995 l
96.659203 10.3499 l
93.816597 10.3499 l
h
99.969597 20.2757 m
98.292297 15.2124 l
101.594 15.2124 l
99.969597 20.2757 l
h
W*
0 0 132 43 rc
92.816597 24.217699 m
107.14 24.217699 l
107.14 9.3499002 l
92.816597 9.3499002 l
h
f
Q
q
80.983299 18.7218 m
80.271202 19.623899 79.282501 20.0749 78.017197 20.0749 c
77.316803 20.0749 76.740097 19.929399 76.286903 19.638399 c
75.904404 19.4056 75.554199 19.0681 75.236397 18.625799 c
75.236397 23.200199 l
72.729301 23.200199 l
72.729301 10.3499 l
75.192299 10.3499 l
75.192299 11.5459 l
75.527702 11.0803 75.839699 10.7543 76.127998 10.5681 c
76.610603 10.2538 77.249199 10.0967 78.043701 10.0967 c
79.308998 10.0967 80.294701 10.5827 81.000999 11.5546 c
81.707199 12.5265 82.060303 13.7516 82.060303 15.2298 c
82.060303 16.655701 81.701302 17.8197 80.983299 18.7218 c
h
78.882301 12.9252 m
78.5233 12.4072 78.020103 12.1482 77.372704 12.1482 c
76.625298 12.1482 76.069199 12.4159 75.7043 12.9514 c
75.339401 13.4868 75.156998 14.1619 75.156998 14.9767 c
75.156998 15.6692 75.2453 16.233801 75.421799 16.6703 c
75.763199 17.4909 76.3899 17.901199 77.302101 17.901199 c
78.202599 17.901199 78.820503 17.4821 79.155998 16.6441 c
79.332497 16.201799 79.420799 15.6431 79.420799 14.968 c
79.420799 14.1241 79.241302 13.4431 78.882301 12.9252 c
h
W*
0 0 132 43 rc
71.729301 24.200199 m
83.060303 24.200199 l
83.060303 9.0966997 l
71.729301 9.0966997 l
h
f
Q
q
66.8871 12.2442 m
66.787003 12.3432 66.737 12.5876 66.737 12.9775 c
66.737 18.005899 l
68.2995 18.005899 l
68.2995 19.778099 l
66.737 19.778099 l
66.737 22.431999 l
64.247597 22.431999 l
64.247597 19.778099 l
62.9058 19.778099 l
62.9058 18.005899 l
64.247597 18.005899 l
64.247597 12.1482 l
64.247597 11.5546 64.388802 11.1152 64.671303 10.83 c
65.106796 10.3819 65.918999 10.1782 67.107803 10.2189 c
68.2995 10.2626 l
68.2995 12.122 l
68.217102 12.1162 68.131798 12.1104 68.043503 12.1046 c
67.805199 12.1046 l
67.293198 12.1046 66.987099 12.1511 66.8871 12.2442 c
h
W
0 0 132 43 rc
61.9058 23.431999 m
69.2995 23.431999 l
69.2995 9.1781998 l
61.9058 9.1781998 l
h
f
Q
q
61.589699 11.5022 m
62.401901 12.4974 62.807999 13.6934 62.807999 15.0902 c
62.807999 16.463699 62.401901 17.653799 61.589699 18.6607 c
60.777599 19.6675 59.544601 20.1709 57.8909 20.1709 c
56.237202 20.1709 55.0042 19.6675 54.192101 18.6607 c
53.379902 17.653799 52.973801 16.463699 52.973801 15.0902 c
52.973801 13.6934 53.379902 12.4974 54.192101 11.5022 c
55.0042 10.5128 56.237202 10.0181 57.8909 10.0181 c
59.544601 10.0181 60.777599 10.5128 61.589699 11.5022 c
h
59.577 12.8815 m
59.182701 12.3635 58.617699 12.1046 57.882099 12.1046 c
57.1464 12.1046 56.578499 12.3635 56.178299 12.8815 c
55.784 13.3995 55.586899 14.1357 55.586899 15.0902 c
55.586899 16.0446 55.784 16.777901 56.178299 17.2901 c
56.578499 17.8081 57.1464 18.066999 57.882099 18.066999 c
58.617699 18.066999 59.182701 17.8081 59.577 17.2901 c
59.971298 16.777901 60.168499 16.0446 60.168499 15.0902 c
60.168499 14.1357 59.971298 13.3995 59.577 12.8815 c
h
W*
0 0 132 43 rc
51.973801 21.1709 m
63.807999 21.1709 l
63.807999 9.0180998 l
51.973801 9.0180998 l
h
f
Q
q
48.5681 20.0924 m
49.562698 20.0924 50.374802 19.833401 51.004501 19.315399 c
51.640099 18.803301 51.957901 17.9506 51.957901 16.757601 c
51.957901 10.3499 l
49.380199 10.3499 l
49.380199 16.1378 l
49.380199 16.6383 49.3125 17.0224 49.1772 17.2901 c
48.93 17.778999 48.459202 18.023399 47.764702 18.023399 c
46.9114 18.023399 46.325802 17.665501 46.007999 16.9496 c
45.843201 16.571301 45.760799 16.088301 45.760799 15.5005 c
45.760799 10.3499 l
43.253799 10.3499 l
43.253799 19.8479 l
45.6814 19.8479 l
45.6814 18.4599 l
46.0051 18.948799 46.3111 19.3009 46.599499 19.516199 c
47.117401 19.900299 47.773602 20.0924 48.5681 20.0924 c
h
W
0 0 132 43 rc
42.253799 21.0924 m
52.957901 21.0924 l
52.957901 9.3499002 l
42.253799 9.3499002 l
h
f
Q
q
83.535202 8.5253 m
83.852997 8.5079002 l
84.100197 8.4961996 84.335602 8.5050001 84.559303 8.5340996 c
84.782898 8.5632 84.971199 8.6301003 85.124199 8.7348003 c
85.2714 8.8338003 85.4067 9.0403996 85.530296 9.3547001 c
85.659798 9.6688995 85.7127 9.8610001 85.689201 9.9308004 c
82.158096 19.8654 l
84.956497 19.8654 l
87.057503 12.8466 l
89.0438 19.8654 l
91.718597 19.8654 l
88.417 10.507 l
87.781403 8.7027998 87.278198 7.5854001 86.907402 7.1546998 c
86.536697 6.7182002 85.795097 6.5 84.6828 6.5 c
84.459198 6.5 84.279701 6.5029001 84.144302 6.5086999 c
84.009003 6.5086999 83.806 6.5174999 83.535202 6.5349002 c
83.535202 8.5253 l
h
W
0 0 132 43 rc
81.158096 20.8654 m
92.718597 20.8654 l
92.718597 5.5 l
81.158096 5.5 l
h
f
Q
q
99.4058 31.4674 m
99.132103 31.209801 98.9953 30.7435 98.9953 30.068501 c
98.9953 27.290199 l
98.104897 27.290199 l
98.104897 32.52882 l
98.985397 32.52882 l
98.985397 31.785299 l
99.196404 32.042999 99.387703 32.230499 99.559097 32.347801 c
99.8526 32.546761 100.1856 32.64621 100.558 32.64621 c
100.98 32.64621 101.32 32.543499 101.577 32.3381 c
101.722 32.220699 101.854 32.047798 101.973 31.819599 c
102.171 32.099998 102.403 32.307098 102.67 32.4408 c
102.937 32.57774 103.237 32.64621 103.57 32.64621 c
104.283 32.64621 104.767 32.391899 105.025 31.8832 c
105.163 31.609301 105.232 31.240801 105.232 30.7777 c
105.232 27.290199 l
104.307 27.290199 l
104.307 30.929399 l
104.307 31.278299 104.218 31.5179 104.04 31.648399 c
103.866 31.778799 103.651 31.844 103.397 31.844 c
103.048 31.844 102.746 31.7283 102.492 31.496799 c
102.242 31.2652 102.116 30.878799 102.116 30.3375 c
102.116 27.290199 l
101.211 27.290199 l
101.211 30.7092 l
101.211 31.064699 101.168 31.3239 101.083 31.487 c
100.947 31.731501 100.695 31.8538 100.3258 31.8538 c
99.989403 31.8538 99.6828 31.725 99.4058 31.4674 c
h
W
0 0 132 43 rc
97.104897 33.64621 m
106.232 33.64621 l
106.232 26.290199 l
97.104897 26.290199 l
h
f
Q
q
92.669197 27.896799 m
92.520798 28.1642 92.446602 28.5212 92.446602 28.968 c
92.446602 32.528858 l
93.356697 32.528858 l
93.356697 29.0511 l
93.356697 28.783701 93.399498 28.5653 93.485298 28.3957 c
93.6436 28.0826 93.938698 27.9261 94.370598 27.9261 c
94.990601 27.9261 95.412598 28.200001 95.636902 28.7479 c
95.758904 29.0413 95.819901 29.444099 95.819901 29.955999 c
95.819901 32.528858 l
96.710197 32.528858 l
96.710197 27.2903 l
95.869301 27.2903 l
95.879204 28.063101 l
95.763802 27.864201 95.620399 27.696199 95.448898 27.559299 c
95.109299 27.2854 94.697098 27.148399 94.212402 27.148399 c
93.457199 27.148399 92.942802 27.3979 92.669197 27.896799 c
h
W
0 0 132 43 rc
91.446602 33.528858 m
97.710197 33.528858 l
97.710197 26.148399 l
91.446602 26.148399 l
h
f
Q
q
82.400803 30.2299 m
82.832703 31.426701 83.111397 32.193001 83.236702 32.528858 c
82.252403 32.528858 l
80.822899 28.263599 l
79.403397 32.528858 l
78.394402 32.528858 l
80.352997 27.138599 l
80.3069 27.0212 80.232697 26.8419 80.130501 26.600599 c
80.028297 26.359301 79.968903 26.225599 79.9524 26.199499 c
79.899597 26.121201 79.833702 26.056 79.754601 26.003799 c
79.678703 25.9484 79.558403 25.9207 79.393501 25.9207 c
79.340698 25.9207 79.279701 25.9256 79.210503 25.9354 c
79.141197 25.945101 79.029099 25.971201 78.8741 26.013599 c
78.8741 25.211399 l
78.973099 25.1854 79.055496 25.1674 79.121498 25.1576 c
79.190697 25.1479 79.288002 25.143 79.4133 25.143 c
79.927696 25.143 80.290398 25.2897 80.501404 25.5832 c
80.712502 25.876699 81.075203 26.6919 81.5896 28.028799 c
81.807198 28.596201 82.077599 29.329901 82.400803 30.2299 c
h
W
0 0 132 43 rc
77.394402 33.528858 m
84.236702 33.528858 l
84.236702 24.143 l
77.394402 24.143 l
h
f
Q
q
74.798698 32.465199 m
74.528297 32.334801 74.295799 32.144001 74.101303 31.8929 c
74.101303 34.5 l
73.235703 34.5 l
73.235703 27.290199 l
74.056801 27.290199 l
74.056801 27.9603 l
74.244698 27.7092 74.421097 27.5266 74.585999 27.4125 c
74.862999 27.2201 75.202599 27.123899 75.604897 27.123899 c
76.323799 27.123899 76.886002 27.3978 77.291603 27.945601 c
77.697197 28.4935 77.900002 29.181499 77.900002 30.0098 c
77.900002 30.883699 77.693901 31.544001 77.2817 31.9907 c
76.872803 32.4408 76.3386 32.665749 75.6791 32.665749 c
75.362602 32.665749 75.069099 32.5989 74.798698 32.465199 c
h
76.628799 28.469 m
76.391403 28.0907 76.031998 27.9016 75.550499 27.9016 c
74.910797 27.9016 74.4739 28.190201 74.239799 28.767401 c
74.114502 29.0739 74.051804 29.473301 74.051804 29.9657 c
74.051804 30.647301 74.203499 31.1364 74.506897 31.4331 c
74.813499 31.7299 75.169701 31.878201 75.575302 31.878201 c
76.040199 31.878201 76.391403 31.6973 76.628799 31.3353 c
76.869499 30.9734 76.989899 30.5168 76.989899 29.9657 c
76.989899 29.346201 76.869499 28.8473 76.628799 28.469 c
h
W*
0 0 132 43 rc
72.235703 35.5 m
78.900002 35.5 l
78.900002 26.123899 l
72.235703 26.123899 l
h
f
Q
q
66.488899 32.445702 m
66.208603 32.312 65.943199 32.0919 65.692596 31.785299 c
65.692596 32.52882 l
64.846802 32.52882 l
64.846802 27.290199 l
65.737099 27.290199 l
65.737099 30.034201 l
65.737099 30.3766 65.758499 30.639099 65.801399 30.821699 c
65.847603 31.007601 65.944801 31.187 66.093201 31.3598 c
66.277901 31.575001 66.492203 31.7185 66.736198 31.790199 c
66.871399 31.8326 67.044502 31.8538 67.2556 31.8538 c
67.671097 31.8538 67.957901 31.6908 68.116203 31.3647 c
68.2118 31.169001 68.259697 30.9114 68.259697 30.5919 c
68.259697 27.290199 l
69.164803 27.290199 l
69.164803 30.6506 l
69.164803 31.178801 69.0923 31.584801 68.947197 31.8685 c
68.683403 32.387001 68.175598 32.64621 67.423798 32.64621 c
67.080803 32.64621 66.769203 32.579369 66.488899 32.445702 c
h
W
0 0 132 43 rc
63.846802 33.64621 m
70.164803 33.64621 l
70.164803 26.290199 l
63.846802 26.290199 l
h
f
Q
q
58.9561 28.4006 m
57.937099 32.528858 l
56.962799 32.528858 l
58.4911 27.2903 l
59.4161 27.2903 l
60.459702 31.3452 l
61.537998 27.2903 l
62.462898 27.2903 l
64.001198 32.528858 l
63.110901 32.528858 l
62.027599 28.424999 l
60.988899 32.528858 l
59.989799 32.528858 l
58.9561 28.4006 l
h
W
0 0 132 43 rc
55.962799 33.528858 m
65.001198 33.528858 l
65.001198 26.2903 l
55.962799 26.2903 l
h
f
Q
q
55.137402 30.719 m
55.068199 30.5755 54.931301 30.4907 54.726898 30.4646 c
53.307301 30.2885 l
52.809399 30.226601 52.407101 30.061899 52.100498 29.7945 c
51.7938 29.5271 51.640499 29.150499 51.640499 28.6646 c
51.640499 28.2211 51.795502 27.851 52.1054 27.5543 c
52.418701 27.260799 52.820999 27.1141 53.312302 27.1141 c
53.721199 27.1141 54.095402 27.2005 54.435101 27.373301 c
54.7747 27.546101 55.035198 27.749901 55.216599 27.984699 c
55.246201 27.775999 55.297401 27.614599 55.3699 27.5005 c
55.5084 27.285299 55.730999 27.177601 56.037601 27.177601 c
56.162899 27.177601 56.261902 27.182501 56.3344 27.192301 c
56.406898 27.202101 56.512501 27.226601 56.651001 27.265699 c
56.651001 27.916201 l
56.594898 27.9065 56.542099 27.8983 56.492699 27.8918 c
56.443199 27.8885 56.398701 27.8869 56.3591 27.8869 c
56.237099 27.8869 56.1563 27.9146 56.116798 27.969999 c
56.080502 28.025499 56.062401 28.098801 56.062401 28.190201 c
56.062401 31.208099 l
56.062401 31.7038 55.869499 32.069 55.4837 32.303799 c
55.094601 32.53854 54.588402 32.65593 53.965199 32.65593 c
53.4277 32.65593 52.954498 32.528759 52.545601 32.274399 c
52.139999 32.0233 51.929001 31.5749 51.912498 30.9293 c
52.7435 30.9293 l
52.776402 31.1999 52.847301 31.403799 52.9562 31.540701 c
53.1507 31.7885 53.480499 31.9125 53.9454 31.9125 c
54.347698 31.9125 54.655998 31.844 54.8703 31.707001 c
55.088001 31.573299 55.1968 31.356501 55.1968 31.056499 c
55.1968 30.9097 55.176998 30.797199 55.137402 30.719 c
h
52.852299 28.0825 m
52.664299 28.2293 52.5704 28.4298 52.5704 28.6842 c
52.5704 29.02 52.707199 29.264601 52.9809 29.4179 c
53.142502 29.509199 53.3848 29.576 53.708 29.618401 c
54.247101 29.686899 l
54.411999 29.706499 54.5802 29.7391 54.751598 29.7847 c
54.9231 29.8304 55.063202 29.8874 55.172001 29.9559 c
55.172001 29.2467 l
55.172001 28.7054 54.924702 28.315701 54.430099 28.0777 c
54.1366 27.9342 53.833302 27.8624 53.52 27.8624 c
53.262798 27.8624 53.040199 27.935801 52.852299 28.0825 c
h
W*
0 0 132 43 rc
50.640499 33.65593 m
57.651001 33.65593 l
57.651001 26.1141 l
50.640499 26.1141 l
h
f
Q
q
49.894402 32.264702 m
49.6241 32.013599 49.454201 31.799999 49.384998 31.623899 c
49.384998 32.52882 l
48.5392 32.52882 l
48.5392 27.290199 l
49.429501 27.290199 l
49.429501 30.303301 l
49.429501 30.674999 49.5499 31.002701 49.7906 31.2864 c
50.0313 31.5734 50.3759 31.7169 50.824299 31.7169 c
50.877102 31.7169 50.9249 31.7152 50.9678 31.712 c
51.013901 31.7087 51.0634 31.7022 51.1161 31.6924 c
51.1161 32.621761 l
51.0205 32.631538 50.9529 32.638062 50.913399 32.641319 c
50.873798 32.644581 50.845798 32.64621 50.8293 32.64621 c
50.476398 32.64621 50.164799 32.519039 49.894402 32.264702 c
h
W
0 0 132 43 rc
47.5392 33.64621 m
52.1161 33.64621 l
52.1161 26.290199 l
47.5392 26.290199 l
h
f
Q
q
108.458 12.5357 m
108.458 21.0289 l
106.855 21.0289 l
106.855 23.217699 l
112.576 23.217699 l
112.576 21.0289 l
111.159 21.0289 l
111.159 12.5357 l
112.576 12.5357 l
112.576 10.3469 l
106.855 10.3469 l
106.855 12.5357 l
108.458 12.5357 l
h
W
0 0 132 43 rc
105.855 24.217699 m
113.576 24.217699 l
113.576 9.3469 l
105.855 9.3469 l
h
f
ep
end
%%Trailer
%%EOF

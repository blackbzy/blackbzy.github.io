%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.6.1 (Build 23G93) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
30.349701 18.342501 m
26.8836 15.5357 21.9266 15.5357 18.460501 18.342501 c
19.800699 19.9974 l
22.485399 17.8234 26.3248 17.8234 29.009501 19.9974 c
30.349701 18.342501 l
h
W
0 0 132 43 rc
17.460501 20.9974 m
31.349701 20.9974 l
31.349701 14.5357 l
17.460501 14.5357 l
h
f
Q
q
19.903999 21.986601 2.1296 2.8769 rc
18.903999 25.863501 m
23.0336 25.863501 l
23.0336 20.986601 l
18.903999 20.986601 l
h
f
Q
q
26.511999 21.986601 2.1294999 2.8769 rc
25.511999 25.863501 m
29.6415 25.863501 l
29.6415 20.986601 l
25.511999 20.986601 l
h
f
Q
q
24 9.5 m
30.351299 9.5 35.5 14.6487 35.5 21 c
35.5 27.351299 30.351299 32.5 24 32.5 c
17.648701 32.5 12.5 27.351299 12.5 21 c
12.5 14.6487 17.648701 9.5 24 9.5 c
h
24 11.6295 m
29.1752 11.6295 33.370499 15.8248 33.370499 21 c
33.370499 26.1752 29.1752 30.370501 24 30.370501 c
18.8248 30.370501 14.6295 26.1752 14.6295 21 c
14.6295 15.8248 18.8248 11.6295 24 11.6295 c
h
W*
0 0 132 43 rc
11.5 33.5 m
36.5 33.5 l
36.5 8.5 l
11.5 8.5 l
h
f
Q
q
97.536903 32.377201 m
97.368896 32.2696 97.179604 32.083698 96.968803 31.819599 c
96.968803 34.5 l
96.079597 34.5 l
96.079597 27.290199 l
96.968803 27.290199 l
96.968803 30.068501 l
96.968803 30.7663 97.118698 31.2407 97.418404 31.4918 c
97.718002 31.742901 98.052299 31.8685 98.421097 31.8685 c
98.8657 31.8685 99.168701 31.725 99.330101 31.438 c
99.428902 31.258699 99.478302 30.976601 99.478302 30.591801 c
99.478302 27.290199 l
100.3922 27.290199 l
100.3922 30.650499 l
100.3922 31.165701 100.3181 31.568501 100.1699 31.8587 c
99.8965 32.390202 99.376198 32.655972 98.608902 32.655972 c
98.180702 32.655972 97.823402 32.563042 97.536903 32.377201 c
h
W
0 0 132 43 rc
95.079597 35.5 m
101.3922 35.5 l
101.3922 26.290199 l
95.079597 26.290199 l
h
f
Q
q
117.695 30.4646 m
117.899 30.4907 118.035 30.5755 118.105 30.719 c
118.144 30.797199 118.164 30.9097 118.164 31.056499 c
118.164 31.356501 118.055 31.573299 117.838 31.707001 c
117.624 31.844 117.316 31.9125 116.914 31.9125 c
116.45 31.9125 116.12 31.7885 115.926 31.540701 c
115.817 31.403799 115.747 31.1999 115.714 30.9293 c
114.884 30.9293 l
114.9 31.5749 115.111 32.0233 115.516 32.274399 c
115.924 32.528759 116.397 32.65593 116.934 32.65593 c
117.556 32.65593 118.062 32.53854 118.45 32.303799 c
118.836 32.069 119.028 31.7038 119.028 31.208099 c
119.028 28.190201 l
119.028 28.098801 119.046 28.025499 119.083 27.969999 c
119.122 27.9146 119.203 27.8869 119.325 27.8869 c
119.364 27.8869 119.409 27.8885 119.458 27.8918 c
119.508 27.8983 119.56 27.9065 119.616 27.916201 c
119.616 27.265699 l
119.478 27.226601 119.373 27.202101 119.3 27.192301 c
119.228 27.182501 119.129 27.177601 119.004 27.177601 c
118.697 27.177601 118.475 27.285299 118.337 27.5005 c
118.264 27.614599 118.213 27.775999 118.184 27.984699 c
118.003 27.749901 117.742 27.546101 117.403 27.373301 c
117.064 27.2005 116.69 27.1141 116.282 27.1141 c
115.791 27.1141 115.389 27.260799 115.076 27.5543 c
114.767 27.851 114.612 28.2211 114.612 28.6646 c
114.612 29.150499 114.765 29.5271 115.072 29.7945 c
115.378 30.061899 115.78 30.226601 116.277 30.2885 c
117.695 30.4646 l
h
115.541 28.6842 m
115.541 28.4298 115.635 28.2293 115.822 28.0825 c
116.01 27.935801 116.232 27.8624 116.489 27.8624 c
116.802 27.8624 117.105 27.9342 117.398 28.0777 c
117.892 28.315701 118.139 28.7054 118.139 29.2467 c
118.139 29.9559 l
118.031 29.8874 117.891 29.8304 117.719 29.7847 c
117.548 29.7391 117.38 29.706499 117.215 29.686899 c
116.677 29.618401 l
116.354 29.576 116.112 29.509199 115.951 29.4179 c
115.677 29.264601 115.541 29.02 115.541 28.6842 c
h
W*
0 0 132 43 rc
113.612 33.65593 m
120.616 33.65593 l
120.616 26.1141 l
113.612 26.1141 l
h
f
Q
q
121.141 30.821699 m
121.098 30.639099 121.077 30.3766 121.077 30.034201 c
121.077 27.290199 l
120.187 27.290199 l
120.187 32.52882 l
121.032 32.52882 l
121.032 31.785299 l
121.282 32.0919 121.548 32.312 121.828 32.445702 c
122.107 32.579369 122.419 32.64621 122.761 32.64621 c
123.512 32.64621 124.019 32.387001 124.283 31.8685 c
124.428 31.584801 124.5 31.178801 124.5 30.6506 c
124.5 27.290199 l
123.596 27.290199 l
123.596 30.5919 l
123.596 30.9114 123.548 31.169001 123.453 31.3647 c
123.295 31.6908 123.008 31.8538 122.593 31.8538 c
122.382 31.8538 122.21 31.8326 122.075 31.790199 c
121.831 31.7185 121.617 31.575001 121.432 31.3598 c
121.284 31.187 121.187 31.007601 121.141 30.821699 c
h
W
0 0 132 43 rc
119.187 33.64621 m
125.5 33.64621 l
125.5 26.290199 l
119.187 26.290199 l
h
f
Q
q
92.623199 10.3499 m
97.260696 23.217699 l
100.3288 23.217699 l
104.931 10.3499 l
101.986 10.3499 l
101.149 12.995 l
96.361397 12.995 l
95.462097 10.3499 l
92.623199 10.3499 l
h
98.768303 20.2757 m
97.093201 15.2124 l
100.3905 15.2124 l
98.768303 20.2757 l
h
W*
0 0 132 43 rc
91.623199 24.217699 m
105.931 24.217699 l
105.931 9.3499002 l
91.623199 9.3499002 l
h
f
Q
q
79.806198 18.7218 m
79.095001 19.623899 78.107597 20.0749 76.843903 20.0749 c
76.144402 20.0749 75.568398 19.929399 75.115799 19.638399 c
74.733803 19.4056 74.384102 19.0681 74.066704 18.625799 c
74.066704 23.200199 l
71.562798 23.200199 l
71.562798 10.3499 l
74.022598 10.3499 l
74.022598 11.5459 l
74.357597 11.0803 74.669098 10.7543 74.9571 10.5681 c
75.439102 10.2538 76.076797 10.0967 76.8703 10.0967 c
78.134003 10.0967 79.1185 10.5827 79.823799 11.5546 c
80.529198 12.5265 80.881798 13.7516 80.881798 15.2298 c
80.881798 16.655701 80.5233 17.8197 79.806198 18.7218 c
h
77.707901 12.9252 m
77.349297 12.4072 76.846802 12.1482 76.200302 12.1482 c
75.453796 12.1482 74.898399 12.4159 74.533897 12.9514 c
74.169502 13.4868 73.987297 14.1619 73.987297 14.9767 c
73.987297 15.6692 74.0755 16.233801 74.251801 16.6703 c
74.592697 17.4909 75.218697 17.901199 76.1297 17.901199 c
77.028999 17.901199 77.646202 17.4821 77.981201 16.6441 c
78.157501 16.201799 78.245697 15.6431 78.245697 14.968 c
78.245697 14.1241 78.066399 13.4431 77.707901 12.9252 c
h
W*
0 0 132 43 rc
70.562798 24.200199 m
81.881798 24.200199 l
81.881798 9.0966997 l
70.562798 9.0966997 l
h
f
Q
q
65.727997 12.2442 m
65.627998 12.3432 65.578102 12.5876 65.578102 12.9775 c
65.578102 18.005899 l
67.138603 18.005899 l
67.138603 19.778099 l
65.578102 19.778099 l
65.578102 22.431999 l
63.091801 22.431999 l
63.091801 19.778099 l
61.751701 19.778099 l
61.751701 18.005899 l
63.091801 18.005899 l
63.091801 12.1482 l
63.091801 11.5546 63.232899 11.1152 63.514999 10.83 c
63.950001 10.3819 64.761101 10.1782 65.948402 10.2189 c
67.138603 10.2626 l
67.138603 12.122 l
67.056297 12.1162 66.9711 12.1104 66.882896 12.1046 c
66.644897 12.1046 l
66.133499 12.1046 65.827904 12.1511 65.727997 12.2442 c
h
W
0 0 132 43 rc
60.751701 23.431999 m
68.138603 23.431999 l
68.138603 9.1781998 l
60.751701 9.1781998 l
h
f
Q
q
60.437302 11.5022 m
61.248501 12.4974 61.653999 13.6934 61.653999 15.0902 c
61.653999 16.463699 61.248501 17.653799 60.437302 18.6607 c
59.626202 19.6675 58.394798 20.1709 56.743198 20.1709 c
55.091599 20.1709 53.860199 19.6675 53.049099 18.6607 c
52.237999 17.653799 51.832401 16.463699 51.832401 15.0902 c
51.832401 13.6934 52.237999 12.4974 53.049099 11.5022 c
53.860199 10.5128 55.091599 10.0181 56.743198 10.0181 c
58.394798 10.0181 59.626202 10.5128 60.437302 11.5022 c
h
58.4272 12.8815 m
58.033401 12.3635 57.469101 12.1046 56.734402 12.1046 c
55.999699 12.1046 55.432499 12.3635 55.032799 12.8815 c
54.639 13.3995 54.442101 14.1357 54.442101 15.0902 c
54.442101 16.0446 54.639 16.777901 55.032799 17.2901 c
55.432499 17.8081 55.999699 18.066999 56.734402 18.066999 c
57.469101 18.066999 58.033401 17.8081 58.4272 17.2901 c
58.820999 16.777901 59.017899 16.0446 59.017899 15.0902 c
59.017899 14.1357 58.820999 13.3995 58.4272 12.8815 c
h
W*
0 0 132 43 rc
50.832401 21.1709 m
62.653999 21.1709 l
62.653999 9.0180998 l
50.832401 9.0180998 l
h
f
Q
q
47.432301 20.0924 m
48.425598 20.0924 49.236698 19.833401 49.865601 19.315399 c
50.500401 18.803301 50.817799 17.9506 50.817799 16.757601 c
50.817799 10.3499 l
48.243401 10.3499 l
48.243401 16.1378 l
48.243401 16.6383 48.1758 17.0224 48.0406 17.2901 c
47.793701 17.778999 47.323502 18.023399 46.630001 18.023399 c
45.777699 18.023399 45.192902 17.665501 44.8755 16.9496 c
44.710899 16.571301 44.628601 16.088301 44.628601 15.5005 c
44.628601 10.3499 l
42.124699 10.3499 l
42.124699 19.8479 l
44.549301 19.8479 l
44.549301 18.4599 l
44.872501 18.948799 45.1782 19.3009 45.466202 19.516199 c
45.983398 19.900299 46.638802 20.0924 47.432301 20.0924 c
h
W
0 0 132 43 rc
41.124699 21.0924 m
51.817799 21.0924 l
51.817799 9.3499002 l
41.124699 9.3499002 l
h
f
Q
q
82.354897 8.5253 m
82.672302 8.5079002 l
82.919197 8.4961996 83.154297 8.5050001 83.377602 8.5340996 c
83.600998 8.5632 83.789001 8.6301003 83.941902 8.7348003 c
84.088799 8.8338003 84.223999 9.0403996 84.347397 9.3547001 c
84.4767 9.6688995 84.529602 9.8610001 84.506104 9.9308004 c
80.9795 19.8654 l
83.774399 19.8654 l
85.872704 12.8466 l
87.8564 19.8654 l
90.527802 19.8654 l
87.2304 10.507 l
86.595596 8.7027998 86.093102 7.5854001 85.722801 7.1546998 c
85.352501 6.7182002 84.6119 6.5 83.500999 6.5 c
83.277702 6.5 83.098396 6.5029001 82.963203 6.5086999 c
82.828003 6.5086999 82.625298 6.5174999 82.354897 6.5349002 c
82.354897 8.5253 l
h
W
0 0 132 43 rc
79.9795 20.8654 m
91.527802 20.8654 l
91.527802 5.5 l
79.9795 5.5 l
h
f
Q
q
108.034 31.4674 m
107.761 31.209801 107.624 30.7435 107.624 30.068501 c
107.624 27.290199 l
106.735 27.290199 l
106.735 32.52882 l
107.614 32.52882 l
107.614 31.785299 l
107.825 32.042999 108.016 32.230499 108.188 32.347801 c
108.481 32.546761 108.813 32.64621 109.185 32.64621 c
109.607 32.64621 109.946 32.543499 110.203 32.3381 c
110.348 32.220699 110.48 32.047798 110.598 31.819599 c
110.796 32.099998 111.028 32.307098 111.295 32.4408 c
111.561 32.57774 111.861 32.64621 112.194 32.64621 c
112.905 32.64621 113.389 32.391899 113.646 31.8832 c
113.784 31.609301 113.854 31.240801 113.854 30.7777 c
113.854 27.290199 l
112.93 27.290199 l
112.93 30.929399 l
112.93 31.278299 112.841 31.5179 112.663 31.648399 c
112.489 31.778799 112.274 31.844 112.021 31.844 c
111.672 31.844 111.37 31.7283 111.117 31.496799 c
110.867 31.2652 110.741 30.878799 110.741 30.3375 c
110.741 27.290199 l
109.837 27.290199 l
109.837 30.7092 l
109.837 31.064699 109.795 31.3239 109.709 31.487 c
109.574 31.731501 109.322 31.8538 108.953 31.8538 c
108.617 31.8538 108.311 31.725 108.034 31.4674 c
h
W
0 0 132 43 rc
105.735 33.64621 m
114.854 33.64621 l
114.854 26.290199 l
105.735 26.290199 l
h
f
Q
q
101.61 27.896799 m
101.462 28.1642 101.388 28.5212 101.388 28.968 c
101.388 32.528858 l
102.296 32.528858 l
102.296 29.0511 l
102.296 28.783701 102.339 28.5653 102.425 28.3957 c
102.583 28.0826 102.878 27.9261 103.309 27.9261 c
103.928 27.9261 104.35 28.200001 104.574 28.7479 c
104.696 29.0413 104.757 29.444099 104.757 29.955999 c
104.757 32.528858 l
105.646 32.528858 l
105.646 27.2903 l
104.806 27.2903 l
104.816 28.063101 l
104.701 27.864201 104.557 27.696199 104.386 27.559299 c
104.047 27.2854 103.635 27.148399 103.151 27.148399 c
102.397 27.148399 101.883 27.3979 101.61 27.896799 c
h
W
0 0 132 43 rc
100.388 33.528858 m
106.646 33.528858 l
106.646 26.148399 l
100.388 26.148399 l
h
f
Q
q
92.265297 30.2299 m
92.6968 31.426701 92.974998 32.193001 93.100197 32.528858 c
92.117203 32.528858 l
90.689499 28.263599 l
89.271797 32.528858 l
88.264 32.528858 l
90.2202 27.138599 l
90.174103 27.0212 90.099998 26.8419 89.997902 26.600599 c
89.895897 26.359301 89.836601 26.225599 89.820099 26.199499 c
89.767403 26.121201 89.7015 26.056 89.622498 26.003799 c
89.546799 25.9484 89.426598 25.9207 89.261902 25.9207 c
89.209198 25.9207 89.1483 25.9256 89.079102 25.9354 c
89.010002 25.945101 88.898003 25.971201 88.743202 26.013599 c
88.743202 25.211399 l
88.842003 25.1854 88.924301 25.1674 88.990196 25.1576 c
89.059402 25.1479 89.156502 25.143 89.2817 25.143 c
89.795403 25.143 90.1577 25.2897 90.368401 25.5832 c
90.579201 25.876699 90.941498 26.6919 91.4552 28.028799 c
91.6726 28.596201 91.942596 29.329901 92.265297 30.2299 c
h
W
0 0 132 43 rc
87.264 33.528858 m
94.100197 33.528858 l
94.100197 24.143 l
87.264 24.143 l
h
f
Q
q
84.975998 32.465199 m
84.705902 32.334801 84.473801 32.144001 84.279503 31.8929 c
84.279503 34.5 l
83.415001 34.5 l
83.415001 27.290199 l
84.235001 27.290199 l
84.235001 27.9603 l
84.422699 27.7092 84.5989 27.5266 84.763603 27.4125 c
85.040199 27.2201 85.379402 27.123899 85.781197 27.123899 c
86.4991 27.123899 87.0606 27.3978 87.465698 27.945601 c
87.870796 28.4935 88.073303 29.181499 88.073303 30.0098 c
88.073303 30.883699 87.8675 31.544001 87.455803 31.9907 c
87.047501 32.4408 86.514 32.665749 85.855301 32.665749 c
85.539101 32.665749 85.246002 32.5989 84.975998 32.465199 c
h
86.803802 28.469 m
86.566597 28.0907 86.207703 27.9016 85.726898 27.9016 c
85.087997 27.9016 84.651604 28.190201 84.417801 28.767401 c
84.292603 29.0739 84.230103 29.473301 84.230103 29.9657 c
84.230103 30.647301 84.381599 31.1364 84.684502 31.4331 c
84.990799 31.7299 85.346497 31.878201 85.751602 31.878201 c
86.215897 31.878201 86.566597 31.6973 86.803802 31.3353 c
87.044197 30.9734 87.164398 30.5168 87.164398 29.9657 c
87.164398 29.346201 87.044197 28.8473 86.803802 28.469 c
h
W*
0 0 132 43 rc
82.415001 35.5 m
89.073303 35.5 l
89.073303 26.123899 l
82.415001 26.123899 l
h
f
Q
q
78.563499 32.367401 m
78.290199 32.536949 77.950996 32.621731 77.545898 32.621731 c
76.814796 32.621731 76.251701 32.341301 75.856499 31.780399 c
75.4646 31.222799 75.2686 30.5625 75.2686 29.7994 c
75.2686 28.9842 75.484299 28.3304 75.915802 27.837999 c
76.347198 27.3489 76.857597 27.1043 77.447098 27.1043 c
77.812698 27.1043 78.1371 27.1761 78.420303 27.3195 c
78.703499 27.462999 78.948799 27.696199 79.156303 28.018999 c
79.156303 27.290199 l
79.956596 27.290199 l
79.956596 34.5 l
79.101997 34.5 l
79.101997 31.8538 l
78.9011 32.0984 78.721603 32.2696 78.563499 32.367401 c
h
76.567802 28.4396 m
76.3274 28.8179 76.207199 29.2875 76.207199 29.848301 c
76.207199 30.507 76.345497 31.006001 76.6222 31.3451 c
76.9021 31.6842 77.265999 31.8538 77.713898 31.8538 c
78.1157 31.8538 78.453201 31.694 78.726601 31.374399 c
78.999901 31.0581 79.136597 30.569 79.136597 29.907 c
79.136597 29.2516 79.003197 28.747801 78.736397 28.395599 c
78.473 28.0467 78.135399 27.872299 77.723801 27.872299 c
77.193497 27.872299 76.808197 28.061399 76.567802 28.4396 c
h
W*
0 0 132 43 rc
74.2686 35.5 m
80.956596 35.5 l
80.956596 26.1043 l
74.2686 26.1043 l
h
f
Q
q
73.610901 32.382099 m
73.258499 32.55817 72.8946 32.64621 72.519203 32.64621 c
71.774902 32.64621 71.172302 32.383701 70.711197 31.8587 c
70.250198 31.3337 70.0196 30.6506 70.0196 29.8092 c
70.0196 28.954901 70.248497 28.2897 70.706299 27.813601 c
71.164001 27.340799 71.722198 27.1043 72.380898 27.1043 c
72.650902 27.1043 72.892998 27.1304 73.107101 27.1826 c
73.505501 27.273899 73.839798 27.450001 74.109901 27.710899 c
74.271202 27.860901 74.4161 28.053301 74.544601 28.288 c
74.6763 28.5261 74.7537 28.741301 74.776703 28.933701 c
73.902397 28.933701 l
73.836502 28.7022 73.724503 28.4984 73.566498 28.3223 c
73.289803 28.018999 72.919296 27.867399 72.455002 27.867399 c
71.957703 27.867399 71.5905 28.027201 71.353401 28.346701 c
71.116302 28.6696 70.989502 29.096701 70.973 29.6283 c
74.8508 29.6283 l
74.8508 30.1565 74.824501 30.5413 74.771797 30.7826 c
74.712502 31.1348 74.594002 31.4429 74.4161 31.7071 c
74.231697 31.984301 73.963303 32.209301 73.610901 32.382099 c
h
73.684998 31.242399 m
73.816704 31.014099 73.900703 30.7092 73.936996 30.3277 c
70.997704 30.3277 l
71.014198 30.7777 71.160698 31.1478 71.437401 31.438101 c
71.713997 31.731501 72.056503 31.8783 72.464897 31.8783 c
73.034599 31.8783 73.441299 31.6663 73.684998 31.242399 c
h
W*
0 0 132 43 rc
69.0196 33.64621 m
75.8508 33.64621 l
75.8508 26.1043 l
69.0196 26.1043 l
h
f
Q
q
69.068604 28.0238 m
68.943497 28.0858 68.880898 28.208099 68.880898 28.390699 c
68.880898 31.8097 l
69.725601 31.8097 l
69.725601 32.52874 l
68.880898 32.52874 l
68.880898 33.991241 l
67.981903 33.991241 l
67.981903 32.52874 l
67.265602 32.52874 l
67.265602 31.8097 l
67.981903 31.8097 l
67.981903 28.341801 l
67.981903 28.005899 68.056 27.732 68.204102 27.52 c
68.352303 27.3113 68.633904 27.207001 69.048897 27.207001 c
69.177299 27.207001 69.295898 27.213499 69.404503 27.2265 c
69.516502 27.239599 69.623497 27.260799 69.725601 27.2901 c
69.725601 27.984699 l
69.659798 27.978201 69.602097 27.973301 69.552696 27.969999 c
69.414398 27.969999 l
69.252998 27.969999 69.137802 27.988001 69.068604 28.0238 c
h
W
0 0 132 43 rc
66.265602 34.991241 m
70.725601 34.991241 l
70.725601 26.207001 l
66.265602 26.207001 l
h
f
Q
q
65.721603 30.719 m
65.652397 30.5755 65.515701 30.4907 65.311501 30.4646 c
63.893799 30.2885 l
63.3965 30.226601 62.994701 30.061899 62.688499 29.7945 c
62.382198 29.5271 62.229099 29.150499 62.229099 28.6646 c
62.229099 28.2211 62.383801 27.851 62.693401 27.5543 c
63.006302 27.260799 63.408001 27.1141 63.898701 27.1141 c
64.307098 27.1141 64.680901 27.2005 65.020103 27.373301 c
65.359299 27.546101 65.619499 27.749901 65.800598 27.984699 c
65.8302 27.775999 65.881302 27.614599 65.953697 27.5005 c
66.092003 27.285299 66.314301 27.177601 66.620598 27.177601 c
66.745796 27.177601 66.844597 27.182501 66.917 27.192301 c
66.989502 27.202101 67.094803 27.226601 67.2332 27.265699 c
67.2332 27.916201 l
67.1772 27.9065 67.124496 27.8983 67.075104 27.8918 c
67.025703 27.8885 66.981201 27.8869 66.941704 27.8869 c
66.819901 27.8869 66.739197 27.9146 66.699699 27.969999 c
66.663399 28.025499 66.645302 28.098801 66.645302 28.190201 c
66.645302 31.208099 l
66.645302 31.7038 66.452698 32.069 66.067299 32.303799 c
65.678703 32.53854 65.173203 32.65593 64.550797 32.65593 c
64.014 32.65593 63.541401 32.528759 63.133099 32.274399 c
62.728001 32.0233 62.5172 31.5749 62.500702 30.9293 c
63.330601 30.9293 l
63.363602 31.1999 63.434399 31.403799 63.543098 31.540701 c
63.7374 31.7885 64.066704 31.9125 64.530998 31.9125 c
64.9328 31.9125 65.2407 31.844 65.454803 31.707001 c
65.672203 31.573299 65.7808 31.356501 65.7808 31.056499 c
65.7808 30.9097 65.761101 30.797199 65.721603 30.719 c
h
63.439301 28.0825 m
63.251598 28.2293 63.157799 28.4298 63.157799 28.6842 c
63.157799 29.02 63.294399 29.264601 63.567799 29.4179 c
63.729099 29.509199 63.971199 29.576 64.2939 29.618401 c
64.832397 29.686899 l
64.997002 29.706499 65.165001 29.7391 65.336197 29.7847 c
65.5075 29.8304 65.647499 29.8874 65.756104 29.9559 c
65.756104 29.2467 l
65.756104 28.7054 65.509102 28.315701 65.015198 28.0777 c
64.722 27.9342 64.419098 27.8624 64.106201 27.8624 c
63.8493 27.8624 63.626999 27.935801 63.439301 28.0825 c
h
W*
0 0 132 43 rc
61.229099 33.65593 m
68.2332 33.65593 l
68.2332 26.1141 l
61.229099 26.1141 l
h
f
Q
q
55.804401 32.347801 m
55.633202 32.230499 55.4422 32.042999 55.2314 31.785299 c
55.2314 32.52882 l
54.3521 32.52882 l
54.3521 27.290199 l
55.241299 27.290199 l
55.241299 30.068501 l
55.241299 30.7435 55.377998 31.209801 55.651299 31.4674 c
55.927898 31.725 56.2342 31.8538 56.570099 31.8538 c
56.938999 31.8538 57.190899 31.731501 57.325901 31.487 c
57.411499 31.3239 57.454399 31.064699 57.454399 30.7092 c
57.454399 27.290199 l
58.358398 27.290199 l
58.358398 30.3375 l
58.358398 30.878799 58.483501 31.2652 58.733799 31.496799 c
58.9874 31.7283 59.2887 31.844 59.637798 31.844 c
59.891399 31.844 60.1054 31.778799 60.279999 31.648399 c
60.457802 31.5179 60.5467 31.278299 60.5467 30.929399 c
60.5467 27.290199 l
61.470501 27.290199 l
61.470501 30.7777 l
61.470501 31.240801 61.401299 31.609301 61.263 31.8832 c
61.0061 32.391899 60.521999 32.64621 59.810699 32.64621 c
59.4781 32.64621 59.178398 32.57774 58.911598 32.4408 c
58.644901 32.307098 58.412701 32.099998 58.215099 31.819599 c
58.0965 32.047798 57.964802 32.220699 57.819901 32.3381 c
57.563 32.543499 57.223801 32.64621 56.802299 32.64621 c
56.430199 32.64621 56.0975 32.546761 55.804401 32.347801 c
h
W
0 0 132 43 rc
53.3521 33.64621 m
62.470501 33.64621 l
62.470501 26.290199 l
53.3521 26.290199 l
h
f
Q
q
48.028301 30.821699 m
47.985401 30.639099 47.964001 30.3766 47.964001 30.034201 c
47.964001 27.290199 l
47.074902 27.290199 l
47.074902 32.52882 l
47.919601 32.52882 l
47.919601 31.785299 l
48.169899 32.0919 48.435001 32.312 48.714901 32.445702 c
48.994801 32.579369 49.306 32.64621 49.648499 32.64621 c
50.399399 32.64621 50.906601 32.387001 51.169998 31.8685 c
51.314899 31.584801 51.387402 31.178801 51.387402 30.6506 c
51.387402 27.290199 l
50.483398 27.290199 l
50.483398 30.5919 l
50.483398 30.9114 50.4356 31.169001 50.340099 31.3647 c
50.181999 31.6908 49.8955 31.8538 49.480598 31.8538 c
49.269798 31.8538 49.096901 31.8326 48.961899 31.790199 c
48.718201 31.7185 48.504101 31.575001 48.319698 31.3598 c
48.171501 31.187 48.074402 31.007601 48.028301 30.821699 c
h
W
0 0 132 43 rc
46.074902 33.64621 m
52.387402 33.64621 l
52.387402 26.290199 l
46.074902 26.290199 l
h
f
Q
q
44.5825 30.4646 m
44.786701 30.4907 44.923302 30.5755 44.9925 30.719 c
45.032001 30.797199 45.0518 30.9097 45.0518 31.056499 c
45.0518 31.356501 44.9431 31.573299 44.7257 31.707001 c
44.5117 31.844 44.2038 31.9125 43.801998 31.9125 c
43.337601 31.9125 43.008301 31.7885 42.813999 31.540701 c
42.705299 31.403799 42.634499 31.1999 42.601601 30.9293 c
41.771702 30.9293 l
41.7882 31.5749 41.998901 32.0233 42.403999 32.274399 c
42.812401 32.528759 43.284901 32.65593 43.821701 32.65593 c
44.444199 32.65593 44.949699 32.53854 45.338299 32.303799 c
45.723598 32.069 45.916302 31.7038 45.916302 31.208099 c
45.916302 28.190201 l
45.916302 28.098801 45.934399 28.025499 45.9706 27.969999 c
46.010101 27.9146 46.090801 27.8869 46.2127 27.8869 c
46.252201 27.8869 46.2966 27.8885 46.346001 27.8918 c
46.395401 27.8983 46.448101 27.9065 46.504101 27.916201 c
46.504101 27.265699 l
46.365799 27.226601 46.260399 27.202101 46.188 27.192301 c
46.115501 27.182501 46.016701 27.177601 45.891602 27.177601 c
45.5853 27.177601 45.362999 27.285299 45.224701 27.5005 c
45.152199 27.614599 45.1012 27.775999 45.071499 27.984699 c
44.8904 27.749901 44.630199 27.546101 44.291 27.373301 c
43.951801 27.2005 43.577999 27.1141 43.169701 27.1141 c
42.679001 27.1141 42.277199 27.260799 41.964298 27.5543 c
41.6548 27.851 41.5 28.2211 41.5 28.6646 c
41.5 29.150499 41.653099 29.5271 41.9594 29.7945 c
42.265701 30.061899 42.6675 30.226601 43.1647 30.2885 c
44.5825 30.4646 l
h
42.428699 28.6842 m
42.428699 28.4298 42.522598 28.2293 42.7103 28.0825 c
42.897999 27.935801 43.1203 27.8624 43.377201 27.8624 c
43.689999 27.8624 43.993 27.9342 44.286098 28.0777 c
44.780102 28.315701 45.0271 28.7054 45.0271 29.2467 c
45.0271 29.9559 l
44.9184 29.8874 44.7784 29.8304 44.607201 29.7847 c
44.435902 29.7391 44.268002 29.706499 44.103298 29.686899 c
43.564899 29.618401 l
43.2421 29.576 43.000099 29.509199 42.838699 29.4179 c
42.565399 29.264601 42.428699 29.02 42.428699 28.6842 c
h
W*
0 0 132 43 rc
40.5 33.65593 m
47.504101 33.65593 l
47.504101 26.1141 l
40.5 26.1141 l
h
f
Q
q
107.246 12.5357 m
107.246 21.0289 l
105.645 21.0289 l
105.645 23.217699 l
111.358 23.217699 l
111.358 21.0289 l
109.944 21.0289 l
109.944 12.5357 l
111.358 12.5357 l
111.358 10.3469 l
105.645 10.3469 l
105.645 12.5357 l
107.246 12.5357 l
h
W
0 0 132 43 rc
104.645 24.217699 m
112.358 24.217699 l
112.358 9.3469 l
104.645 9.3469 l
h
f
Q
q
52.402901 27.2901 0.90399998 5.21416 rc
51.402901 33.504261 m
54.3069 33.504261 l
54.3069 26.2901 l
51.402901 26.2901 l
h
f
Q
q
52.402901 33.477631 0.90399998 0.99782997 rc
51.402901 35.47546 m
54.3069 35.47546 l
54.3069 32.477631 l
51.402901 32.477631 l
h
f
ep
end
%%Trailer
%%EOF

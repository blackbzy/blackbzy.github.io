%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.6.1 (Build 23G93) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
28.349701 18.342501 m
24.8836 15.5357 19.9266 15.5357 16.460501 18.342501 c
17.800699 19.9974 l
20.485399 17.8234 24.3248 17.8234 27.009501 19.9974 c
28.349701 18.342501 l
h
W
0 0 132 43 rc
15.4605 20.9974 m
29.349701 20.9974 l
29.349701 14.5357 l
15.4605 14.5357 l
h
f
Q
q
17.903999 21.986601 2.1296 2.8769 rc
16.903999 25.863501 m
21.0336 25.863501 l
21.0336 20.986601 l
16.903999 20.986601 l
h
f
Q
q
24.511999 21.986601 2.1294999 2.8769 rc
23.511999 25.863501 m
27.6415 25.863501 l
27.6415 20.986601 l
23.511999 20.986601 l
h
f
Q
q
22 9.5 m
28.351299 9.5 33.5 14.6487 33.5 21 c
33.5 27.351299 28.351299 32.5 22 32.5 c
15.6487 32.5 10.5 27.351299 10.5 21 c
10.5 14.6487 15.6487 9.5 22 9.5 c
h
22 11.6295 m
27.1752 11.6295 31.370501 15.8248 31.370501 21 c
31.370501 26.1752 27.1752 30.370501 22 30.370501 c
16.8248 30.370501 12.6295 26.1752 12.6295 21 c
12.6295 15.8248 16.8248 11.6295 22 11.6295 c
h
W*
0 0 132 43 rc
9.5 33.5 m
34.5 33.5 l
34.5 8.5 l
9.5 8.5 l
h
f
Q
q
104.094 10.4149 m
99.507797 23.5 l
96.449997 23.5 l
91.828102 10.4149 l
94.657501 10.4149 l
95.553703 13.1047 l
100.325 13.1047 l
101.16 10.4149 l
104.094 10.4149 l
h
97.952499 20.5084 m
99.569298 15.3595 l
96.282997 15.3595 l
97.952499 20.5084 l
h
W*
0 0 132 43 rc
90.828102 24.5 m
105.094 24.5 l
105.094 9.4148998 l
90.828102 9.4148998 l
h
f
Q
q
76.101997 20.304199 m
77.361504 20.304199 78.345596 19.845501 79.054398 18.9282 c
79.769096 18.0109 80.126404 16.8272 80.126404 15.3773 c
80.126404 13.8741 79.774902 12.6283 79.071999 11.6399 c
78.369003 10.6516 77.387802 10.1574 76.128403 10.1574 c
75.337601 10.1574 74.702003 10.3172 74.221703 10.6368 c
73.934601 10.8262 73.624199 11.1576 73.290298 11.6311 c
73.290298 10.4149 l
70.838799 10.4149 l
70.838799 23.482201 l
73.334198 23.482201 l
73.334198 18.8305 l
73.650497 19.2803 73.9991 19.6236 74.379799 19.8603 c
74.830902 20.1562 75.404999 20.304199 76.101997 20.304199 c
h
75.460602 12.2436 m
76.105003 12.2436 76.605797 12.507 76.963097 13.0337 c
77.320503 13.5604 77.4991 14.2528 77.4991 15.111 c
77.4991 15.7975 77.411301 16.365601 77.235497 16.815399 c
76.901604 17.667601 76.286598 18.0937 75.390297 18.0937 c
74.4823 18.0937 73.858498 17.6765 73.5187 16.841999 c
73.343002 16.398199 73.255096 15.8241 73.255096 15.1198 c
73.255096 14.2913 73.436699 13.6048 73.799896 13.0603 c
74.163101 12.5158 74.716698 12.2436 75.460602 12.2436 c
h
W*
0 0 132 43 rc
69.838799 24.482201 m
81.126404 24.482201 l
81.126404 9.1574001 l
69.838799 9.1574001 l
h
f
Q
q
62.8181 10.9031 m
62.536999 11.1931 62.3964 11.6399 62.3964 12.2436 c
62.3964 18.2003 l
61.060799 18.2003 l
61.060799 20.0023 l
62.3964 20.0023 l
62.3964 22.701 l
64.874199 22.701 l
64.874199 20.0023 l
66.429497 20.0023 l
66.429497 18.2003 l
64.874199 18.2003 l
64.874199 13.0869 l
64.874199 12.6904 64.924004 12.4419 65.023598 12.3413 c
65.123199 12.2466 65.427803 12.1992 65.937401 12.1992 c
66.174698 12.1992 l
66.262604 12.2051 66.347504 12.2111 66.429497 12.217 c
66.429497 10.3261 l
65.243301 10.2817 l
64.059998 10.2403 63.251598 10.4474 62.8181 10.9031 c
h
W
0 0 132 43 rc
60.060799 23.701 m
67.429497 23.701 l
67.429497 9.2403002 l
60.060799 9.2403002 l
h
f
Q
q
60.963402 15.2352 m
60.963402 13.8149 60.5592 12.5987 59.750801 11.5867 c
58.942501 10.5806 57.715199 10.0775 56.069199 10.0775 c
54.4231 10.0775 53.1959 10.5806 52.387501 11.5867 c
51.579102 12.5987 51.1749 13.8149 51.1749 15.2352 c
51.1749 16.631901 51.579102 17.842199 52.387501 18.8661 c
53.1959 19.8899 54.4231 20.4018 56.069199 20.4018 c
57.715199 20.4018 58.942501 19.8899 59.750801 18.8661 c
60.5592 17.842199 60.963402 16.631901 60.963402 15.2352 c
h
56.060398 12.1992 m
56.792599 12.1992 57.355 12.4626 57.747501 12.9893 c
58.1399 13.516 58.336201 14.2647 58.336201 15.2352 c
58.336201 16.205799 58.1399 16.9515 57.747501 17.4723 c
57.355 17.999001 56.792599 18.2624 56.060398 18.2624 c
55.328201 18.2624 54.762901 17.999001 54.364601 17.4723 c
53.972099 16.9515 53.775799 16.205799 53.775799 15.2352 c
53.775799 14.2647 53.972099 13.516 54.364601 12.9893 c
54.762901 12.4626 55.328201 12.1992 56.060398 12.1992 c
h
W*
0 0 132 43 rc
50.1749 21.4018 m
61.963402 21.4018 l
61.963402 9.0775003 l
50.1749 9.0775003 l
h
f
Q
q
49.214802 19.5319 m
48.588001 20.058599 47.779598 20.321899 46.7896 20.321899 c
45.998798 20.321899 45.345699 20.1266 44.8302 19.736 c
44.543201 19.517099 44.238499 19.159 43.916401 18.6619 c
43.916401 20.0734 l
41.5 20.0734 l
41.5 10.4149 l
43.995399 10.4149 l
43.995399 15.6525 l
43.995399 16.2502 44.077499 16.7414 44.241501 17.126101 c
44.5578 17.854 45.140701 18.218 45.990002 18.218 c
46.681301 18.218 47.149899 17.9695 47.395901 17.4723 c
47.530701 17.2001 47.598 16.8095 47.598 16.300501 c
47.598 10.4149 l
50.163799 10.4149 l
50.163799 16.930799 l
50.163799 18.143999 49.847401 19.011101 49.214802 19.5319 c
h
W
0 0 132 43 rc
40.5 21.321899 m
51.163799 21.321899 l
51.163799 9.4148998 l
40.5 9.4148998 l
h
f
Q
q
81.910797 8.5417995 m
81.594498 8.5594997 l
81.594498 6.5355 l
81.863899 6.5177999 82.066002 6.5089002 82.200798 6.5089002 c
82.335503 6.5029998 82.514198 6.5 82.736801 6.5 c
83.843903 6.5 84.582001 6.7219 84.950996 7.1658001 c
85.320099 7.6037002 85.8209 8.7399998 86.453598 10.5747 c
89.739799 20.091101 l
87.0774 20.091101 l
85.100403 12.9538 l
83.009201 20.091101 l
80.223701 20.091101 l
83.738503 9.9888 l
83.761902 9.9177999 83.709198 9.7224998 83.580299 9.4028997 c
83.457298 9.0832996 83.322502 8.8732004 83.176102 8.7726002 c
83.023804 8.6660995 82.836304 8.5979996 82.613701 8.5684004 c
82.391197 8.5388002 82.156799 8.5298996 81.910797 8.5417995 c
h
W
0 0 132 43 rc
79.223701 21.091101 m
90.739799 21.091101 l
90.739799 5.5 l
79.223701 5.5 l
h
f
Q
q
106.402 21.2742 m
106.402 12.6376 l
104.806 12.6376 l
104.806 10.4118 l
110.5 10.4118 l
110.5 12.6376 l
109.09 12.6376 l
109.09 21.2742 l
110.5 21.2742 l
110.5 23.5 l
104.806 23.5 l
104.806 21.2742 l
106.402 21.2742 l
h
W
0 0 132 43 rc
103.806 24.5 m
111.5 24.5 l
111.5 9.4118004 l
103.806 9.4118004 l
h
f
Q
q
71.459801 31.6066 m
71.181198 31.365101 71.041901 30.9088 71.041901 30.2376 c
71.041901 27.5653 l
70.215401 27.5653 l
70.215401 34.5 l
71.041901 34.5 l
71.041901 31.921801 l
71.2379 32.1759 71.413902 32.354698 71.57 32.458199 c
71.836304 32.63694 72.168503 32.72633 72.566399 32.72633 c
73.279701 32.72633 73.763397 32.470699 74.017502 31.959499 c
74.155197 31.6803 74.224098 31.292999 74.224098 30.7974 c
74.224098 27.5653 l
73.374603 27.5653 l
73.374603 30.740999 l
73.374603 31.111099 73.328697 31.382401 73.236801 31.554899 c
73.0868 31.8309 72.805199 31.968901 72.391899 31.968901 c
72.049103 31.968901 71.738403 31.848101 71.459801 31.6066 c
h
W
0 0 132 43 rc
69.215401 35.5 m
75.224098 35.5 l
75.224098 26.5653 l
69.215401 26.5653 l
h
f
Q
q
81.700302 32.693401 m
82.076797 32.693401 82.392097 32.611851 82.646202 32.448799 c
82.793098 32.354698 82.959999 32.189999 83.146698 31.9548 c
83.146698 34.5 l
83.941101 34.5 l
83.941101 27.5653 l
83.197197 27.5653 l
83.197197 28.2663 l
83.004303 27.955799 82.776299 27.731501 82.513 27.5935 c
82.249702 27.4555 81.948196 27.386499 81.608398 27.386499 c
81.060501 27.386499 80.585999 27.6217 80.184898 28.092199 c
79.783897 28.5658 79.583397 29.1947 79.583397 29.9788 c
79.583397 30.7127 79.765602 31.3479 80.129799 31.884199 c
80.4972 32.423698 81.020699 32.693401 81.700302 32.693401 c
h
80.455902 30.025801 m
80.455902 29.486401 80.567596 29.0347 80.7911 28.6709 c
81.014503 28.3071 81.372704 28.1252 81.865601 28.1252 c
82.248199 28.1252 82.561996 28.292999 82.8069 28.628599 c
83.054901 28.9673 83.178802 29.4519 83.178802 30.0823 c
83.178802 30.719 83.051804 31.189501 82.797699 31.4937 c
82.543602 31.8011 82.229897 31.9548 81.8564 31.9548 c
81.440002 31.9548 81.101799 31.7917 80.841599 31.4655 c
80.584396 31.139299 80.455902 30.659401 80.455902 30.025801 c
h
W*
0 0 132 43 rc
78.583397 35.5 m
84.941101 35.5 l
84.941101 26.386499 l
78.583397 26.386499 l
h
f
Q
q
88.221298 27.682899 m
88.068199 27.7927 87.904404 27.9683 87.729897 28.209801 c
87.729897 27.5653 l
86.967697 27.5653 l
86.967697 34.5 l
87.771301 34.5 l
87.771301 31.992399 l
87.951897 32.233898 88.167702 32.4174 88.418701 32.54285 c
88.669701 32.67144 88.9422 32.735741 89.236099 32.735741 c
89.848297 32.735741 90.3442 32.519329 90.723801 32.086498 c
91.106499 31.656799 91.297798 31.0217 91.297798 30.181101 c
91.297798 29.384399 91.109497 28.722601 90.733002 28.1957 c
90.356499 27.6688 89.834503 27.4053 89.167198 27.4053 c
88.793701 27.4053 88.478401 27.4979 88.221298 27.682899 c
h
89.116699 28.1534 m
89.563599 28.1534 89.897301 28.3353 90.117699 28.6991 c
90.341202 29.063 90.452904 29.542801 90.452904 30.1388 c
90.452904 30.6688 90.341202 31.107901 90.117699 31.4561 c
89.897301 31.804199 89.571297 31.9783 89.139603 31.9783 c
88.7631 31.9783 88.432503 31.8356 88.147797 31.5502 c
87.866203 31.2647 87.725304 30.7943 87.725304 30.1388 c
87.725304 29.665199 87.783501 29.280899 87.899803 28.986099 c
88.117203 28.431 88.522797 28.1534 89.116699 28.1534 c
h
W*
0 0 132 43 rc
85.967697 35.5 m
92.297798 35.5 l
92.297798 26.4053 l
85.967697 26.4053 l
h
f
Q
q
99.812401 32.458199 m
99.656303 32.354698 99.480301 32.1759 99.284401 31.921801 c
99.284401 34.5 l
98.457802 34.5 l
98.457802 27.5653 l
99.284401 27.5653 l
99.284401 30.2376 l
99.284401 30.9088 99.423698 31.365101 99.702202 31.6066 c
99.980797 31.848101 100.2915 31.968901 100.634 31.968901 c
101.048 31.968901 101.329 31.8309 101.479 31.554899 c
101.571 31.382401 101.617 31.111099 101.617 30.740999 c
101.617 27.5653 l
102.467 27.5653 l
102.467 30.7974 l
102.467 31.292999 102.398 31.6803 102.26 31.959499 c
102.006 32.470699 101.522 32.72633 100.809 32.72633 c
100.4109 32.72633 100.0788 32.63694 99.812401 32.458199 c
h
W
0 0 132 43 rc
97.457802 35.5 m
103.467 35.5 l
103.467 26.5653 l
97.457802 26.5653 l
h
f
Q
q
118.65 30.863199 m
118.585 30.725201 118.458 30.6437 118.269 30.618601 c
116.951 30.4492 l
116.489 30.389601 116.115 30.231199 115.83 29.9741 c
115.546 29.7169 115.403 29.354601 115.403 28.8873 c
115.403 28.460699 115.547 28.1047 115.835 27.8193 c
116.126 27.537001 116.499 27.395901 116.955 27.395901 c
117.335 27.395901 117.682 27.479 117.998 27.645201 c
118.313 27.811501 118.555 28.0075 118.723 28.233299 c
118.751 28.0326 118.798 27.8773 118.866 27.767599 c
118.994 27.5606 119.201 27.457001 119.485 27.457001 c
119.602 27.457001 119.694 27.4618 119.761 27.471201 c
119.828 27.4806 119.926 27.504101 120.055 27.5417 c
120.055 28.1675 l
120.003 28.158001 119.954 28.1502 119.908 28.1439 c
119.862 28.1408 119.821 28.1392 119.784 28.1392 c
119.671 28.1392 119.596 28.165899 119.559 28.2192 c
119.525 28.272499 119.508 28.3431 119.508 28.430901 c
119.508 31.3337 l
119.508 31.810499 119.329 32.161701 118.971 32.3876 c
118.61 32.61338 118.14 32.726299 117.561 32.726299 c
117.063 32.726299 116.623 32.60397 116.244 32.359299 c
115.867 32.117802 115.671 31.6866 115.656 31.0655 c
116.427 31.0655 l
116.458 31.325899 116.524 31.5219 116.625 31.653601 c
116.805 31.892 117.111 32.0112 117.543 32.0112 c
117.917 32.0112 118.203 31.945299 118.402 31.813601 c
118.604 31.684999 118.705 31.4764 118.705 31.187901 c
118.705 31.0467 118.686 30.938499 118.65 30.863199 c
h
116.528 28.3274 m
116.354 28.468599 116.267 28.6614 116.267 28.906099 c
116.267 29.229099 116.394 29.464399 116.648 29.611799 c
116.798 29.6996 117.023 29.763901 117.323 29.804701 c
117.823 29.8706 l
117.976 29.8894 118.132 29.9207 118.292 29.9646 c
118.451 30.0086 118.581 30.0634 118.682 30.129299 c
118.682 29.4471 l
118.682 28.9265 118.452 28.551701 117.993 28.322701 c
117.721 28.1847 117.439 28.1157 117.148 28.1157 c
116.909 28.1157 116.703 28.1863 116.528 28.3274 c
h
W*
0 0 132 43 rc
114.403 33.726299 m
121.055 33.726299 l
121.055 26.395901 l
114.403 26.395901 l
h
f
Q
q
121.378 30.962099 m
121.338 30.786501 121.318 30.534 121.318 30.204599 c
121.318 27.5653 l
120.491 27.5653 l
120.491 32.604038 l
121.277 32.604038 l
121.277 31.888901 l
121.509 32.1838 121.756 32.3955 122.016 32.524059 c
122.276 32.652649 122.565 32.716949 122.884 32.716949 c
123.582 32.716949 124.053 32.467602 124.298 31.968901 c
124.433 31.695999 124.5 31.3055 124.5 30.7974 c
124.5 27.5653 l
123.66 27.5653 l
123.66 30.740999 l
123.66 31.048401 123.615 31.296101 123.527 31.484301 c
123.38 31.798 123.113 31.9548 122.728 31.9548 c
122.532 31.9548 122.371 31.934401 122.245 31.8936 c
122.019 31.8246 121.82 31.6866 121.648 31.479601 c
121.511 31.3134 121.42 31.1409 121.378 30.962099 c
h
W
0 0 132 43 rc
119.491 33.716949 m
125.5 33.716949 l
125.5 26.5653 l
119.491 26.5653 l
h
f
Q
q
109.383 31.583099 m
109.129 31.3353 109.002 30.886801 109.002 30.2376 c
109.002 27.5653 l
108.175 27.5653 l
108.175 32.604038 l
108.992 32.604038 l
108.992 31.888901 l
109.188 32.1367 109.366 32.317101 109.525 32.43 c
109.798 32.621288 110.107 32.716949 110.453 32.716949 c
110.844 32.716949 111.16 32.618149 111.399 32.420601 c
111.533 32.307598 111.656 32.141399 111.766 31.9219 c
111.95 32.191601 112.165 32.3908 112.413 32.519348 c
112.661 32.651081 112.94 32.716949 113.249 32.716949 c
113.91 32.716949 114.36 32.472301 114.599 31.983 c
114.728 31.719601 114.792 31.365101 114.792 30.9198 c
114.792 27.5653 l
113.933 27.5653 l
113.933 31.065599 l
113.933 31.401199 113.851 31.631701 113.685 31.7572 c
113.523 31.8827 113.324 31.9454 113.088 31.9454 c
112.764 31.9454 112.484 31.834 112.248 31.6113 c
112.015 31.3887 111.899 31.017 111.899 30.4963 c
111.899 27.5653 l
111.059 27.5653 l
111.059 30.853901 l
111.059 31.195801 111.019 31.445101 110.939 31.6019 c
110.814 31.8372 110.58 31.9548 110.237 31.9548 c
109.925 31.9548 109.64 31.8309 109.383 31.583099 c
h
W
0 0 132 43 rc
107.175 33.716949 m
115.792 33.716949 l
115.792 26.5653 l
107.175 26.5653 l
h
f
Q
q
103.505 28.148701 m
103.367 28.405899 103.298 28.749399 103.298 29.1791 c
103.298 32.60408 l
104.143 32.60408 l
104.143 29.259001 l
104.143 29.0019 104.183 28.7917 104.263 28.628599 c
104.41 28.327499 104.684 28.177 105.085 28.177 c
105.66 28.177 106.052 28.440399 106.26 28.9674 c
106.373 29.249599 106.43 29.636999 106.43 30.1294 c
106.43 32.60408 l
107.257 32.60408 l
107.257 27.565399 l
106.476 27.565399 l
106.485 28.308701 l
106.378 28.117399 106.245 27.955799 106.086 27.8241 c
105.77 27.560699 105.388 27.4289 104.938 27.4289 c
104.237 27.4289 103.759 27.6689 103.505 28.148701 c
h
W
0 0 132 43 rc
102.298 33.60408 m
108.257 33.60408 l
108.257 26.4289 l
102.298 26.4289 l
h
f
Q
q
95.100601 30.3929 m
95.501602 31.544001 95.7603 32.280998 95.876602 32.60408 c
94.962898 32.60408 l
93.635803 28.5016 l
92.318001 32.60408 l
91.381203 32.60408 l
93.1996 27.4195 l
93.1567 27.306601 93.087898 27.1341 92.992996 26.902 c
92.898102 26.669901 92.843002 26.5413 92.827599 26.516199 c
92.778702 26.440901 92.7174 26.378201 92.643997 26.327999 c
92.573601 26.2747 92.4618 26.247999 92.3088 26.247999 c
92.259804 26.247999 92.203201 26.252701 92.138901 26.262199 c
92.0746 26.271601 91.970497 26.2967 91.826599 26.3374 c
91.826599 25.565901 l
91.918503 25.5408 91.995003 25.5235 92.056198 25.514099 c
92.120499 25.5047 92.2108 25.5 92.327103 25.5 c
92.804703 25.5 93.141403 25.6411 93.337303 25.923401 c
93.533302 26.2057 93.870003 26.989799 94.347603 28.275801 c
94.549599 28.821501 94.800598 29.527201 95.100601 30.3929 c
h
W
0 0 132 43 rc
90.381203 33.60408 m
96.876602 33.60408 l
96.876602 24.5 l
90.381203 24.5 l
h
f
Q
q
78.136902 32.462898 m
77.809402 32.632259 77.4711 32.716949 77.122101 32.716949 c
76.430298 32.716949 75.870102 32.4645 75.441498 31.959499 c
75.012901 31.4545 74.798698 30.7974 74.798698 29.988199 c
74.798698 29.1665 75.011398 28.5266 75.436897 28.068701 c
75.862396 27.613899 76.381302 27.386499 76.993599 27.386499 c
77.244598 27.386499 77.469597 27.4116 77.668602 27.4618 c
78.039001 27.549601 78.349701 27.719 78.6007 27.9699 c
78.750702 28.114201 78.885399 28.2992 79.004799 28.525101 c
79.127197 28.754 79.199203 28.961 79.220596 29.146099 c
78.407898 29.146099 l
78.346603 28.923401 78.2425 28.7274 78.095596 28.558001 c
77.838501 28.2663 77.494102 28.120501 77.062401 28.120501 c
76.600197 28.120501 76.258904 28.2742 76.038498 28.581499 c
75.818001 28.892 75.700203 29.3029 75.684898 29.814199 c
79.289497 29.814199 l
79.289497 30.3223 79.264999 30.6924 79.216003 30.9245 c
79.160896 31.263201 79.050697 31.559601 78.885399 31.813601 c
78.713997 32.0802 78.4645 32.2967 78.136902 32.462898 c
h
78.205803 31.366699 m
78.3283 31.1472 78.406303 30.853901 78.440002 30.4869 c
75.707802 30.4869 l
75.723099 30.9198 75.859398 31.2757 76.116501 31.554899 c
76.373703 31.8372 76.692001 31.9783 77.071602 31.9783 c
77.601196 31.9783 77.979301 31.774401 78.205803 31.366699 c
h
W*
0 0 132 43 rc
73.798698 33.716949 m
80.289497 33.716949 l
80.289497 26.386499 l
73.798698 26.386499 l
h
f
Q
q
67.786003 32.749901 m
68.340103 32.749901 68.7901 32.611889 69.136002 32.335899 c
69.485001 32.059898 69.694702 31.5847 69.765099 30.9104 c
68.961502 30.9104 l
68.912598 31.2209 68.800797 31.4781 68.626297 31.6819 c
68.451797 31.888901 68.1717 31.992399 67.786003 31.992399 c
67.259499 31.992399 66.883003 31.729 66.656403 31.202101 c
66.509499 30.860201 66.435997 30.438299 66.435997 29.936501 c
66.435997 29.431499 66.5401 29.0065 66.748299 28.661501 c
66.956398 28.3165 67.283997 28.143999 67.730904 28.143999 c
68.073799 28.143999 68.344704 28.2507 68.543701 28.4639 c
68.745697 28.6803 68.885002 28.975201 68.961502 29.3484 c
69.765099 29.3484 l
69.673302 28.6803 69.443703 28.191099 69.076302 27.880501 c
68.709 27.5732 68.239098 27.4195 67.666603 27.4195 c
67.023804 27.4195 66.511002 27.659401 66.128403 28.139299 c
65.745697 28.622299 65.554398 29.224501 65.554398 29.9459 c
65.554398 30.8304 65.764099 31.518801 66.183502 32.011299 c
66.602898 32.503689 67.137001 32.749901 67.786003 32.749901 c
h
W
0 0 132 43 rc
64.554398 33.749901 m
70.765099 33.749901 l
70.765099 26.4195 l
64.554398 26.4195 l
h
f
Q
q
64.319099 31.409 m
64.095596 31.1362 63.983898 30.820999 63.983898 30.4634 c
63.983898 27.5653 l
63.157398 27.5653 l
63.157398 32.604038 l
63.9426 32.604038 l
63.9426 31.7337 l
64.006798 31.903 64.164497 32.108501 64.415497 32.349998 c
64.666496 32.594631 64.955803 32.716949 65.283401 32.716949 c
65.298698 32.716949 65.324699 32.715382 65.361397 32.712238 c
65.398201 32.70911 65.460899 32.702831 65.549698 32.693432 c
65.549698 31.7995 l
65.500702 31.808901 65.454803 31.815201 65.412003 31.818399 c
65.3722 31.821501 65.327797 31.823099 65.278801 31.823099 c
64.862503 31.823099 64.542603 31.685101 64.319099 31.409 c
h
W
0 0 132 43 rc
62.157398 33.716949 m
66.549698 33.716949 l
66.549698 26.5653 l
62.157398 26.5653 l
h
f
Q
q
60.911201 30.618601 m
61.101002 30.6437 61.228001 30.725201 61.292301 30.863199 c
61.329102 30.938499 61.347401 31.0467 61.347401 31.187901 c
61.347401 31.4764 61.246399 31.684999 61.044399 31.813601 c
60.845402 31.945299 60.5592 32.0112 60.185699 32.0112 c
59.754101 32.0112 59.447899 31.892 59.2673 31.653601 c
59.166302 31.5219 59.100498 31.325899 59.069901 31.0655 c
58.298401 31.0655 l
58.313702 31.6866 58.509701 32.117802 58.8862 32.359299 c
59.2658 32.60397 59.705101 32.726299 60.204102 32.726299 c
60.7826 32.726299 61.252499 32.61338 61.6138 32.3876 c
61.971901 32.161701 62.151001 31.810499 62.151001 31.3337 c
62.151001 28.430901 l
62.151001 28.3431 62.167801 28.272499 62.2015 28.2192 c
62.238201 28.165899 62.313202 28.1392 62.426498 28.1392 c
62.463299 28.1392 62.504601 28.1408 62.550499 28.1439 c
62.596401 28.1502 62.645401 28.158001 62.697399 28.1675 c
62.697399 27.5417 l
62.568901 27.504101 62.470901 27.4806 62.403599 27.471201 c
62.336201 27.4618 62.2444 27.457001 62.127998 27.457001 c
61.8433 27.457001 61.6367 27.5606 61.508099 27.767599 c
61.4408 27.8773 61.393299 28.0326 61.365799 28.233299 c
61.197399 28.0075 60.955601 27.811501 60.640301 27.645201 c
60.325001 27.479 59.977501 27.395901 59.5979 27.395901 c
59.1418 27.395901 58.768299 27.537001 58.477501 27.8193 c
58.1898 28.1047 58.045898 28.460699 58.045898 28.8873 c
58.045898 29.354601 58.188202 29.7169 58.4729 29.9741 c
58.757599 30.231199 59.1311 30.389601 59.5933 30.4492 c
60.911201 30.618601 l
h
58.909199 28.906099 m
58.909199 28.6614 58.996399 28.468599 59.170898 28.3274 c
59.345402 28.1863 59.551998 28.1157 59.790798 28.1157 c
60.0816 28.1157 60.363201 28.1847 60.6357 28.322701 c
61.094898 28.551701 61.324501 28.9265 61.324501 29.4471 c
61.324501 30.129299 l
61.223499 30.0634 61.0933 30.0086 60.9342 29.9646 c
60.775002 29.9207 60.6189 29.8894 60.465801 29.8706 c
59.965302 29.804701 l
59.665298 29.763901 59.4403 29.6996 59.290298 29.611799 c
59.036201 29.464399 58.909199 29.229099 58.909199 28.906099 c
h
W*
0 0 132 43 rc
57.045898 33.726299 m
63.697399 33.726299 l
63.697399 26.395901 l
57.045898 26.395901 l
h
f
Q
q
55.464802 32.716949 m
55.813801 32.716949 56.152 32.632259 56.479599 32.462898 c
56.807098 32.2967 57.056599 32.0802 57.2281 31.813601 c
57.393398 31.559601 57.503601 31.263201 57.558701 30.9245 c
57.607601 30.6924 57.632099 30.3223 57.632099 29.814199 c
54.0275 29.814199 l
54.042801 29.3029 54.160702 28.892 54.3811 28.581499 c
54.601501 28.2742 54.942799 28.120501 55.405102 28.120501 c
55.8367 28.120501 56.181099 28.2663 56.438301 28.558001 c
56.585201 28.7274 56.689301 28.923401 56.7505 29.146099 c
57.563301 29.146099 l
57.541801 28.961 57.469898 28.754 57.347401 28.525101 c
57.2281 28.2992 57.093399 28.114201 56.943401 27.9699 c
56.692299 27.719 56.381599 27.549601 56.0112 27.4618 c
55.812199 27.4116 55.5872 27.386499 55.336201 27.386499 c
54.723999 27.386499 54.205101 27.613899 53.779598 28.068701 c
53.354099 28.5266 53.1413 29.1665 53.1413 29.988199 c
53.1413 30.7974 53.355598 31.4545 53.784199 31.959499 c
54.2127 32.4645 54.7729 32.716949 55.464802 32.716949 c
h
56.7826 30.4869 m
56.749001 30.853901 56.670898 31.1472 56.5485 31.366699 c
56.321899 31.774401 55.943901 31.9783 55.414299 31.9783 c
55.034698 31.9783 54.716301 31.8372 54.459202 31.554899 c
54.202 31.2757 54.0658 30.9198 54.050499 30.4869 c
56.7826 30.4869 l
h
W*
0 0 132 43 rc
52.1413 33.716949 m
58.632099 33.716949 l
58.632099 26.386499 l
52.1413 26.386499 l
h
f
Q
q
49.582802 29.146 m
49.6073 28.863701 49.676201 28.647301 49.789398 28.4967 c
49.997601 28.223801 50.358799 28.0874 50.8731 28.0874 c
51.179199 28.0874 51.448601 28.1548 51.681301 28.2897 c
51.913898 28.4277 52.0303 28.6394 52.0303 28.924801 c
52.0303 29.1413 51.936901 29.305901 51.750198 29.4188 c
51.630798 29.487801 51.3951 29.567801 51.042999 29.6588 c
50.386398 29.8281 l
49.966999 29.934799 49.657799 30.054001 49.458801 30.185699 c
49.103699 30.4147 48.926201 30.7314 48.926201 31.136101 c
48.926201 31.612801 49.092999 31.9986 49.426701 32.2934 c
49.763401 32.58823 50.214901 32.735641 50.7813 32.735641 c
51.522099 32.735641 52.056301 32.512959 52.383801 32.0676 c
52.588902 31.785299 52.6884 31.4811 52.682301 31.1549 c
51.901699 31.1549 l
51.886398 31.346201 51.820599 31.5203 51.704201 31.677099 c
51.5144 31.899799 51.185398 32.011101 50.716999 32.011101 c
50.404701 32.011101 50.1675 31.950001 50.005199 31.8276 c
49.8461 31.705299 49.766499 31.5438 49.766499 31.3431 c
49.766499 31.123501 49.872101 30.947901 50.083302 30.816099 c
50.205799 30.7377 50.386398 30.668699 50.625099 30.6091 c
51.1716 30.4727 l
51.765499 30.3253 52.163399 30.1826 52.365501 30.0446 c
52.686901 29.8281 52.847599 29.487801 52.847599 29.0236 c
52.847599 28.5751 52.680801 28.187799 52.347099 27.861601 c
52.016499 27.5354 51.511398 27.372299 50.831799 27.372299 c
50.100101 27.372299 49.581299 27.5417 49.275101 27.8804 c
48.972099 28.2223 48.809799 28.6441 48.788399 29.146 c
49.582802 29.146 l
h
W
0 0 132 43 rc
47.788399 33.735641 m
53.847599 33.735641 l
53.847599 26.372299 l
47.788399 26.372299 l
h
f
Q
q
46.280201 32.716949 m
46.6292 32.716949 46.9674 32.632259 47.294998 32.462898 c
47.622501 32.2967 47.872002 32.0802 48.0434 31.813601 c
48.208801 31.559601 48.319 31.263201 48.3741 30.9245 c
48.423 30.6924 48.447498 30.3223 48.447498 29.814199 c
44.842899 29.814199 l
44.8582 29.3029 44.976101 28.892 45.196499 28.581499 c
45.416901 28.2742 45.758202 28.120501 46.220501 28.120501 c
46.6521 28.120501 46.996498 28.2663 47.253601 28.558001 c
47.4006 28.7274 47.5047 28.923401 47.565899 29.146099 c
48.3787 29.146099 l
48.357201 28.961 48.285301 28.754 48.1628 28.525101 c
48.0434 28.2992 47.908798 28.114201 47.758801 27.9699 c
47.507702 27.719 47.196999 27.549601 46.826599 27.4618 c
46.627602 27.4116 46.402599 27.386499 46.1516 27.386499 c
45.539398 27.386499 45.0205 27.613899 44.595001 28.068701 c
44.169498 28.5266 43.956699 29.1665 43.956699 29.988199 c
43.956699 30.7974 44.171001 31.4545 44.599602 31.959499 c
45.028099 32.4645 45.588299 32.716949 46.280201 32.716949 c
h
47.598 30.4869 m
47.5644 30.853901 47.486301 31.1472 47.363899 31.366699 c
47.137299 31.774401 46.7593 31.9783 46.229698 31.9783 c
45.850101 31.9783 45.5317 31.8372 45.274601 31.554899 c
45.017399 31.2757 44.881199 30.9198 44.865898 30.4869 c
47.598 30.4869 l
h
W*
0 0 132 43 rc
42.956699 33.716949 m
49.447498 33.716949 l
49.447498 26.386499 l
42.956699 26.386499 l
h
f
Q
q
42.661701 31.409 m
42.438301 31.1362 42.3265 30.820999 42.3265 30.4634 c
42.3265 27.5653 l
41.5 27.5653 l
41.5 32.604038 l
42.285198 32.604038 l
42.285198 31.7337 l
42.349499 31.903 42.507099 32.108501 42.758202 32.349998 c
43.009201 32.594631 43.2985 32.716949 43.625999 32.716949 c
43.6413 32.716949 43.6674 32.715382 43.704102 32.712238 c
43.740799 32.70911 43.8036 32.702831 43.892399 32.693432 c
43.892399 31.7995 l
43.843399 31.808901 43.797501 31.815201 43.754601 31.818399 c
43.714802 31.821501 43.670399 31.823099 43.621399 31.823099 c
43.205101 31.823099 42.885201 31.685101 42.661701 31.409 c
h
W
0 0 132 43 rc
40.5 33.716949 m
44.892399 33.716949 l
44.892399 26.5653 l
40.5 26.5653 l
h
f
ep
end
%%Trailer
%%EOF

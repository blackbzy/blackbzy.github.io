%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.6.1 (Build 23G93) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
30.349701 18.342501 m
26.8836 15.5357 21.9266 15.5357 18.460501 18.342501 c
19.800699 19.9974 l
22.485399 17.8234 26.3248 17.8234 29.009501 19.9974 c
30.349701 18.342501 l
h
W
0 0 132 43 rc
17.460501 20.9974 m
31.349701 20.9974 l
31.349701 14.5357 l
17.460501 14.5357 l
h
f
Q
q
19.903999 21.986601 2.1296 2.8769 rc
18.903999 25.863501 m
23.0336 25.863501 l
23.0336 20.986601 l
18.903999 20.986601 l
h
f
Q
q
26.511999 21.986601 2.1294999 2.8769 rc
25.511999 25.863501 m
29.6415 25.863501 l
29.6415 20.986601 l
25.511999 20.986601 l
h
f
Q
q
24 9.5 m
30.351299 9.5 35.5 14.6487 35.5 21 c
35.5 27.351299 30.351299 32.5 24 32.5 c
17.648701 32.5 12.5 27.351299 12.5 21 c
12.5 14.6487 17.648701 9.5 24 9.5 c
h
24 11.6295 m
29.1752 11.6295 33.370499 15.8248 33.370499 21 c
33.370499 26.1752 29.1752 30.370501 24 30.370501 c
18.8248 30.370501 14.6295 26.1752 14.6295 21 c
14.6295 15.8248 18.8248 11.6295 24 11.6295 c
h
W*
0 0 132 43 rc
11.5 33.5 m
36.5 33.5 l
36.5 8.5 l
11.5 8.5 l
h
f
Q
q
92.828102 10.4149 m
97.449997 23.5 l
100.508 23.5 l
105.094 10.4149 l
102.16 10.4149 l
101.325 13.1047 l
96.553703 13.1047 l
95.657501 10.4149 l
92.828102 10.4149 l
h
98.952499 20.5084 m
97.282997 15.3595 l
100.569 15.3595 l
98.952499 20.5084 l
h
W*
0 0 132 43 rc
91.828102 24.5 m
106.094 24.5 l
106.094 9.4148998 l
91.828102 9.4148998 l
h
f
Q
q
80.054398 18.9282 m
79.345596 19.845501 78.361504 20.304199 77.101997 20.304199 c
76.404999 20.304199 75.830902 20.1562 75.379799 19.8603 c
74.9991 19.6236 74.650497 19.2803 74.334198 18.8305 c
74.334198 23.482201 l
71.838799 23.482201 l
71.838799 10.4149 l
74.290298 10.4149 l
74.290298 11.6311 l
74.624199 11.1576 74.934601 10.8262 75.221703 10.6368 c
75.702003 10.3172 76.337601 10.1574 77.128403 10.1574 c
78.387802 10.1574 79.369003 10.6516 80.071999 11.6399 c
80.774902 12.6283 81.126404 13.8741 81.126404 15.3773 c
81.126404 16.8272 80.769096 18.0109 80.054398 18.9282 c
h
77.963097 13.0337 m
77.605797 12.507 77.105003 12.2436 76.460602 12.2436 c
75.716698 12.2436 75.163101 12.5158 74.799896 13.0603 c
74.436699 13.6048 74.255096 14.2913 74.255096 15.1198 c
74.255096 15.8241 74.343002 16.398199 74.5187 16.841999 c
74.858498 17.6765 75.4823 18.0937 76.390297 18.0937 c
77.286598 18.0937 77.901604 17.667601 78.235497 16.815399 c
78.411301 16.365601 78.4991 15.7975 78.4991 15.111 c
78.4991 14.2528 78.320503 13.5604 77.963097 13.0337 c
h
W*
0 0 132 43 rc
70.838799 24.482201 m
82.126404 24.482201 l
82.126404 9.1574001 l
70.838799 9.1574001 l
h
f
Q
q
66.023598 12.3413 m
65.924004 12.4419 65.874199 12.6904 65.874199 13.0869 c
65.874199 18.2003 l
67.429497 18.2003 l
67.429497 20.0023 l
65.874199 20.0023 l
65.874199 22.701 l
63.3964 22.701 l
63.3964 20.0023 l
62.060799 20.0023 l
62.060799 18.2003 l
63.3964 18.2003 l
63.3964 12.2436 l
63.3964 11.6399 63.536999 11.1931 63.8181 10.9031 c
64.251602 10.4474 65.059998 10.2403 66.243301 10.2817 c
67.429497 10.3261 l
67.429497 12.217 l
67.347504 12.2111 67.262604 12.2051 67.174698 12.1992 c
66.937401 12.1992 l
66.427803 12.1992 66.123199 12.2466 66.023598 12.3413 c
h
W
0 0 132 43 rc
61.060799 23.701 m
68.429497 23.701 l
68.429497 9.2403002 l
61.060799 9.2403002 l
h
f
Q
q
60.7509 11.5867 m
61.5592 12.5987 61.963402 13.8149 61.963402 15.2352 c
61.963402 16.631901 61.5592 17.842199 60.7509 18.8661 c
59.942501 19.8899 58.715199 20.4018 57.069199 20.4018 c
55.4231 20.4018 54.1959 19.8899 53.387501 18.8661 c
52.579102 17.842199 52.174999 16.631901 52.174999 15.2352 c
52.174999 13.8149 52.579102 12.5987 53.387501 11.5867 c
54.1959 10.5806 55.4231 10.0775 57.069199 10.0775 c
58.715199 10.0775 59.942501 10.5806 60.7509 11.5867 c
h
58.747501 12.9893 m
58.355 12.4626 57.792599 12.1992 57.060398 12.1992 c
56.328201 12.1992 55.762901 12.4626 55.364601 12.9893 c
54.972099 13.516 54.775799 14.2647 54.775799 15.2352 c
54.775799 16.205799 54.972099 16.9515 55.364601 17.4723 c
55.762901 17.999001 56.328201 18.2624 57.060398 18.2624 c
57.792599 18.2624 58.355 17.999001 58.747501 17.4723 c
59.1399 16.9515 59.336201 16.205799 59.336201 15.2352 c
59.336201 14.2647 59.1399 13.516 58.747501 12.9893 c
h
W*
0 0 132 43 rc
51.174999 21.4018 m
62.963402 21.4018 l
62.963402 9.0775003 l
51.174999 9.0775003 l
h
f
Q
q
47.7896 20.321899 m
48.779598 20.321899 49.588001 20.058599 50.214802 19.5319 c
50.847401 19.011101 51.163799 18.143999 51.163799 16.930799 c
51.163799 10.4149 l
48.598 10.4149 l
48.598 16.300501 l
48.598 16.8095 48.530701 17.2001 48.395901 17.4723 c
48.149899 17.9695 47.681301 18.218 46.990002 18.218 c
46.140701 18.218 45.5578 17.854 45.241501 17.126101 c
45.077499 16.7414 44.995399 16.2502 44.995399 15.6525 c
44.995399 10.4149 l
42.5 10.4149 l
42.5 20.0734 l
44.916401 20.0734 l
44.916401 18.6619 l
45.238499 19.159 45.543201 19.517099 45.8302 19.736 c
46.345699 20.1266 46.998798 20.321899 47.7896 20.321899 c
h
W
0 0 132 43 rc
41.5 21.321899 m
52.163799 21.321899 l
52.163799 9.4148998 l
41.5 9.4148998 l
h
f
Q
q
82.594498 8.5594997 m
82.910797 8.5417995 l
83.156799 8.5298996 83.391197 8.5388002 83.613701 8.5684004 c
83.836304 8.5979996 84.023804 8.6660995 84.176102 8.7726002 c
84.322601 8.8732004 84.457298 9.0832996 84.580299 9.4028997 c
84.709198 9.7224998 84.761902 9.9177999 84.738403 9.9888 c
81.223701 20.091101 l
84.009201 20.091101 l
86.100403 12.9538 l
88.0774 20.091101 l
90.739799 20.091101 l
87.453598 10.5747 l
86.8209 8.7399998 86.320099 7.6037002 85.950996 7.1658001 c
85.582001 6.7219 84.843903 6.5 83.736801 6.5 c
83.514198 6.5 83.335503 6.5029998 83.200798 6.5089002 c
83.066002 6.5089002 82.863899 6.5177999 82.594498 6.5355 c
82.594498 8.5594997 l
h
W
0 0 132 43 rc
80.223701 21.091101 m
91.739799 21.091101 l
91.739799 5.5 l
80.223701 5.5 l
h
f
Q
q
107.402 12.6376 m
107.402 21.2742 l
105.806 21.2742 l
105.806 23.5 l
111.5 23.5 l
111.5 21.2742 l
110.09 21.2742 l
110.09 12.6376 l
111.5 12.6376 l
111.5 10.4118 l
105.806 10.4118 l
105.806 12.6376 l
107.402 12.6376 l
h
W
0 0 132 43 rc
104.806 24.5 m
112.5 24.5 l
112.5 9.4118004 l
104.806 9.4118004 l
h
f
Q
q
76.047096 32.706539 m
76.447899 32.706539 76.783501 32.62558 77.053902 32.463699 c
77.210297 32.3703 77.387802 32.206799 77.586601 31.973301 c
77.586601 34.5 l
78.432098 34.5 l
78.432098 27.6157 l
77.640297 27.6157 l
77.640297 28.3116 l
77.435097 28.003401 77.192299 27.780701 76.912102 27.6437 c
76.631897 27.506701 76.310997 27.4382 75.949402 27.4382 c
75.366203 27.4382 74.861198 27.671801 74.434303 28.1388 c
74.0075 28.608999 73.794098 29.233299 73.794098 30.0117 c
73.794098 30.740299 73.987999 31.3708 74.375702 31.9032 c
74.766701 32.438801 75.323799 32.706539 76.047096 32.706539 c
h
74.722702 30.058399 m
74.722702 29.5228 74.841599 29.074499 75.079498 28.713301 c
75.317299 28.3521 75.698502 28.171499 76.223099 28.171499 c
76.630302 28.171499 76.964302 28.3381 77.224899 28.671301 c
77.4888 29.0075 77.620796 29.4886 77.620796 30.114401 c
77.620796 30.7465 77.485603 31.213499 77.215202 31.5156 c
76.944702 31.8207 76.610802 31.973301 76.213303 31.973301 c
75.770203 31.973301 75.410202 31.811399 75.133202 31.487499 c
74.859497 31.1637 74.722702 30.6873 74.722702 30.058399 c
h
W*
0 0 132 43 rc
72.794098 35.5 m
79.432098 35.5 l
79.432098 26.4382 l
72.794098 26.4382 l
h
f
Q
q
83.398003 32.557079 m
83.130898 32.432499 82.901199 32.250401 82.7089 32.010601 c
82.7089 34.5 l
81.853699 34.5 l
81.853699 27.6157 l
82.665001 27.6157 l
82.665001 28.2556 l
82.8507 28.0158 83.025002 27.841499 83.187897 27.7325 c
83.461601 27.5488 83.797096 27.4569 84.194603 27.4569 c
84.9049 27.4569 85.460403 27.7185 85.861198 28.2416 c
86.261902 28.7647 86.462303 29.4216 86.462303 30.2125 c
86.462303 31.047001 86.258698 31.6775 85.851402 32.104 c
85.447403 32.53373 84.919601 32.748569 84.267899 32.748569 c
83.9552 32.748569 83.665199 32.684738 83.398003 32.557079 c
h
85.206299 28.741301 m
84.971703 28.3801 84.6166 28.199499 84.1409 28.199499 c
83.508797 28.199499 83.077103 28.4751 82.845802 29.026199 c
82.722 29.318899 82.660103 29.7003 82.660103 30.1705 c
82.660103 30.821199 82.809898 31.2883 83.109703 31.5716 c
83.412697 31.855 83.764603 31.996599 84.165298 31.996599 c
84.624702 31.996599 84.971703 31.823799 85.206299 31.478201 c
85.444099 31.132601 85.563103 30.696699 85.563103 30.1705 c
85.563103 29.578899 85.444099 29.102501 85.206299 28.741301 c
h
W*
0 0 132 43 rc
80.853699 35.5 m
87.462303 35.5 l
87.462303 26.4569 l
80.853699 26.4569 l
h
f
Q
q
95.707298 31.627701 m
95.410797 31.387899 95.262497 30.9349 95.262497 30.2686 c
95.262497 27.6157 l
94.382896 27.6157 l
94.382896 34.5 l
95.262497 34.5 l
95.262497 31.940599 l
95.4711 32.192799 95.658401 32.3703 95.8246 32.473 c
96.108002 32.65049 96.461502 32.739231 96.885101 32.739231 c
97.644203 32.739231 98.158997 32.4855 98.429398 31.9779 c
98.576103 31.7008 98.649399 31.316299 98.649399 30.824301 c
98.649399 27.6157 l
97.745201 27.6157 l
97.745201 30.768299 l
97.745201 31.1357 97.696404 31.405001 97.598602 31.5763 c
97.439003 31.8503 97.139198 31.987301 96.699402 31.987301 c
96.334503 31.987301 96.003799 31.867399 95.707298 31.627701 c
h
W
0 0 132 43 rc
93.382896 35.5 m
99.649399 35.5 l
99.649399 26.6157 l
93.382896 26.6157 l
h
f
Q
q
115.768 30.6469 m
115.97 30.671801 116.105 30.752701 116.173 30.8897 c
116.212 30.9645 116.232 31.071899 116.232 31.212 c
116.232 31.4984 116.124 31.7055 115.909 31.8332 c
115.698 31.9639 115.393 32.029301 114.995 32.029301 c
114.536 32.029301 114.21 31.910999 114.018 31.6744 c
113.91 31.5436 113.84 31.349001 113.808 31.090599 c
112.987 31.090599 l
113.003 31.7071 113.212 32.135201 113.612 32.374901 c
114.016 32.617802 114.484 32.739231 115.015 32.739231 c
115.631 32.739231 116.131 32.62714 116.515 32.403 c
116.897 32.178799 117.087 31.83 117.087 31.3568 c
117.087 28.4751 l
117.087 28.387899 117.105 28.3179 117.141 28.2649 c
117.18 28.212 117.26 28.185499 117.38 28.185499 c
117.419 28.185499 117.463 28.187099 117.512 28.190201 c
117.561 28.1964 117.613 28.204201 117.669 28.213499 c
117.669 27.5924 l
117.532 27.555 117.428 27.5317 117.356 27.522301 c
117.284 27.513 117.187 27.508301 117.063 27.508301 c
116.76 27.508301 116.54 27.611099 116.403 27.816601 c
116.331 27.925501 116.281 28.0797 116.251 28.2789 c
116.072 28.054701 115.815 27.8601 115.479 27.695101 c
115.144 27.5301 114.774 27.447599 114.37 27.447599 c
113.884 27.447599 113.487 27.5877 113.177 27.867901 c
112.871 28.1513 112.718 28.5047 112.718 28.928101 c
112.718 29.392099 112.87 29.751699 113.173 30.007 c
113.476 30.2623 113.873 30.4196 114.365 30.478701 c
115.768 30.6469 l
h
113.637 28.9468 m
113.637 28.703899 113.73 28.512501 113.915 28.372299 c
114.101 28.232201 114.321 28.162201 114.575 28.162201 c
114.885 28.162201 115.184 28.2307 115.474 28.367701 c
115.963 28.594999 116.207 28.966999 116.207 29.4839 c
116.207 30.1611 l
116.1 30.095699 115.961 30.0413 115.792 29.9977 c
115.623 29.9541 115.456 29.922899 115.294 29.904301 c
114.761 29.8389 l
114.442 29.798401 114.202 29.7346 114.042 29.6474 c
113.772 29.500999 113.637 29.2675 113.637 28.9468 c
h
W*
0 0 132 43 rc
111.718 33.739231 m
118.669 33.739231 l
118.669 26.447599 l
111.718 26.447599 l
h
f
Q
q
119.856 32.538399 m
119.579 32.410702 119.317 32.2006 119.069 31.9079 c
119.069 32.617802 l
118.233 32.617802 l
118.233 27.6157 l
119.113 27.6157 l
119.113 30.235901 l
119.113 30.562799 119.134 30.8134 119.177 30.987801 c
119.222 31.1653 119.318 31.3365 119.465 31.5016 c
119.648 31.7071 119.859 31.844101 120.1 31.9126 c
120.234 31.952999 120.405 31.973301 120.614 31.973301 c
121.024 31.973301 121.308 31.8176 121.464 31.506201 c
121.558 31.319401 121.606 31.0734 121.606 30.768299 c
121.606 27.6157 l
122.5 27.6157 l
122.5 30.824301 l
122.5 31.328699 122.428 31.7164 122.285 31.987301 c
122.024 32.482399 121.523 32.729889 120.78 32.729889 c
120.441 32.729889 120.133 32.666061 119.856 32.538399 c
h
W
0 0 132 43 rc
117.233 33.729889 m
123.5 33.729889 l
123.5 26.6157 l
117.233 26.6157 l
h
f
Q
q
106.362 32.445 m
106.193 32.332901 106.004 32.1539 105.795 31.9079 c
105.795 32.617802 l
104.925 32.617802 l
104.925 27.6157 l
105.805 27.6157 l
105.805 30.2686 l
105.805 30.913099 105.94 31.358299 106.21 31.6043 c
106.484 31.8503 106.787 31.973301 107.119 31.973301 c
107.484 31.973301 107.734 31.856501 107.867 31.622999 c
107.952 31.4673 107.994 31.219801 107.994 30.8804 c
107.994 27.6157 l
108.889 27.6157 l
108.889 30.5254 l
108.889 31.042299 109.012 31.411301 109.26 31.632299 c
109.511 31.853399 109.809 31.9639 110.154 31.9639 c
110.405 31.9639 110.617 31.901699 110.79 31.7771 c
110.966 31.652599 111.054 31.4237 111.054 31.090599 c
111.054 27.6157 l
111.968 27.6157 l
111.968 30.945801 l
111.968 31.387899 111.899 31.739799 111.762 32.001301 c
111.508 32.487 111.029 32.729889 110.325 32.729889 c
109.996 32.729889 109.7 32.664501 109.436 32.53373 c
109.172 32.406101 108.942 32.208401 108.747 31.940599 c
108.63 32.158501 108.499 32.323601 108.356 32.435699 c
108.102 32.631809 107.766 32.729889 107.349 32.729889 c
106.981 32.729889 106.652 32.634918 106.362 32.445 c
h
W
0 0 132 43 rc
103.925 33.729889 m
112.968 33.729889 l
112.968 26.6157 l
103.925 26.6157 l
h
f
Q
q
100.661 28.671301 m
100.576 28.8332 100.534 29.0418 100.534 29.2971 c
100.534 32.617802 l
99.634399 32.617802 l
99.634399 29.217699 l
99.634399 28.7911 99.707703 28.450199 99.854401 28.194901 c
100.1248 27.7185 100.633 27.480301 101.379 27.480301 c
101.858 27.480301 102.265 27.611099 102.601 27.872601 c
102.77 28.003401 102.912 28.1637 103.026 28.353701 c
103.016 27.6157 l
103.847 27.6157 l
103.847 32.617802 l
102.967 32.617802 l
102.967 30.1611 l
102.967 29.6723 102.907 29.2878 102.787 29.0075 c
102.565 28.4844 102.148 28.2229 101.536 28.2229 c
101.109 28.2229 100.817 28.372299 100.661 28.671301 c
h
W
0 0 132 43 rc
98.634399 33.617802 m
104.847 33.617802 l
104.847 26.480301 l
98.634399 26.480301 l
h
f
Q
q
89.050301 28.545099 m
90.4627 32.617802 l
91.435303 32.617802 l
91.311501 32.2971 91.036201 31.565399 90.609398 30.422701 c
90.2901 29.563299 90.022903 28.8627 89.807899 28.320999 c
89.299599 27.044399 88.9412 26.266001 88.732697 25.985701 c
88.5242 25.7055 88.165802 25.565399 87.657501 25.565399 c
87.533699 25.565399 87.437599 25.570101 87.369202 25.579399 c
87.304001 25.588699 87.222504 25.6059 87.124802 25.6308 c
87.124802 26.3967 l
87.277901 26.3563 87.388702 26.331301 87.4571 26.322001 c
87.525497 26.3127 87.5858 26.308001 87.638 26.308001 c
87.800903 26.308001 87.9198 26.334499 87.994698 26.3874 c
88.072899 26.437201 88.1381 26.4995 88.190201 26.5742 c
88.206497 26.5991 88.265099 26.726801 88.366096 26.957199 c
88.467102 27.187599 88.540497 27.358801 88.586098 27.4709 c
86.650703 32.617802 l
87.647697 32.617802 l
89.050301 28.545099 l
h
W
0 0 132 43 rc
85.650703 33.617802 m
92.435303 33.617802 l
92.435303 24.565399 l
85.650703 24.565399 l
h
f
Q
q
71.074097 32.729889 m
71.445503 32.729889 71.805603 32.645821 72.154198 32.477699 c
72.5028 32.312698 72.768303 32.097801 72.950798 31.8332 c
73.126701 31.580999 73.244003 31.286699 73.302696 30.950399 c
73.354797 30.719999 73.380898 30.3526 73.380898 29.8482 c
69.544403 29.8482 l
69.560699 29.3407 69.686203 28.9328 69.9207 28.6245 c
70.155296 28.319401 70.5186 28.1668 71.010597 28.1668 c
71.470001 28.1668 71.836502 28.3116 72.110199 28.6012 c
72.266602 28.7693 72.377403 28.9639 72.442497 29.184999 c
73.307602 29.184999 l
73.284698 29.001301 73.208199 28.795799 73.077904 28.568501 c
72.950798 28.344299 72.807404 28.160601 72.647797 28.017401 c
72.3806 27.768299 72.049896 27.600201 71.655701 27.513 c
71.443901 27.4632 71.204399 27.4382 70.937302 27.4382 c
70.285599 27.4382 69.733398 27.664 69.280502 28.115499 c
68.827599 28.570101 68.601196 29.2052 68.601196 30.021 c
68.601196 30.824301 68.8293 31.476601 69.2854 31.9779 c
69.741501 32.479198 70.337799 32.729889 71.074097 32.729889 c
h
72.4767 30.5161 m
72.440903 30.8804 72.357803 31.171499 72.227501 31.3895 c
71.986397 31.794201 71.584 31.996599 71.020401 31.996599 c
70.616302 31.996599 70.277496 31.856501 70.003799 31.5763 c
69.730103 31.2992 69.585098 30.945801 69.568901 30.5161 c
72.4767 30.5161 l
h
W*
0 0 132 43 rc
67.601196 33.729889 m
74.380898 33.729889 l
74.380898 26.4382 l
67.601196 26.4382 l
h
f
Q
q
65.470703 32.706539 m
65.881203 32.706539 66.239601 32.61002 66.545799 32.417 c
66.711998 32.307999 66.881401 32.1492 67.0541 31.940599 c
67.0541 32.571098 l
67.865402 32.571098 l
67.865402 28.0221 l
67.865402 27.3869 67.767601 26.885599 67.572098 26.5182 c
67.207199 25.839399 66.518097 25.5 65.504898 25.5 c
64.9412 25.5 64.467201 25.621401 64.082703 25.8643 c
63.6982 26.104 63.4832 26.480801 63.437599 26.9946 c
64.331902 26.9946 l
64.374298 26.770399 64.459 26.597601 64.586098 26.476101 c
64.784798 26.289301 65.097603 26.1959 65.524399 26.1959 c
66.198898 26.1959 66.640297 26.423201 66.848801 26.8778 c
66.972702 27.145599 67.029701 27.623501 67.019897 28.3116 c
66.844002 28.056299 66.632202 27.8664 66.384598 27.7418 c
66.136902 27.6173 65.809502 27.555 65.402199 27.555 c
64.835297 27.555 64.338501 27.7465 63.911598 28.129499 c
63.488098 28.5156 63.276299 29.1523 63.276299 30.0397 c
63.276299 30.8773 63.4897 31.531099 63.9165 32.001301 c
64.346603 32.4715 64.8647 32.706539 65.470703 32.706539 c
h
67.0541 30.1378 m
67.0541 30.757401 66.920502 31.2167 66.653397 31.5156 c
66.3862 31.814501 66.0457 31.9639 65.631897 31.9639 c
65.012901 31.9639 64.589302 31.6868 64.361298 31.132601 c
64.2407 30.8368 64.180397 30.4491 64.180397 29.969601 c
64.180397 29.406099 64.2994 28.9764 64.537201 28.680599 c
64.778297 28.387899 65.100899 28.2416 65.504898 28.2416 c
66.136902 28.2416 66.581703 28.514 66.839104 29.058901 c
66.982399 29.367201 67.0541 29.726801 67.0541 30.1378 c
h
W*
0 0 132 43 rc
62.276299 33.706539 m
68.865402 33.706539 l
68.865402 24.5 l
62.276299 24.5 l
h
f
Q
q
59.295399 30.987801 m
59.253101 30.8134 59.231899 30.562799 59.231899 30.235901 c
59.231899 27.6157 l
58.3522 27.6157 l
58.3522 32.617802 l
59.187901 32.617802 l
59.187901 31.9079 l
59.435501 32.2006 59.6978 32.410702 59.974701 32.538399 c
60.251701 32.666061 60.559601 32.729889 60.898399 32.729889 c
61.6413 32.729889 62.143002 32.482399 62.403702 31.987301 c
62.547001 31.7164 62.618698 31.328699 62.618698 30.824301 c
62.618698 27.6157 l
61.7243 27.6157 l
61.7243 30.768299 l
61.7243 31.0734 61.677101 31.319401 61.5826 31.506201 c
61.426201 31.8176 61.142799 31.973301 60.732201 31.973301 c
60.523701 31.973301 60.352699 31.952999 60.219101 31.9126 c
59.978001 31.844101 59.766201 31.7071 59.583801 31.5016 c
59.437099 31.3365 59.341 31.1653 59.295399 30.987801 c
h
W
0 0 132 43 rc
57.3522 33.729889 m
63.618698 33.729889 l
63.618698 26.6157 l
57.3522 26.6157 l
h
f
Q
q
55.886299 30.6469 m
56.088299 30.671801 56.223499 30.752701 56.291901 30.8897 c
56.331001 30.9645 56.350601 31.071899 56.350601 31.212 c
56.350601 31.4984 56.243099 31.7055 56.028 31.8332 c
55.816299 31.9639 55.5116 32.029301 55.114101 32.029301 c
54.654701 32.029301 54.328899 31.910999 54.1367 31.6744 c
54.029202 31.5436 53.959099 31.349001 53.926498 31.090599 c
53.105499 31.090599 l
53.121799 31.7071 53.330299 32.135201 53.731098 32.374901 c
54.135101 32.617802 54.6026 32.739231 55.133701 32.739231 c
55.7495 32.739231 56.249599 32.62714 56.633999 32.403 c
57.015202 32.178799 57.205799 31.83 57.205799 31.3568 c
57.205799 28.4751 l
57.205799 28.387899 57.223801 28.3179 57.259602 28.2649 c
57.298698 28.212 57.378502 28.185499 57.4991 28.185499 c
57.5382 28.185499 57.582199 28.187099 57.631001 28.190201 c
57.679901 28.1964 57.731998 28.204201 57.787399 28.213499 c
57.787399 27.5924 l
57.6506 27.555 57.546299 27.5317 57.474602 27.522301 c
57.403 27.513 57.305199 27.508301 57.1814 27.508301 c
56.878399 27.508301 56.658501 27.611099 56.521599 27.816601 c
56.450001 27.925501 56.399502 28.0797 56.370098 28.2789 c
56.190899 28.054701 55.933498 27.8601 55.598 27.695101 c
55.262402 27.5301 54.892601 27.447599 54.488602 27.447599 c
54.003101 27.447599 53.605598 27.5877 53.296101 27.867901 c
52.989799 28.1513 52.8367 28.5047 52.8367 28.928101 c
52.8367 29.392099 52.988201 29.751699 53.291199 30.007 c
53.5942 30.2623 53.991699 30.4196 54.4837 30.478701 c
55.886299 30.6469 l
h
53.755501 28.9468 m
53.755501 28.703899 53.8484 28.512501 54.0341 28.372299 c
54.219799 28.232201 54.439701 28.162201 54.693802 28.162201 c
55.003399 28.162201 55.303101 28.2307 55.593102 28.367701 c
56.081799 28.594999 56.326199 28.966999 56.326199 29.4839 c
56.326199 30.1611 l
56.218601 30.095699 56.0802 30.0413 55.910702 29.9977 c
55.741299 29.9541 55.575199 29.922899 55.412201 29.904301 c
54.879501 29.8389 l
54.560299 29.798401 54.320801 29.7346 54.161098 29.6474 c
53.890701 29.500999 53.755501 29.2675 53.755501 28.9468 c
h
W*
0 0 132 43 rc
51.8367 33.739231 m
58.787399 33.739231 l
58.787399 26.447599 l
51.8367 26.447599 l
h
f
Q
q
51.3092 31.431499 m
51.071301 31.160601 50.9524 30.8477 50.9524 30.492701 c
50.9524 27.6157 l
50.072701 27.6157 l
50.072701 32.617802 l
50.908401 32.617802 l
50.908401 31.753799 l
50.976799 31.9219 51.1446 32.125801 51.4118 32.365601 c
51.679001 32.608459 51.9869 32.729889 52.335499 32.729889 c
52.351799 32.729889 52.379501 32.728329 52.418598 32.72522 c
52.457699 32.722111 52.524399 32.715881 52.6189 32.706539 c
52.6189 31.819099 l
52.566799 31.828501 52.517899 31.8347 52.472301 31.837799 c
52.43 31.8409 52.382702 31.842501 52.330601 31.842501 c
51.887501 31.842501 51.547001 31.7055 51.3092 31.431499 c
h
W
0 0 132 43 rc
49.072701 33.729889 m
53.6189 33.729889 l
53.6189 26.6157 l
49.072701 26.6157 l
h
f
Q
q
48.276402 31.431499 m
48.038502 31.160601 47.919601 30.8477 47.919601 30.492701 c
47.919601 27.6157 l
47.039902 27.6157 l
47.039902 32.617802 l
47.875599 32.617802 l
47.875599 31.753799 l
47.944 31.9219 48.111801 32.125801 48.379002 32.365601 c
48.646198 32.608459 48.954102 32.729889 49.3027 32.729889 c
49.319 32.729889 49.346699 32.728329 49.385799 32.72522 c
49.4249 32.722111 49.491699 32.715881 49.586102 32.706539 c
49.586102 31.819099 l
49.534 31.828501 49.4851 31.8347 49.439499 31.837799 c
49.397202 31.8409 49.349899 31.842501 49.297798 31.842501 c
48.854698 31.842501 48.514198 31.7055 48.276402 31.431499 c
h
W
0 0 132 43 rc
46.039902 33.729889 m
50.586102 33.729889 l
50.586102 26.6157 l
46.039902 26.6157 l
h
f
Q
q
44.549599 30.6469 m
44.751598 30.671801 44.886799 30.752701 44.9552 30.8897 c
44.994301 30.9645 45.013901 31.071899 45.013901 31.212 c
45.013901 31.4984 44.906399 31.7055 44.691299 31.8332 c
44.479599 31.9639 44.1749 32.029301 43.777401 32.029301 c
43.318001 32.029301 42.992199 31.910999 42.799999 31.6744 c
42.692501 31.5436 42.622398 31.349001 42.589802 31.090599 c
41.768799 31.090599 l
41.785099 31.7071 41.993599 32.135201 42.394402 32.374901 c
42.798401 32.617802 43.2659 32.739231 43.797001 32.739231 c
44.4128 32.739231 44.912899 32.62714 45.297298 32.403 c
45.678501 32.178799 45.869099 31.83 45.869099 31.3568 c
45.869099 28.4751 l
45.869099 28.387899 45.8871 28.3179 45.922901 28.2649 c
45.962002 28.212 46.041801 28.185499 46.162399 28.185499 c
46.2015 28.185499 46.245499 28.187099 46.2943 28.190201 c
46.343201 28.1964 46.395302 28.204201 46.450699 28.213499 c
46.450699 27.5924 l
46.3139 27.555 46.209599 27.5317 46.137901 27.522301 c
46.066299 27.513 45.968498 27.508301 45.8447 27.508301 c
45.541698 27.508301 45.3218 27.611099 45.184898 27.816601 c
45.1133 27.925501 45.062801 28.0797 45.033401 28.2789 c
44.854198 28.054701 44.596802 27.8601 44.261299 27.695101 c
43.925701 27.5301 43.555901 27.447599 43.151901 27.447599 c
42.666401 27.447599 42.268902 27.5877 41.9594 27.867901 c
41.653099 28.1513 41.5 28.5047 41.5 28.928101 c
41.5 29.392099 41.651501 29.751699 41.954498 30.007 c
42.2575 30.2623 42.654999 30.4196 43.146999 30.478701 c
44.549599 30.6469 l
h
42.4188 28.9468 m
42.4188 28.703899 42.5116 28.512501 42.697399 28.372299 c
42.883099 28.232201 43.103001 28.162201 43.357101 28.162201 c
43.666698 28.162201 43.9664 28.2307 44.256401 28.367701 c
44.745098 28.594999 44.989399 28.966999 44.989399 29.4839 c
44.989399 30.1611 l
44.881901 30.095699 44.7435 30.0413 44.574001 29.9977 c
44.404598 29.9541 44.238499 29.922899 44.0755 29.904301 c
43.542801 29.8389 l
43.223499 29.798401 42.9841 29.7346 42.824402 29.6474 c
42.554001 29.500999 42.4188 29.2675 42.4188 28.9468 c
h
W*
0 0 132 43 rc
40.5 33.739231 m
47.450699 33.739231 l
47.450699 26.447599 l
40.5 26.447599 l
h
f
ep
end
%%Trailer
%%EOF

%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.6.1 (Build 23G93) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
1 1 1 sc
q
31.370501 21 m
31.370501 15.8248 27.1752 11.6295 22 11.6295 c
16.8248 11.6295 12.6295 15.8248 12.6295 21 c
12.6295 26.1752 16.8248 30.370501 22 30.370501 c
27.1752 30.370501 31.370501 26.1752 31.370501 21 c
h
33.5 21 m
33.5 14.6487 28.351299 9.5 22 9.5 c
15.6487 9.5 10.5 14.6487 10.5 21 c
10.5 27.351299 15.6487 32.5 22 32.5 c
28.351299 32.5 33.5 27.351299 33.5 21 c
h
16.5 17.739401 m
19.9984 14.7535 25.0016 14.7535 28.5 17.739401 c
27.1474 19.5 l
24.437599 17.187201 20.562401 17.187201 17.8526 19.5 c
16.5 17.739401 l
h
17.5 21.5 m
17.5 24.5 l
19.5 24.5 l
19.5 21.5 l
17.5 21.5 l
h
24.5 24.5 m
24.5 21.5 l
26.5 21.5 l
26.5 24.5 l
24.5 24.5 l
h
W*
0 0 132 43 rc
9.5 33.5 m
34.5 33.5 l
34.5 8.5 l
9.5 8.5 l
h
f
Q
q
96.144096 30.068501 m
96.144096 30.7663 96.292999 31.2407 96.590698 31.4918 c
96.888496 31.742901 97.220703 31.8685 97.587196 31.8685 c
98.0289 31.8685 98.330002 31.725 98.490303 31.438 c
98.588501 31.258699 98.637604 30.976601 98.637604 30.591801 c
98.637604 27.290199 l
99.545601 27.290199 l
99.545601 30.650499 l
99.545601 31.165701 99.472 31.568501 99.324699 31.8587 c
99.053101 32.390202 98.536102 32.655972 97.773697 32.655972 c
97.348297 32.655972 96.993202 32.563042 96.708504 32.377201 c
96.541702 32.2696 96.3535 32.083698 96.144096 31.819599 c
96.144096 34.5 l
95.260597 34.5 l
95.260597 27.290199 l
96.144096 27.290199 l
96.144096 30.068501 l
h
W
0 0 132 43 rc
94.260597 35.5 m
100.5456 35.5 l
100.5456 26.290199 l
94.260597 26.290199 l
h
f
Q
q
116.738 30.4646 m
116.941 30.4907 117.077 30.5755 117.146 30.719 c
117.185 30.797199 117.205 30.9097 117.205 31.056499 c
117.205 31.356501 117.097 31.573299 116.881 31.707001 c
116.668 31.844 116.362 31.9125 115.963 31.9125 c
115.501 31.9125 115.174 31.7885 114.981 31.540701 c
114.873 31.403799 114.803 31.1999 114.77 30.9293 c
113.946 30.9293 l
113.962 31.5749 114.171 32.0233 114.574 32.274399 c
114.98 32.528759 115.449 32.65593 115.983 32.65593 c
116.601 32.65593 117.103 32.53854 117.489 32.303799 c
117.872 32.069 118.064 31.7038 118.064 31.208099 c
118.064 28.190201 l
118.064 28.098801 118.082 28.025499 118.118 27.969999 c
118.157 27.9146 118.237 27.8869 118.358 27.8869 c
118.397 27.8869 118.442 27.8885 118.491 27.8918 c
118.54 27.8983 118.592 27.9065 118.648 27.916201 c
118.648 27.265699 l
118.51 27.226601 118.406 27.202101 118.334 27.192301 c
118.262 27.182501 118.164 27.177601 118.039 27.177601 c
117.735 27.177601 117.514 27.285299 117.377 27.5005 c
117.305 27.614599 117.254 27.775999 117.224 27.984699 c
117.044 27.749901 116.786 27.546101 116.449 27.373301 c
116.112 27.2005 115.74 27.1141 115.335 27.1141 c
114.847 27.1141 114.448 27.260799 114.137 27.5543 c
113.829 27.851 113.676 28.2211 113.676 28.6646 c
113.676 29.150499 113.828 29.5271 114.132 29.7945 c
114.436 30.061899 114.836 30.226601 115.33 30.2885 c
116.738 30.4646 l
h
114.598 28.6842 m
114.598 28.4298 114.692 28.2293 114.878 28.0825 c
115.065 27.935801 115.286 27.8624 115.541 27.8624 c
115.852 27.8624 116.153 27.9342 116.444 28.0777 c
116.935 28.315701 117.18 28.7054 117.18 29.2467 c
117.18 29.9559 l
117.072 29.8874 116.933 29.8304 116.763 29.7847 c
116.593 29.7391 116.426 29.706499 116.262 29.686899 c
115.727 29.618401 l
115.407 29.576 115.166 29.509199 115.006 29.4179 c
114.734 29.264601 114.598 29.02 114.598 28.6842 c
h
W*
0 0 132 43 rc
112.676 33.65593 m
119.648 33.65593 l
119.648 26.1141 l
112.676 26.1141 l
h
f
Q
q
120.162 30.821699 m
120.12 30.639099 120.098 30.3766 120.098 30.034201 c
120.098 27.290199 l
119.215 27.290199 l
119.215 32.52882 l
120.054 32.52882 l
120.054 31.785299 l
120.303 32.0919 120.566 32.312 120.845 32.445702 c
121.123 32.579369 121.432 32.64621 121.772 32.64621 c
122.518 32.64621 123.022 32.387001 123.284 31.8685 c
123.428 31.584801 123.5 31.178801 123.5 30.6506 c
123.5 27.290199 l
122.602 27.290199 l
122.602 30.5919 l
122.602 30.9114 122.554 31.169001 122.459 31.3647 c
122.302 31.6908 122.018 31.8538 121.605 31.8538 c
121.396 31.8538 121.224 31.8326 121.09 31.790199 c
120.848 31.7185 120.635 31.575001 120.452 31.3598 c
120.305 31.187 120.208 31.007601 120.162 30.821699 c
h
W
0 0 132 43 rc
118.215 33.64621 m
124.5 33.64621 l
124.5 26.290199 l
118.215 26.290199 l
h
f
Q
q
95.660004 23.217699 m
91.052002 10.3499 l
93.872803 10.3499 l
94.766403 12.995 l
99.5233 12.995 l
100.3555 10.3499 l
103.282 10.3499 l
98.708603 23.217699 l
95.660004 23.217699 l
h
95.4935 15.2124 m
97.157997 20.2757 l
98.769897 15.2124 l
95.4935 15.2124 l
h
W*
0 0 132 43 rc
90.052002 24.217699 m
104.282 24.217699 l
104.282 9.3499002 l
90.052002 9.3499002 l
h
f
Q
q
75.3731 20.0749 m
76.628799 20.0749 77.609901 19.623899 78.316597 18.7218 c
79.029099 17.8197 79.385399 16.655701 79.385399 15.2298 c
79.385399 13.7516 79.035004 12.5265 78.334099 11.5546 c
77.633301 10.5827 76.655098 10.0967 75.399399 10.0967 c
74.611 10.0967 73.977303 10.2538 73.498398 10.5681 c
73.212196 10.7543 72.902702 11.0803 72.569801 11.5459 c
72.569801 10.3499 l
70.125603 10.3499 l
70.125603 23.200199 l
72.613602 23.200199 l
72.613602 18.625799 l
72.929001 19.0681 73.276497 19.4056 73.656097 19.638399 c
74.105797 19.929399 74.678101 20.0749 75.3731 20.0749 c
h
74.733597 12.1482 m
75.375999 12.1482 75.875397 12.4072 76.231598 12.9252 c
76.587898 13.4431 76.765999 14.1241 76.765999 14.968 c
76.765999 15.6431 76.678398 16.201799 76.503197 16.6441 c
76.170303 17.4821 75.557098 17.901199 74.663498 17.901199 c
73.758301 17.901199 73.136299 17.4909 72.7976 16.6703 c
72.622398 16.233801 72.534798 15.6692 72.534798 14.9767 c
72.534798 14.1619 72.715797 13.4868 73.077904 12.9514 c
73.440002 12.4159 73.991898 12.1482 74.733597 12.1482 c
h
W*
0 0 132 43 rc
69.125603 24.200199 m
80.385399 24.200199 l
80.385399 9.0966997 l
69.125603 9.0966997 l
h
f
Q
q
64.179001 12.9775 m
64.179001 12.5876 64.228699 12.3432 64.328003 12.2442 c
64.427299 12.1511 64.730904 12.1046 65.238998 12.1046 c
65.475601 12.1046 l
65.563202 12.1104 65.647903 12.1162 65.729599 12.122 c
65.729599 10.2626 l
64.546997 10.2189 l
63.367199 10.1782 62.561298 10.3819 62.129101 10.83 c
61.848801 11.1152 61.708599 11.5546 61.708599 12.1482 c
61.708599 18.005899 l
60.376999 18.005899 l
60.376999 19.778099 l
61.708599 19.778099 l
61.708599 22.431999 l
64.179001 22.431999 l
64.179001 19.778099 l
65.729599 19.778099 l
65.729599 18.005899 l
64.179001 18.005899 l
64.179001 12.9775 l
h
W
0 0 132 43 rc
59.376999 23.431999 m
66.729599 23.431999 l
66.729599 9.1781998 l
59.376999 9.1781998 l
h
f
Q
q
60.279999 15.0902 m
60.279999 13.6934 59.876999 12.4974 59.070999 11.5022 c
58.265099 10.5128 57.0415 10.0181 55.400398 10.0181 c
53.7593 10.0181 52.535801 10.5128 51.729801 11.5022 c
50.923901 12.4974 50.520901 13.6934 50.520901 15.0902 c
50.520901 16.463699 50.923901 17.653799 51.729801 18.6607 c
52.535801 19.6675 53.7593 20.1709 55.400398 20.1709 c
57.0415 20.1709 58.265099 19.6675 59.070999 18.6607 c
59.876999 17.653799 60.279999 16.463699 60.279999 15.0902 c
h
55.391701 12.1046 m
56.1217 12.1046 56.6824 12.3635 57.0737 12.8815 c
57.465 13.3995 57.660599 14.1357 57.660599 15.0902 c
57.660599 16.0446 57.465 16.777901 57.0737 17.2901 c
56.6824 17.8081 56.1217 18.066999 55.391701 18.066999 c
54.661598 18.066999 54.098 17.8081 53.700901 17.2901 c
53.309601 16.777901 53.113998 16.0446 53.113998 15.0902 c
53.113998 14.1357 53.309601 13.3995 53.700901 12.8815 c
54.098 12.3635 54.661598 12.1046 55.391701 12.1046 c
h
W*
0 0 132 43 rc
49.520901 21.1709 m
61.279999 21.1709 l
61.279999 9.0180998 l
49.520901 9.0180998 l
h
f
Q
q
48.566601 19.315399 m
47.9417 19.833401 47.1357 20.0924 46.148701 20.0924 c
45.360298 20.0924 44.709099 19.900299 44.195202 19.516199 c
43.909 19.3009 43.605301 18.948799 43.2841 18.4599 c
43.2841 19.8479 l
40.875 19.8479 l
40.875 10.3499 l
43.3629 10.3499 l
43.3629 15.5005 l
43.3629 16.088301 43.444698 16.571301 43.6082 16.9496 c
43.923599 17.665501 44.5047 18.023399 45.351501 18.023399 c
46.040699 18.023399 46.5079 17.778999 46.753201 17.2901 c
46.887501 17.0224 46.9547 16.6383 46.9547 16.1378 c
46.9547 10.3499 l
49.512699 10.3499 l
49.512699 16.757601 l
49.512699 17.9506 49.197399 18.803301 48.566601 19.315399 c
h
W
0 0 132 43 rc
39.875 21.0924 m
50.512699 21.0924 l
50.512699 9.3499002 l
39.875 9.3499002 l
h
f
Q
q
81.164398 8.5079002 m
80.849098 8.5253 l
80.849098 6.5349002 l
81.117699 6.5174999 81.319199 6.5086999 81.453499 6.5086999 c
81.587898 6.5029001 81.765999 6.5 81.9879 6.5 c
83.091698 6.5 83.827599 6.7182002 84.195503 7.1546998 c
84.563499 7.5854001 85.062798 8.7027998 85.693604 10.507 c
88.970001 19.8654 l
86.315598 19.8654 l
84.344498 12.8466 l
82.259499 19.8654 l
79.482399 19.8654 l
82.986603 9.9308004 l
83.010002 9.8610001 82.957397 9.6688995 82.828903 9.3547001 c
82.706299 9.0403996 82.571999 8.8338003 82.425903 8.7348003 c
82.274101 8.6301003 82.087196 8.5632 81.865303 8.5340996 c
81.643303 8.5050001 81.409698 8.4961996 81.164398 8.5079002 c
h
W
0 0 132 43 rc
78.482399 20.8654 m
89.970001 20.8654 l
89.970001 5.5 l
78.482399 5.5 l
h
f
Q
q
106.732 30.068501 m
106.732 30.7435 106.868 31.209801 107.14 31.4674 c
107.415 31.725 107.719 31.8538 108.053 31.8538 c
108.419 31.8538 108.669 31.731501 108.804 31.487 c
108.889 31.3239 108.931 31.064699 108.931 30.7092 c
108.931 27.290199 l
109.83 27.290199 l
109.83 30.3375 l
109.83 30.878799 109.954 31.2652 110.203 31.496799 c
110.455 31.7283 110.754 31.844 111.101 31.844 c
111.353 31.844 111.565 31.778799 111.739 31.648399 c
111.916 31.5179 112.004 31.278299 112.004 30.929399 c
112.004 27.290199 l
112.922 27.290199 l
112.922 30.7777 l
112.922 31.240801 112.853 31.609301 112.716 31.8832 c
112.46 32.391899 111.979 32.64621 111.273 32.64621 c
110.942 32.64621 110.644 32.57774 110.379 32.4408 c
110.114 32.307098 109.883 32.099998 109.687 31.819599 c
109.569 32.047798 109.438 32.220699 109.294 32.3381 c
109.039 32.543499 108.702 32.64621 108.283 32.64621 c
107.914 32.64621 107.583 32.546761 107.292 32.347801 c
107.122 32.230499 106.932 32.042999 106.722 31.785299 c
106.722 32.52882 l
105.849 32.52882 l
105.849 27.290199 l
106.732 27.290199 l
106.732 30.068501 l
h
W
0 0 132 43 rc
104.849 33.64621 m
113.922 33.64621 l
113.922 26.290199 l
104.849 26.290199 l
h
f
Q
q
101.566 28.3957 m
101.481 28.5653 101.438 28.783701 101.438 29.0511 c
101.438 32.528858 l
100.535 32.528858 l
100.535 28.968 l
100.535 28.5212 100.609 28.1642 100.756 27.896799 c
101.027 27.3979 101.538 27.148399 102.287 27.148399 c
102.768 27.148399 103.177 27.2854 103.514 27.559299 c
103.684 27.696199 103.827 27.864201 103.941 28.063101 c
103.932 27.2903 l
104.766 27.2903 l
104.766 32.528858 l
103.882 32.528858 l
103.882 29.955999 l
103.882 29.444099 103.822 29.0413 103.701 28.7479 c
103.478 28.200001 103.059 27.9261 102.444 27.9261 c
102.016 27.9261 101.723 28.0826 101.566 28.3957 c
h
W
0 0 132 43 rc
99.535004 33.528858 m
105.766 33.528858 l
105.766 26.148399 l
99.535004 26.148399 l
h
f
Q
q
92.300102 32.528858 m
92.175697 32.193001 91.8992 31.426701 91.470497 30.2299 c
91.149902 29.329901 90.8815 28.596201 90.665604 28.028799 c
90.155098 26.6919 89.795097 25.876699 89.585701 25.5832 c
89.376297 25.2897 89.016296 25.143 88.505798 25.143 c
88.3815 25.143 88.285004 25.1479 88.216202 25.1576 c
88.150803 25.1674 88.069 25.1854 87.970802 25.211399 c
87.970802 26.013599 l
88.124603 25.971201 88.235901 25.945101 88.304604 25.9354 c
88.373299 25.9256 88.4338 25.9207 88.486198 25.9207 c
88.649803 25.9207 88.769302 25.9484 88.844498 26.003799 c
88.923103 26.056 88.988503 26.121201 89.040901 26.199499 c
89.057198 26.225599 89.116096 26.359301 89.217598 26.600599 c
89.319 26.8419 89.392601 27.0212 89.4384 27.138599 c
87.494698 32.528858 l
88.496002 32.528858 l
89.904701 28.263599 l
91.323303 32.528858 l
92.300102 32.528858 l
h
W
0 0 132 43 rc
86.494698 33.528858 m
93.300102 33.528858 l
93.300102 24.143 l
86.494698 24.143 l
h
f
Q
q
84.0168 27.4125 m
83.853203 27.5266 83.678101 27.7092 83.4916 27.9603 c
83.4916 27.290199 l
82.676804 27.290199 l
82.676804 34.5 l
83.535698 34.5 l
83.535698 31.8929 l
83.728798 32.144001 83.959503 32.334801 84.227798 32.465199 c
84.496201 32.5989 84.787399 32.665749 85.101501 32.665749 c
85.755997 32.665749 86.286102 32.4408 86.691902 31.9907 c
87.100899 31.544001 87.305397 30.883699 87.305397 30.0098 c
87.305397 29.181499 87.104202 28.4935 86.701698 27.945601 c
86.299202 27.3978 85.741302 27.123899 85.027901 27.123899 c
84.6287 27.123899 84.291603 27.2201 84.0168 27.4125 c
h
84.9739 27.9016 m
85.451698 27.9016 85.808403 28.0907 86.043999 28.469 c
86.282799 28.8473 86.402298 29.346201 86.402298 29.9657 c
86.402298 30.5168 86.282799 30.9734 86.043999 31.3353 c
85.808403 31.6973 85.4599 31.878201 84.998497 31.878201 c
84.596001 31.878201 84.242599 31.7299 83.938202 31.4331 c
83.637199 31.1364 83.486702 30.647301 83.486702 29.9657 c
83.486702 29.473301 83.548798 29.0739 83.673203 28.767401 c
83.905502 28.190201 84.339104 27.9016 84.9739 27.9016 c
h
W*
0 0 132 43 rc
81.676804 35.5 m
88.305397 35.5 l
88.305397 26.123899 l
81.676804 26.123899 l
h
f
Q
q
76.8451 32.621731 m
77.247498 32.621731 77.584602 32.536949 77.856201 32.367401 c
78.013298 32.2696 78.191597 32.0984 78.391197 31.8538 c
78.391197 34.5 l
79.240402 34.5 l
79.240402 27.290199 l
78.445198 27.290199 l
78.445198 28.018999 l
78.238998 27.696199 77.9953 27.462999 77.713799 27.3195 c
77.432404 27.1761 77.1101 27.1043 76.746902 27.1043 c
76.161102 27.1043 75.6539 27.3489 75.225304 27.837999 c
74.7966 28.3304 74.582298 28.9842 74.582298 29.7994 c
74.582298 30.5625 74.777 31.222799 75.166397 31.780399 c
75.558998 32.341301 76.118599 32.621731 76.8451 32.621731 c
h
75.5149 29.848301 m
75.5149 29.2875 75.6343 28.8179 75.873199 28.4396 c
76.112099 28.061399 76.494904 27.872299 77.021797 27.872299 c
77.430801 27.872299 77.766197 28.0467 78.028 28.395599 c
78.292999 28.747801 78.425598 29.2516 78.425598 29.907 c
78.425598 30.569 78.289803 31.0581 78.018204 31.374399 c
77.746597 31.694 77.411201 31.8538 77.011902 31.8538 c
76.566902 31.8538 76.205299 31.6842 75.9272 31.3451 c
75.652298 31.006001 75.5149 30.507 75.5149 29.848301 c
h
W*
0 0 132 43 rc
73.582298 35.5 m
80.240402 35.5 l
80.240402 26.1043 l
73.582298 26.1043 l
h
f
Q
q
71.850304 32.64621 m
72.223396 32.64621 72.584999 32.55817 72.935097 32.382099 c
73.285202 32.209301 73.551903 31.984301 73.735199 31.7071 c
73.911903 31.4429 74.029701 31.1348 74.0886 30.7826 c
74.1409 30.5413 74.167099 30.1565 74.167099 29.6283 c
70.314003 29.6283 l
70.330399 29.096701 70.456299 28.6696 70.691902 28.346701 c
70.927597 28.027201 71.292397 27.867399 71.786499 27.867399 c
72.247902 27.867399 72.616096 28.018999 72.8909 28.3223 c
73.047997 28.4984 73.159302 28.7022 73.224701 28.933701 c
74.093498 28.933701 l
74.070602 28.741301 73.993698 28.5261 73.862801 28.288 c
73.735199 28.053301 73.591202 27.860901 73.430901 27.710899 c
73.162498 27.450001 72.830399 27.273899 72.434402 27.1826 c
72.221703 27.1304 71.981201 27.1043 71.712898 27.1043 c
71.058403 27.1043 70.503799 27.340799 70.048897 27.813601 c
69.594101 28.2897 69.366699 28.954901 69.366699 29.8092 c
69.366699 30.6506 69.595703 31.3337 70.053802 31.8587 c
70.512001 32.383701 71.110802 32.64621 71.850304 32.64621 c
h
73.259102 30.3277 m
73.223099 30.7092 73.139603 31.014099 73.008698 31.242399 c
72.766602 31.6663 72.362503 31.8783 71.796303 31.8783 c
71.390602 31.8783 71.050301 31.731501 70.775398 31.438101 c
70.500504 31.1478 70.354897 30.7777 70.338501 30.3277 c
73.259102 30.3277 l
h
W*
0 0 132 43 rc
68.366699 33.64621 m
75.167099 33.64621 l
75.167099 26.1043 l
68.366699 26.1043 l
h
f
Q
q
68.235001 28.390699 m
68.235001 28.208099 68.297096 28.0858 68.421501 28.0238 c
68.490196 27.988001 68.604698 27.969999 68.765099 27.969999 c
68.902496 27.969999 l
68.951599 27.973301 69.008904 27.978201 69.074303 27.984699 c
69.074303 27.2901 l
68.9729 27.260799 68.866501 27.239599 68.755203 27.2265 c
68.647301 27.213499 68.529503 27.207001 68.401802 27.207001 c
67.989502 27.207001 67.709801 27.3113 67.5625 27.52 c
67.415199 27.732 67.341599 28.005899 67.341599 28.341801 c
67.341599 31.8097 l
66.629898 31.8097 l
66.629898 32.52874 l
67.341599 32.52874 l
67.341599 33.991241 l
68.235001 33.991241 l
68.235001 32.52874 l
69.074303 32.52874 l
69.074303 31.8097 l
68.235001 31.8097 l
68.235001 28.390699 l
h
W
0 0 132 43 rc
65.629898 34.991241 m
70.074303 34.991241 l
70.074303 26.207001 l
65.629898 26.207001 l
h
f
Q
q
64.688301 30.4646 m
64.891197 30.4907 65.027 30.5755 65.095703 30.719 c
65.135002 30.797199 65.154602 30.9097 65.154602 31.056499 c
65.154602 31.356501 65.0466 31.573299 64.830704 31.707001 c
64.617996 31.844 64.311996 31.9125 63.9128 31.9125 c
63.451401 31.9125 63.124199 31.7885 62.931099 31.540701 c
62.823101 31.403799 62.752701 31.1999 62.720001 30.9293 c
61.895401 30.9293 l
61.9118 31.5749 62.121201 32.0233 62.523701 32.274399 c
62.929501 32.528759 63.398998 32.65593 63.9324 32.65593 c
64.550903 32.65593 65.0532 32.53854 65.439301 32.303799 c
65.822197 32.069 66.013603 31.7038 66.013603 31.208099 c
66.013603 28.190201 l
66.013603 28.098801 66.031601 28.025499 66.067596 27.969999 c
66.106796 27.9146 66.186996 27.8869 66.308098 27.8869 c
66.347397 27.8869 66.391502 27.8885 66.440598 27.8918 c
66.4897 27.8983 66.542099 27.9065 66.597702 27.916201 c
66.597702 27.265699 l
66.460297 27.226601 66.355499 27.202101 66.2836 27.192301 c
66.211601 27.182501 66.113403 27.177601 65.988998 27.177601 c
65.6847 27.177601 65.463799 27.285299 65.326401 27.5005 c
65.254402 27.614599 65.203697 27.775999 65.174202 27.984699 c
64.994301 27.749901 64.735802 27.546101 64.398697 27.373301 c
64.061699 27.2005 63.6903 27.1141 63.2845 27.1141 c
62.796902 27.1141 62.397701 27.260799 62.0868 27.5543 c
61.779202 27.851 61.625401 28.2211 61.625401 28.6646 c
61.625401 29.150499 61.777599 29.5271 62.081902 29.7945 c
62.3862 30.061899 62.7855 30.226601 63.279598 30.2885 c
64.688301 30.4646 l
h
62.548199 28.6842 m
62.548199 28.4298 62.641499 28.2293 62.827999 28.0825 c
63.0145 27.935801 63.235401 27.8624 63.490601 27.8624 c
63.801498 27.8624 64.1026 27.9342 64.393799 28.0777 c
64.884598 28.315701 65.130096 28.7054 65.130096 29.2467 c
65.130096 29.9559 l
65.022102 29.8874 64.883003 29.8304 64.712898 29.7847 c
64.542702 29.7391 64.375801 29.706499 64.212196 29.686899 c
63.6772 29.618401 l
63.356499 29.576 63.116001 29.509199 62.955601 29.4179 c
62.683998 29.264601 62.548199 29.02 62.548199 28.6842 c
h
W*
0 0 132 43 rc
60.625401 33.65593 m
67.597702 33.65593 l
67.597702 26.1141 l
60.625401 26.1141 l
h
f
Q
q
59.688801 31.623899 m
59.7575 31.799999 59.925999 32.013599 60.194302 32.264702 c
60.4627 32.519039 60.7719 32.64621 61.122002 32.64621 c
61.138401 32.64621 61.166199 32.644581 61.205502 32.641319 c
61.244701 32.638062 61.311798 32.631538 61.4067 32.621761 c
61.4067 31.6924 l
61.354401 31.7022 61.305302 31.7087 61.259499 31.712 c
61.2169 31.7152 61.169498 31.7169 61.1171 31.7169 c
60.6721 31.7169 60.330101 31.5734 60.091301 31.2864 c
59.852402 31.002701 59.732899 30.674999 59.732899 30.303301 c
59.732899 27.290199 l
58.8494 27.290199 l
58.8494 32.52882 l
59.688801 32.52882 l
59.688801 31.623899 l
h
W
0 0 132 43 rc
57.8494 33.64621 m
62.4067 33.64621 l
62.4067 26.290199 l
57.8494 26.290199 l
h
f
Q
q
56.726299 27.52 m
56.579102 27.732 56.505501 28.005899 56.505501 28.341801 c
56.505501 31.8097 l
55.793701 31.8097 l
55.793701 32.52874 l
56.505501 32.52874 l
56.505501 33.991241 l
57.3988 33.991241 l
57.3988 32.52874 l
58.238098 32.52874 l
58.238098 31.8097 l
57.3988 31.8097 l
57.3988 28.390699 l
57.3988 28.208099 57.460999 28.0858 57.5853 28.0238 c
57.653999 27.988001 57.7686 27.969999 57.928902 27.969999 c
58.066299 27.969999 l
58.115398 27.973301 58.172699 27.978201 58.238098 27.984699 c
58.238098 27.2901 l
58.1367 27.260799 58.030399 27.239599 57.919102 27.2265 c
57.8111 27.213499 57.693298 27.207001 57.565701 27.207001 c
57.1534 27.207001 56.8736 27.3113 56.726299 27.52 c
h
W
0 0 132 43 rc
54.793701 34.991241 m
59.238098 34.991241 l
59.238098 26.207001 l
54.793701 26.207001 l
h
f
Q
q
52.1292 28.933599 m
52.155399 28.6401 52.229 28.4151 52.350101 28.2586 c
52.572601 27.974899 52.958801 27.833 53.508499 27.833 c
53.835701 27.833 54.123699 27.903099 54.372398 28.043301 c
54.621101 28.1868 54.745399 28.4069 54.745399 28.703699 c
54.745399 28.928699 54.645599 29.099899 54.445999 29.2173 c
54.318401 29.289 54.066399 29.3722 53.690102 29.4667 c
52.988201 29.642799 l
52.539902 29.7537 52.2094 29.8776 51.9967 30.014601 c
51.6171 30.2526 51.427299 30.5819 51.427299 31.0026 c
51.427299 31.498301 51.605701 31.8993 51.962399 32.205898 c
52.3223 32.51239 52.805 32.665649 53.410301 32.665649 c
54.202202 32.665649 54.7733 32.434101 55.123402 31.9711 c
55.342602 31.677601 55.449001 31.3613 55.442402 31.0222 c
54.608002 31.0222 l
54.591599 31.2211 54.521301 31.4021 54.3969 31.5651 c
54.194099 31.7966 53.8423 31.912399 53.341599 31.912399 c
53.007801 31.912399 52.7542 31.848801 52.580799 31.7216 c
52.410702 31.5944 52.3256 31.4265 52.3256 31.2178 c
52.3256 30.989599 52.438499 30.8069 52.664299 30.67 c
52.795101 30.588499 52.988201 30.516701 53.2435 30.4548 c
53.827599 30.312901 l
54.462399 30.1597 54.887798 30.011299 55.103802 29.8678 c
55.4473 29.642799 55.619099 29.289 55.619099 28.8064 c
55.619099 28.340099 55.4408 27.937401 55.084099 27.5982 c
54.730701 27.2591 54.1908 27.0895 53.464298 27.0895 c
52.682301 27.0895 52.127602 27.2656 51.8004 27.6178 c
51.476398 27.9732 51.303001 28.4118 51.280102 28.933599 c
52.1292 28.933599 l
h
W
0 0 132 43 rc
50.280102 33.665649 m
56.619099 33.665649 l
56.619099 26.0895 l
50.280102 26.0895 l
h
f
Q
q
46.511398 27.896799 m
46.364101 28.1642 46.290501 28.5212 46.290501 28.968 c
46.290501 32.528858 l
47.193699 32.528858 l
47.193699 29.0511 l
47.193699 28.783701 47.236198 28.5653 47.321301 28.3957 c
47.478298 28.0826 47.771198 27.9261 48.199902 27.9261 c
48.815102 27.9261 49.233898 28.200001 49.456402 28.7479 c
49.577499 29.0413 49.6381 29.444099 49.6381 29.955999 c
49.6381 32.528858 l
50.521599 32.528858 l
50.521599 27.2903 l
49.687099 27.2903 l
49.696999 28.063101 l
49.582401 27.864201 49.440102 27.696199 49.269901 27.559299 c
48.932899 27.2854 48.5238 27.148399 48.042801 27.148399 c
47.293499 27.148399 46.783001 27.3979 46.511398 27.896799 c
h
W
0 0 132 43 rc
45.290501 33.528858 m
51.521599 33.528858 l
51.521599 26.148399 l
45.290501 26.148399 l
h
f
Q
q
105.582 21.0289 m
105.582 12.5357 l
103.991 12.5357 l
103.991 10.3469 l
109.668 10.3469 l
109.668 12.5357 l
108.262 12.5357 l
108.262 21.0289 l
109.668 21.0289 l
109.668 23.217699 l
103.991 23.217699 l
103.991 21.0289 l
105.582 21.0289 l
h
W
0 0 132 43 rc
102.991 24.217699 m
110.668 24.217699 l
110.668 9.3469 l
102.991 9.3469 l
h
f
Q
q
44.3978 27.2901 0.88349998 7.18536 rc
43.3978 35.47546 m
46.2813 35.47546 l
46.2813 26.2901 l
43.3978 26.2901 l
h
f
Q
q
42.461201 27.2901 0.88349998 7.18536 rc
41.461201 35.47546 m
44.3447 35.47546 l
44.3447 26.2901 l
41.461201 26.2901 l
h
f
Q
q
40.5 27.2901 0.89819998 5.21416 rc
39.5 33.504261 m
42.398201 33.504261 l
42.398201 26.2901 l
39.5 26.2901 l
h
f
Q
q
40.5 33.477631 0.89819998 0.99782997 rc
39.5 35.47546 m
42.398201 35.47546 l
42.398201 32.477631 l
39.5 32.477631 l
h
f
ep
end
%%Trailer
%%EOF
